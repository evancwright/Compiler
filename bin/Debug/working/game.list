                      (         main.asm):00001         ;romtest.asm
                      (         main.asm):00002         ;test program to see if coco ROM routines
                      (         main.asm):00003         ;can be used to read/write text
                      (         main.asm):00004         ; answer is yes!
     006F             (         main.asm):00005         DEVNUM equ 0x006f       ;       addr of dev
     B99C             (         main.asm):00006         SYSPRINT equ $b99c      ;       Out String: Prints ASCIIZ string ptd to by X to DEVNUM
     B958             (         main.asm):00007         PRINTCR equ $b958 ; print cr/nl
     A390             (         main.asm):00008         GETLINE equ $a390 ;
     02DD             (         main.asm):00009         KBBUF   equ $02dd       ; keyboard buffer 
                      (         main.asm):00010                 org 0xE00
0E00                  (         main.asm):00011         start
                      (         main.asm):00012         
                      (         main.asm):00013         ;       include verb_ids.asm
                      (         main.asm):00014                 include objdefs.asm
     00FF             (      objdefs.asm):00001         NO_OBJECT equ 255
     00FE             (      objdefs.asm):00002         ANY_OBJECT equ 254
                      (      objdefs.asm):00003         
                      (      objdefs.asm):00004         ; byte 2
     0001             (      objdefs.asm):00005         PORTABLE_MASK equ 1
                      (      objdefs.asm):00006         ;EDIBLE_MASK equ 2
     0002             (      objdefs.asm):00007         BACKDROP_MASK equ 2
     0004             (      objdefs.asm):00008         DRINKABLE_MASK equ 4
     0008             (      objdefs.asm):00009         FLAMMABLE_MASK equ 8
     0010             (      objdefs.asm):00010         LIGHTABLE_MASK equ 16
     0020             (      objdefs.asm):00011         LIT_MASK equ 32 
     0020             (      objdefs.asm):00012         EMITTING_LIGHT_MASK equ 32
     0040             (      objdefs.asm):00013         DOOR_MASK equ 64
     0080             (      objdefs.asm):00014         UNUSED_MASK equ 128
                      (      objdefs.asm):00015         ;DRINKABLE_MASK equ 128
                      (      objdefs.asm):00016         
                      (      objdefs.asm):00017         
                      (      objdefs.asm):00018         ; byte 1 (PROPERTY_BYTE_1)
     0001             (      objdefs.asm):00019         SCENERY_MASK equ 1
     0002             (      objdefs.asm):00020         SUPPORTER_MASK equ 2
     0004             (      objdefs.asm):00021         CONTAINER_MASK equ 4
     0008             (      objdefs.asm):00022         TRANSPARENT_MASK equ 8
     0010             (      objdefs.asm):00023         OPENABLE_MASK equ 16
     0020             (      objdefs.asm):00024         OPEN_MASK equ 32
     0040             (      objdefs.asm):00025         LOCKABLE_MASK equ 64
     0080             (      objdefs.asm):00026         LOCKED_MASK equ 128
     0024             (      objdefs.asm):00027         OPEN_CONTAINER_MASK equ (OPEN_MASK|CONTAINER_MASK) ;
                      (      objdefs.asm):00028         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (      objdefs.asm):00029         ; objdefs.asm
                      (      objdefs.asm):00030         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (      objdefs.asm):00031         
     0000             (      objdefs.asm):00032         OBJ_ID equ 0
     0001             (      objdefs.asm):00033         HOLDER_ID equ 1
     0002             (      objdefs.asm):00034         INITIAL_DESC_ID equ  2
     0003             (      objdefs.asm):00035         DESC_ID equ 3
     0004             (      objdefs.asm):00036         NORTH equ 4
     0005             (      objdefs.asm):00037         SOUTH equ 5
     0006             (      objdefs.asm):00038         EAST equ 6
     0007             (      objdefs.asm):00039         WEST equ 7
     0008             (      objdefs.asm):00040         NORTHEAST equ 8
     0009             (      objdefs.asm):00041         SOUTHEAST equ 9
     000A             (      objdefs.asm):00042         SOUTHWEST equ 10
     000B             (      objdefs.asm):00043         NORTHWEST equ 11
     000C             (      objdefs.asm):00044         UP equ 12
     000D             (      objdefs.asm):00045         DOWN equ 13
     000E             (      objdefs.asm):00046         ENTER equ 14
     000F             (      objdefs.asm):00047         OUT equ 15
     0010             (      objdefs.asm):00048         MASS equ 16
                      (      objdefs.asm):00049         
                      (      objdefs.asm):00050         
                      (      objdefs.asm):00051         ;OBJ_ENTRY_SIZE equ 18
                      (      objdefs.asm):00052         ;PROPERTY_BYTE_1 equ 16
                      (      objdefs.asm):00053         ;PROPERTY_BYTE_2 equ 17
                      (      objdefs.asm):00054         
     0013             (      objdefs.asm):00055         OBJ_ENTRY_SIZE equ 19
     0011             (      objdefs.asm):00056         PROPERTY_BYTE_1 equ 17
     0012             (      objdefs.asm):00057         PROPERTY_BYTE_2 equ 18
0E00                  (         main.asm):00015         main
0E00 CE7FFF           (         main.asm):00016                 ldu #0x7FFF ; setup user stack
0E03 0F6F             (         main.asm):00017                 clr DEVNUM      ; set device to screen (not needed? ) 
0E05 10FF4278         (         main.asm):00018                 sts sys_stack_save
0E09 BD1D4B           (         main.asm):00019                 jsr cls
0E0C 8E427A           (         main.asm):00020                 ldx #welcome
0E0F BD1914           (         main.asm):00021                 jsr PRINT
0E12 BDB958           (         main.asm):00022                 jsr PRINTCR
0E15 8E4297           (         main.asm):00023                 ldx #author
0E18 BD1914           (         main.asm):00024                 jsr PRINT
0E1B BDB958           (         main.asm):00025                 jsr PRINTCR
0E1E 8E42AE           (         main.asm):00026                 ldx #version
0E21 BD1914           (         main.asm):00027                 jsr PRINT
0E24 BDB958           (         main.asm):00028                 jsr PRINTCR
0E27 BDB958           (         main.asm):00029                 jsr PRINTCR
0E2A BD1746           (         main.asm):00030                 jsr look_sub 
0E2D BD1C6C           (         main.asm):00031                 jsr draw_bar
0E30 BDA390           (         main.asm):00032         @lp     jsr GETLINE             ; get user command
0E33 BD0E46           (         main.asm):00033                 jsr parse
0E36 BDB958           (         main.asm):00034                 jsr PRINTCR
0E39 BD107F           (         main.asm):00035                 jsr encode_sentence
0E3C BD1C6C           (         main.asm):00036                 jsr draw_bar
0E3F 20EF             (         main.asm):00037                 bra @lp
0E41 10FE4278         (         main.asm):00038         quit lds sys_stack_save
0E45 39               (         main.asm):00039         @x      rts
                      (         main.asm):00040         
                      (         main.asm):00041                 include parser.asm      
                      (       parser.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00002         ;PARSER SUBROUTINES
                      (       parser.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00004         
     0005             (       parser.asm):00005         WORD_SPACES EQU 5
     0020             (       parser.asm):00006         WORD_SIZE EQU 32
     0020             (       parser.asm):00007         SPACE EQU 0x20 
     0001             (       parser.asm):00008         PLAYER EQU 1
     0000             (       parser.asm):00009         OFFSCREEN EQU 0
                      (       parser.asm):00010         
0E46                  (       parser.asm):00011         parse
                      (       parser.asm):00012         ;       jsr copy_data ; just for testing
0E46 BD0F81           (       parser.asm):00013                 jsr tokenize
0E49 BD0E99           (       parser.asm):00014                 jsr compress_verb
0E4C 39               (       parser.asm):00015                 rts
                      (       parser.asm):00016         
                      (       parser.asm):00017          
                      (       parser.asm):00018         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00019         ;nulls out the 50 characters in the
                      (       parser.asm):00020         ;5x10 buffer for the words in the
                      (       parser.asm):00021         ;sentence entered by the user
                      (       parser.asm):00022         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0E4D                  (       parser.asm):00023         clear_buffers
0E4D 8E0000           (       parser.asm):00024                 ldx #0
0E50 8600             (       parser.asm):00025                 lda #0
0E52 108E416D         (       parser.asm):00026                 ldy #word1
0E56 A7A0             (       parser.asm):00027         @lp     sta ,y+
0E58 108C426C         (       parser.asm):00028                 cmpy #(hit_end-1) ; hit end of buffer?
0E5C 26F8             (       parser.asm):00029                 bne @lp
0E5E 39               (       parser.asm):00030                 rts
                      (       parser.asm):00031         
                      (       parser.asm):00032         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00033         ; scans until a non-space or null is found
                      (       parser.asm):00034         ; sets hit_end if null is found
                      (       parser.asm):00035         ; search starts at addr stored in x
                      (       parser.asm):00036         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0E5F                  (       parser.asm):00037         find_start
0E5F 7F426D           (       parser.asm):00038                 clr hit_end
0E62 A680             (       parser.asm):00039         @lp lda ,x+
0E64 B74273           (       parser.asm):00040                 sta first_char
0E67 8120             (       parser.asm):00041                 cmpa #0x20      ; space?
0E69 27F7             (       parser.asm):00042                 beq @lp
0E6B 8100             (       parser.asm):00043                 cmpa #0 ; null?
0E6D 2605             (       parser.asm):00044                 bne @x  ; not null, we're done 
0E6F 8601             (       parser.asm):00045                 lda #1  ; hit null
0E71 B7426D           (       parser.asm):00046                 sta hit_end
0E74 301F             (       parser.asm):00047         @x      leax -1,x ; back up one byte (to count for x+)
0E76 BF426F           (       parser.asm):00048                 stx word_start
0E79 39               (       parser.asm):00049                 rts
                      (       parser.asm):00050                 
                      (       parser.asm):00051         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00052         ; scans until a space or null is found
                      (       parser.asm):00053         ; sets the hit_end byte to 1 if a null is hit
                      (       parser.asm):00054         ; search starts at word_start.
                      (       parser.asm):00055         ; end is replaced a null
                      (       parser.asm):00056         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0E7A                  (       parser.asm):00057         find_end
0E7A 8600             (       parser.asm):00058                 lda #0  ;assume we won't hit null
0E7C B7426D           (       parser.asm):00059                 sta hit_end 
0E7F BE426F           (       parser.asm):00060                 ldx word_start
0E82 A680             (       parser.asm):00061         @lp     lda ,x+
0E84 8120             (       parser.asm):00062                 cmpa #0x20 ; space
0E86 2709             (       parser.asm):00063                 beq @x  ; hit a space, done
0E88 8100             (       parser.asm):00064                 cmpa #0 ; null?
0E8A 26F6             (       parser.asm):00065                 bne @lp ; no keep, scanning 
0E8C 8601             (       parser.asm):00066                 lda #1  ; hit null, set flag
0E8E B7426D           (       parser.asm):00067                 sta hit_end
0E91 BF4271           (       parser.asm):00068         @x      stx word_end
0E94 8600             (       parser.asm):00069                 lda #0          ; replace end with null terminator
0E96 A71F             (       parser.asm):00070                 sta -1,x
0E98 39               (       parser.asm):00071                 rts
                      (       parser.asm):00072         
                      (       parser.asm):00073         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00074         ; compress_verb
                      (       parser.asm):00075         ; checks to see if the 2nd word is a prep
                      (       parser.asm):00076         ; if it is, that word is concatenated onto 
                      (       parser.asm):00077         ; the first work.  This accomodates verbs 
                      (       parser.asm):00078         ; like "look at"
                      (       parser.asm):00079         ; registers an unaffected
                      (       parser.asm):00080         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0E99                  (       parser.asm):00081         compress_verb
0E99 3436             (       parser.asm):00082                 pshs d,x,y
0E9B 8E418D           (       parser.asm):00083                 ldx #word2
0E9E 108E3479         (       parser.asm):00084                 ldy #prep_table
0EA2 BD0F2D           (       parser.asm):00085                 jsr word_in_table
0EA5 3702             (       parser.asm):00086                 pulu a
0EA7 8101             (       parser.asm):00087                 cmpa #1 
0EA9 2642             (       parser.asm):00088                 bne @x                  ; not a prep, we're done
0EAB 8E416D           (       parser.asm):00089                 ldx #word1              
0EAE BF426F           (       parser.asm):00090                 stx word_start
0EB1 BD0E7A           (       parser.asm):00091                 jsr find_end    ; find end (sets word_end)
0EB4 10BE4271         (       parser.asm):00092                 ldy word_end
0EB8 313F             (       parser.asm):00093                 leay -1,y
0EBA 10BF4271         (       parser.asm):00094                 sty word_end
0EBE A69F4271         (       parser.asm):00095                 lda [word_end]  ; test - make sure its a null
0EC2 8620             (       parser.asm):00096                 lda #0x20               ; replace null with space
0EC4 A79F4271         (       parser.asm):00097                 sta [word_end]
0EC8 10BE4271         (       parser.asm):00098                 ldy word_end    ; set location to copy from
0ECC 3121             (       parser.asm):00099                 leay 1,y                ; move past the space
0ECE 8E418D           (       parser.asm):00100                 ldx #word2              ; set location to copy to (y)
0ED1 BD0F01           (       parser.asm):00101                 jsr strcpy              ; copy word 2 to end of word 1
0ED4 8E0000           (       parser.asm):00102                 ldx     #0                      ; shift all words down (move each byte 32 down)
0ED7 A68941AD         (       parser.asm):00103         @lp     lda word3,x             ; grab a byte 
0EDB A789418D         (       parser.asm):00104                 sta word2,x     ; store it
0EDF 3001             (       parser.asm):00105                 leax 1,x                ; go to next byte
0EE1 8C0080           (       parser.asm):00106                 cmpx #(WORD_SIZE*(WORD_SPACES-1))
0EE4 26F1             (       parser.asm):00107                 bne @lp                 
0EE6 B6426E           (       parser.asm):00108                 lda word_count                          ;dec word_count
0EE9 4A               (       parser.asm):00109                 deca 
0EEA B7426E           (       parser.asm):00110                 sta word_count
0EED 3536             (       parser.asm):00111         @x      puls d,y,x
0EEF 39               (       parser.asm):00112                 rts
                      (       parser.asm):00113                 
                      (       parser.asm):00114         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00115         ; strcpy
                      (       parser.asm):00116         ; moves the string from wrd_start to wrd_end
                      (       parser.asm):00117         ; to the buffer stored in y
                      (       parser.asm):00118         ; tbd: limit the number of chars copied
                      (       parser.asm):00119         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0EF0                  (       parser.asm):00120         strcpy_old
0EF0 3420             (       parser.asm):00121                 pshs y
0EF2 BE426F           (       parser.asm):00122                 ldx word_start
0EF5 A680             (       parser.asm):00123         @lp     lda ,x+
0EF7 A7A0             (       parser.asm):00124                 sta ,y+
0EF9 BC4271           (       parser.asm):00125                 cmpx word_end
0EFC 26F7             (       parser.asm):00126                 bne @lp
0EFE 3520             (       parser.asm):00127                 puls y
0F00 39               (       parser.asm):00128                 rts
                      (       parser.asm):00129         
                      (       parser.asm):00130         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00131         ; strcpy
                      (       parser.asm):00132         ; copies string from x to y
                      (       parser.asm):00133         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F01                  (       parser.asm):00134         strcpy
0F01 3430             (       parser.asm):00135                 pshs x,y
0F03 A680             (       parser.asm):00136         @lp     lda ,x+
0F05 A7A0             (       parser.asm):00137                 sta ,y+
0F07 8100             (       parser.asm):00138                 cmpa #0 ; was last char a null
0F09 2702             (       parser.asm):00139                 beq @x
0F0B 20F6             (       parser.asm):00140                 bra @lp
0F0D 3530             (       parser.asm):00141         @x      puls y,x
0F0F 39               (       parser.asm):00142                 rts
                      (       parser.asm):00143         
                      (       parser.asm):00144         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00145         ;streq - test two strings for equality
                      (       parser.asm):00146         ;
                      (       parser.asm):00147         ;       x,y contain strings to compare
                      (       parser.asm):00148         ;       assumes strings are is null terminated
                      (       parser.asm):00149         ;       registers are clobbered
                      (       parser.asm):00150         ;       1 or 0 is put on user stack
                      (       parser.asm):00151         ;
                      (       parser.asm):00152         ;   cmpare two chars.
                      (       parser.asm):00153         ;   are they equal?
                      (       parser.asm):00154         ;       if no - return 0
                      (       parser.asm):00155         ;       if null - return 1
                      (       parser.asm):00156         ;   if not null loop 
                      (       parser.asm):00157         ;   
                      (       parser.asm):00158         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F10                  (       parser.asm):00159         streq
0F10 3430             (       parser.asm):00160                 pshs x,y
0F12 A684             (       parser.asm):00161         @lp     lda ,x                  ; get char
0F14 A1A4             (       parser.asm):00162                 cmpa ,y         ; are chars equal?
0F16 260E             (       parser.asm):00163                 bne @n                  ; no - return 0 
0F18 8100             (       parser.asm):00164                 cmpa #0                 ; equal. null?
0F1A 2706             (       parser.asm):00165                 beq @y                  ; yes (both nulls), push 1 and return
0F1C 3001             (       parser.asm):00166                 leax 1,x                ; go to next char
0F1E 3121             (       parser.asm):00167                 leay 1,y
0F20 20F0             (       parser.asm):00168                 bra @lp                         
0F22 8601             (       parser.asm):00169         @y  lda #1                      ; push 1 and return
0F24 2002             (       parser.asm):00170                 bra @x
0F26 8600             (       parser.asm):00171         @n      lda #0                  ; push 0 and return
0F28 3602             (       parser.asm):00172         @x      pshu a
0F2A 3530             (       parser.asm):00173                 puls y,x
0F2C 39               (       parser.asm):00174                 rts     
                      (       parser.asm):00175                 
                      (       parser.asm):00176         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00177         ;word_in_table
                      (       parser.asm):00178         ;
                      (       parser.asm):00179         ;x contains address of word
                      (       parser.asm):00180         ;y contains start of table
                      (       parser.asm):00181         ;returns 1 or 0 on the user stack
                      (       parser.asm):00182         ;the index is stored in table_index
                      (       parser.asm):00183         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F2D                  (       parser.asm):00184         word_in_table
0F2D 7F4275           (       parser.asm):00185                 clr     table_index ;set index to #ff (invalid)
0F30 3121             (       parser.asm):00186         @lp     leay 1,y                ;increment y to skip length byte
0F32 3430             (       parser.asm):00187                 pshs x,y                ; save regs
0F34 BD0F10           (       parser.asm):00188                 jsr streq               ;compare
0F37 3702             (       parser.asm):00189                 pulu a                  ; pull result into reg a
0F39 3530             (       parser.asm):00190                 puls y,x                ; restore regs
0F3B 8101             (       parser.asm):00191                 cmpa #1                 ;check result
0F3D 2713             (       parser.asm):00192                 beq @y                  ;equal! set flag and quit
0F3F 7C4275           (       parser.asm):00193                 inc table_index ;
0F42 313F             (       parser.asm):00194                 leay -1,y               ;back up to get amt to skip
0F44 A6A4             (       parser.asm):00195                 lda ,y                  ;get the length at that byte
0F46 31A6             (       parser.asm):00196                 leay a,y                ;skip ahead by that amount
0F48 3122             (       parser.asm):00197                 leay 2,y                ;account for 1st byte and null at end
0F4A A6A4             (       parser.asm):00198                 lda ,y                  ;is that byte 0 (the end of the list)
0F4C 8100             (       parser.asm):00199                 cmpa #0                 
0F4E 26E0             (       parser.asm):00200                 bne     @lp                     ;if no, keep checking
0F50 8600             (       parser.asm):00201                 lda #0                  ;not found, return 0
0F52 3602             (       parser.asm):00202         @y  pshu a                      ;push return val onto stack
                      (       parser.asm):00203                 ;sta in_tbl             ;debug
0F54 39               (       parser.asm):00204         @x      rts             
                      (       parser.asm):00205         
                      (       parser.asm):00206         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00207         ;word_in_table
                      (       parser.asm):00208         ;
                      (       parser.asm):00209         ;x contains address of word
                      (       parser.asm):00210         ;y contains start of table
                      (       parser.asm):00211         ;returns ff or the user index on the stack
                      (       parser.asm):00212         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F55                  (       parser.asm):00213         get_word_index
0F55 3436             (       parser.asm):00214                 pshs d,x,y                      ;save a
0F57 8600             (       parser.asm):00215                 lda #0                  ;assume not found
0F59 3602             (       parser.asm):00216                 pshu a                  ; push return code
0F5B 3121             (       parser.asm):00217         @lp     leay 1,y                ;increment y to skip length byte
0F5D 3430             (       parser.asm):00218                 pshs x,y                ; save regs
0F5F BD0F10           (       parser.asm):00219                 jsr streq               ;compare
0F62 3702             (       parser.asm):00220                 pulu a                  ; pull result into reg a
0F64 3530             (       parser.asm):00221                 puls y,x                ; restore regs
0F66 8101             (       parser.asm):00222                 cmpa #1                 ;check result
0F68 2714             (       parser.asm):00223                 beq @x                  ;equal! set flag and quit
0F6A 6C40             (       parser.asm):00224                 inc 0,u                 ;inc loop counter
0F6C 313F             (       parser.asm):00225                 leay -1,y               ;back up to get amt to skip
0F6E A6A4             (       parser.asm):00226                 lda ,y                  ;get the length at that byte
0F70 31A6             (       parser.asm):00227                 leay a,y                ;skip ahead by that amount
0F72 3122             (       parser.asm):00228                 leay 2,y                ;account for 1st byte and null at end
0F74 A6A4             (       parser.asm):00229                 lda ,y                  ;is that byte 0 (the end of the list)
0F76 8100             (       parser.asm):00230                 cmpa #0                 
0F78 26E1             (       parser.asm):00231                 bne     @lp                     ;if no, keep checking
0F7A 86FF             (       parser.asm):00232                 lda #$ff                        ;not found...
0F7C A740             (       parser.asm):00233                 sta 0,u                 ;put ff into our return var
0F7E 3536             (       parser.asm):00234         @x      puls y,x,d
0F80 39               (       parser.asm):00235                 rts
                      (       parser.asm):00236                         
                      (       parser.asm):00237         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00238         ;tokenize
                      (       parser.asm):00239         ;breaks up the text in "input" into words
                      (       parser.asm):00240         ;stored in the buffers
                      (       parser.asm):00241         ;y is used to hold the string storage location
                      (       parser.asm):00242         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F81                  (       parser.asm):00243         tokenize
0F81 BD0E4D           (       parser.asm):00244                 jsr clear_buffers
0F84 7F426E           (       parser.asm):00245                 clr word_count  
0F87 108E416D         (       parser.asm):00246                 ldy #word1                      ;set place to put strings
                      (       parser.asm):00247                 ;ldx #input                     ;load pos of str to scan
0F8B 8E02DD           (       parser.asm):00248                 ldx #KBBUF
0F8E BF426F           (       parser.asm):00249                 stx word_start  
0F91 BD0E5F           (       parser.asm):00250         @lp     jsr find_start
0F94 B6426D           (       parser.asm):00251                 lda hit_end
0F97 8101             (       parser.asm):00252                 cmpa #1                         ; hit end (no more wrds)
0F99 2737             (       parser.asm):00253                 beq @x
0F9B BD0E7A           (       parser.asm):00254                 jsr find_end            ; scan to end
0F9E 3630             (       parser.asm):00255                 pshu x,y
0FA0 BE426F           (       parser.asm):00256                 ldx word_start
0FA3 108E4160         (       parser.asm):00257                 ldy #article_table      ; is the word an article?
0FA7 BD0F2D           (       parser.asm):00258                 jsr word_in_table       ; 
0FAA 3702             (       parser.asm):00259                 pulu a                          ; get rslt
0FAC 3730             (       parser.asm):00260                 pulu y,x
0FAE 8101             (       parser.asm):00261                 cmpa #1                         ; was it an article?
0FB0 27DF             (       parser.asm):00262                 beq @lp                         ; yes, skip and go to next word
0FB2 3610             (       parser.asm):00263                 pshu x
0FB4 BE426F           (       parser.asm):00264                 ldx word_start
0FB7 BD0F01           (       parser.asm):00265                 jsr strcpy                      ; copies x to y
0FBA 3710             (       parser.asm):00266                 pulu x
0FBC 7C426E           (       parser.asm):00267                 inc word_count          ; inc word count
0FBF 31A820           (       parser.asm):00268                 leay 32,y                       ; move location to store str by (WORD_SIZE)
0FC2 B6426D           (       parser.asm):00269                 lda hit_end                     ; hit end?
0FC5 8101             (       parser.asm):00270                 cmpa #1
0FC7 2709             (       parser.asm):00271                 beq @x                          ; yes - done    
0FC9 8605             (       parser.asm):00272                 lda #WORD_SPACES        ; have we used all the storage locations
0FCB B1426E           (       parser.asm):00273                 cmpa word_count
0FCE 2702             (       parser.asm):00274                 beq @x                          ;out of spaces for words 
0FD0 20BF             (       parser.asm):00275                 bra @lp
0FD2 39               (       parser.asm):00276         @x      rts
                      (       parser.asm):00277         
                      (       parser.asm):00278         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00279         
                      (       parser.asm):00280         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00281         ;get_verbs_id
                      (       parser.asm):00282         ;
                      (       parser.asm):00283         ;return id# of verb in word1 or -1 (ff)
                      (       parser.asm):00284         ;
                      (       parser.asm):00285         ;table format
                      (       parser.asm):00286         ;id,lenght,text+null
                      (       parser.asm):00287         ;0
                      (       parser.asm):00288         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0FD3                  (       parser.asm):00289         get_verbs_id
0FD3 3432             (       parser.asm):00290                 pshs a,x,y
0FD5 8E3203           (       parser.asm):00291                 ldx #verb_table
0FD8 108E416D         (       parser.asm):00292                 ldy #word1
0FDC 3001             (       parser.asm):00293         @lp     leax 1,x        ;skip id byte
0FDE A600             (       parser.asm):00294                 lda 0,x         ;get length
0FE0 8100             (       parser.asm):00295                 cmpa #0         ;hit end of table?
0FE2 2719             (       parser.asm):00296                 beq @nf         ; not found
0FE4 3001             (       parser.asm):00297                 leax 1,x        ;skip length byte
0FE6 BD0F10           (       parser.asm):00298                 jsr streq       ;equal?
0FE9 3702             (       parser.asm):00299                 pulu a          
0FEB 8101             (       parser.asm):00300                 cmpa #1
0FED 2606             (       parser.asm):00301                 bne @sk         
0FEF 301E             (       parser.asm):00302                 leax -2,x       ;back up to id byte
0FF1 A600             (       parser.asm):00303                 lda 0,x         ;get it and return it
0FF3 200A             (       parser.asm):00304                 bra @x
0FF5 A61F             (       parser.asm):00305         @sk     lda -1,x        ;back up to length byte
0FF7 3086             (       parser.asm):00306                 leax a,x        ;skip text
0FF9 3001             (       parser.asm):00307                 leax 1,x        ;skip null byte
0FFB 20DF             (       parser.asm):00308                 bra @lp
0FFD 86FF             (       parser.asm):00309         @nf     lda #$ff                ;put -1 on stack and return
0FFF 3602             (       parser.asm):00310         @x      pshu a
1001 3532             (       parser.asm):00311                 puls y,x,a
1003 39               (       parser.asm):00312                 rts
                      (       parser.asm):00313                 
                      (       parser.asm):00314         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00315         ; b contains the id of the word to find the object for. 
                      (       parser.asm):00316         ; The object id is returned on the user stack.  
                      (       parser.asm):00317         ; ff is returned if the object is not found.
                      (       parser.asm):00318         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1004                  (       parser.asm):00319         get_obj_id
1004 3432             (       parser.asm):00320                 pshs a,x,y
1006 108E211C         (       parser.asm):00321                 ldy #obj_word_table
100A 86FF             (       parser.asm):00322                 lda #$ff                ; ff is 'not found'
100C 3602             (       parser.asm):00323                 pshu a          ; push return value onto stack
100E 3604             (       parser.asm):00324                 pshu b          ; save id param onto stack (local var)
                      (       parser.asm):00325         ;       lda #0
                      (       parser.asm):00326         ;@ol    pshs a          ; push outer loop counter
1010 8601             (       parser.asm):00327         @ol     lda #1          ; inner loop counter (1 to skip id byte)
1012 E6A6             (       parser.asm):00328         @il     ldb a,y         ; get word #
                      (       parser.asm):00329         ;       cmpb #$ff       ; is it empty?
                      (       parser.asm):00330         ;       beq @sk         ; skip if yes
1014 E140             (       parser.asm):00331                 cmpb 0,u        ; is b equal to param?
1016 2606             (       parser.asm):00332                 bne @sk                 
1018 E6A4             (       parser.asm):00333             ldb ,y              ; get the id
101A E741             (       parser.asm):00334                 stb 1,u ; store id of word in return var 
                      (       parser.asm):00335         ;       puls a          ; pop outer loop counter
101C 200F             (       parser.asm):00336                 bra @x
101E 4C               (       parser.asm):00337         @sk inca 
101F 8104             (       parser.asm):00338                 cmpa #4         ; (id byte + 3 cells) 
1021 26EF             (       parser.asm):00339                 bne @il
1023 3124             (       parser.asm):00340                 leay 4,y        ; advance to next row
1025 A6A4             (       parser.asm):00341                 lda ,y
1027 81FF             (       parser.asm):00342                 cmpa #$ff
1029 2702             (       parser.asm):00343                 beq @x
                      (       parser.asm):00344         ;       puls a          ; pop outer loop counter
                      (       parser.asm):00345         ;       inca            ; inc outer loop counter        
                      (       parser.asm):00346         ;       cmpa obj_table_size     ; see if we hit end of table
                      (       parser.asm):00347         ;       bne @ol
102B 20E3             (       parser.asm):00348                 bra @ol
102D 3702             (       parser.asm):00349         @x  pulu a              ; user param on stack
102F 3532             (       parser.asm):00350                 puls y,x,a
1031 39               (       parser.asm):00351                 rts
                      (       parser.asm):00352         
                      (       parser.asm):00353         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00354         ;find_prep_index
                      (       parser.asm):00355         ;
                      (       parser.asm):00356         ;this function returns the index of the preposition on
                      (       parser.asm):00357         ;the user stack.  If the
                      (       parser.asm):00358         ;sentence doesn't contain one, then 0 is returned.  This
                      (       parser.asm):00359         ;is used to figure out what type of sentence the player 
                      (       parser.asm):00360         ;has entered
                      (       parser.asm):00361         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1032                  (       parser.asm):00362         find_prep_index
1032 3432             (       parser.asm):00363                 pshs a,x,y
1034 8600             (       parser.asm):00364                 lda #0
1036 3602             (       parser.asm):00365                 pshu a  ;assume not found
1038 8602             (       parser.asm):00366                 lda #2
103A 8E41AD           (       parser.asm):00367                 ldx #word3  ;prep can't be in word 1 or 2
103D 3432             (       parser.asm):00368         @lp     pshs y,x,a
103F 108E3479         (       parser.asm):00369                 ldy #prep_table
1043 BD0F55           (       parser.asm):00370                 jsr get_word_index
1046 3532             (       parser.asm):00371                 puls a,x,y
1048 3704             (       parser.asm):00372                 pulu b          ;get return code        
104A C1FF             (       parser.asm):00373                 cmpb #$ff               ;found?
104C 270A             (       parser.asm):00374                 beq @sk
104E F711C5           (       parser.asm):00375                 stb prep_id             ;store prep id in sentence data
1051 F711C9           (       parser.asm):00376                 stb sentence+2
1054 A740             (       parser.asm):00377                 sta 0,u         ;store index in local var
1056 2008             (       parser.asm):00378                 bra @x
1058 308820           (       parser.asm):00379         @sk leax 32,x   ;skip word
105B 4C               (       parser.asm):00380                 inca 
105C 8105             (       parser.asm):00381                 cmpa #5         ;number of word slots
105E 26DD             (       parser.asm):00382                 bne @lp
1060 3532             (       parser.asm):00383         @x      puls y,x,a
1062 39               (       parser.asm):00384                 rts
                      (       parser.asm):00385         
                      (       parser.asm):00386         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00387         ;Sets all sentence data bytes to #ff
                      (       parser.asm):00388         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1063                  (       parser.asm):00389         clear_sentence
1063 3432             (       parser.asm):00390                 pshs a,x,y
1065 8E11C7           (       parser.asm):00391                 ldx #sentence
1068 86FF             (       parser.asm):00392                 lda #$ff
106A A780             (       parser.asm):00393                 sta ,x+
106C A780             (       parser.asm):00394                 sta ,x+
106E A780             (       parser.asm):00395                 sta ,x+
1070 A780             (       parser.asm):00396                 sta ,x+
1072 3532             (       parser.asm):00397                 puls y,x,a      
1074 39               (       parser.asm):00398                 rts
                      (       parser.asm):00399                 
                      (       parser.asm):00400         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00401         ;validate do
                      (       parser.asm):00402         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1075                  (       parser.asm):00403         validate_do     
1075 39               (       parser.asm):00404                 rts
                      (       parser.asm):00405         
                      (       parser.asm):00406         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00407         ;sets x to word#1 + a *32
                      (       parser.asm):00408         ;used to set the print position
                      (       parser.asm):00409         ;before called a printret error
                      (       parser.asm):00410         ;message
                      (       parser.asm):00411         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   
1076                  (       parser.asm):00412         set_word_addr
1076 8E416D           (       parser.asm):00413                 ldx #word1
1079 BD1159           (       parser.asm):00414                 jsr a_times_32
107C 3086             (       parser.asm):00415                 leax a,x 
107E 39               (       parser.asm):00416                 rts
                      (       parser.asm):00417                 
                      (       parser.asm):00418         ;assumes sentence has already been parsed
                      (       parser.asm):00419         ;and verb has been compressed
                      (       parser.asm):00420         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     
                      (       parser.asm):00421         ;if (prep found) {
                      (       parser.asm):00422         ;       find do and io
                      (       parser.asm):00423         ;} else {
                      (       parser.asm):00424         ;       if (wordcount > 1)
                      (       parser.asm):00425         ;               find # of do
                      (       parser.asm):00426         ;}
                      (       parser.asm):00427         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
107F                  (       parser.asm):00428         encode_sentence 
107F 3436             (       parser.asm):00429                 pshs d,x,y
1081 B6416D           (       parser.asm):00430                 lda word1
1084 8100             (       parser.asm):00431                 cmpa #0
1086 10270456         (       parser.asm):00432                 lbeq print_ret_pardon
108A BD1063           (       parser.asm):00433                 jsr clear_sentence
108D BD0FD3           (       parser.asm):00434                 jsr get_verbs_id                ;
1090 3702             (       parser.asm):00435                 pulu a                          ; clear return val
1092 81FF             (       parser.asm):00436                 cmpa #$ff
1094 102703A6         (       parser.asm):00437                 lbeq print_ret_bad_verb ;
1098 B711C7           (       parser.asm):00438                 sta sentence            ; store verb id
109B BD1032           (       parser.asm):00439                 jsr find_prep_index     ; is there a prep in this sentence?
109E 3702             (       parser.asm):00440                 pulu a                          ;pull and store result
10A0 8100             (       parser.asm):00441                 cmpa #0         ;was there a prep?
                      (       parser.asm):00442                 ;sta prep_index         
10A2 273C             (       parser.asm):00443                 beq @np
                      (       parser.asm):00444                 ;lda table_index        ;store prep id (was set by find_prep_index)
                      (       parser.asm):00445                 ;sta sentence+2         ;put prep# in sentence
                      (       parser.asm):00446                 ;lda prep_index         ;get prep index so we can 
10A4 4A               (       parser.asm):00447                 deca                            ;isolate nouns
10A5 3402             (       parser.asm):00448                 pshs a                          ;save word index
10A7 BD1149           (       parser.asm):00449                 jsr lookup_word
10AA 3502             (       parser.asm):00450                 puls a                          ;restore it
10AC 12               (       parser.asm):00451                 nop                                     ;need to load address of word
10AD 3704             (       parser.asm):00452                 pulu b                          ;get return from loopup word
10AF BD1076           (       parser.asm):00453                 jsr set_word_addr   ;print word at word#1 * 32
10B2 C1FF             (       parser.asm):00454                 cmpb #$ff                       ;was it found in dictionary?
10B4 1027036D         (       parser.asm):00455                 lbeq print_ret_bad_noun ;
                      (       parser.asm):00456                 ;tfr a,b                                ;lookup routine uses b as its param
10B8 BD1004           (       parser.asm):00457                 jsr get_obj_id          ;get the object it belongs to
10BB 3702             (       parser.asm):00458                 pulu a
10BD B711C8           (       parser.asm):00459                 sta sentence+1          ;store direct object
10C0 12               (       parser.asm):00460                 nop     ; now validate io
10C1 B6426E           (       parser.asm):00461                 lda word_count          ;io will be in wc-1
10C4 4A               (       parser.asm):00462                 deca
10C5 BD1149           (       parser.asm):00463                 jsr lookup_word
10C8 BD1076           (       parser.asm):00464                 jsr set_word_addr   ;set address of noun to print
10CB 3704             (       parser.asm):00465                 pulu b                          ;get return code from lookup
10CD 8E41CD           (       parser.asm):00466                 ldx #word4                      ;load verb to print if not matched
10D0 C1FF             (       parser.asm):00467                 cmpb #$ff                       ;was it found
10D2 1027034F         (       parser.asm):00468                 lbeq print_ret_bad_noun ;
                      (       parser.asm):00469                 ;tfr a,b                                ;lookup routine uses b as its param
                      (       parser.asm):00470                 ;pulu a                 ; what was this for??????? HIGHLY SUSPICIOUS
10D6 BD1004           (       parser.asm):00471                 jsr get_obj_id          ;get the object it belongs to
10D9 3702             (       parser.asm):00472                 pulu a
10DB B711CA           (       parser.asm):00473                 sta sentence+3          ;store io
10DE 2023             (       parser.asm):00474                 bra @dn
10E0 B6426E           (       parser.asm):00475         @np     lda word_count          ;sentence is either verb or verb + obj
10E3 8101             (       parser.asm):00476                 cmpa #1
10E5 271C             (       parser.asm):00477                 beq @dn         ;noe 
10E7 B6426E           (       parser.asm):00478                 lda word_count          ; get pos of of d.o.
10EA 4A               (       parser.asm):00479                 deca
10EB BD1149           (       parser.asm):00480                 jsr lookup_word
10EE 3702             (       parser.asm):00481                 pulu a  
10F0 8E418D           (       parser.asm):00482             ldx #word2
10F3 81FF             (       parser.asm):00483                 cmpa #$ff                       ;was it found?
10F5 1027032C         (       parser.asm):00484                 lbeq print_ret_bad_noun ;
10F9 1F89             (       parser.asm):00485                 tfr a,b                         ;lookup routine uses b as its param
10FB BD1004           (       parser.asm):00486                 jsr get_obj_id          ;get the object it belongs to
10FE 3702             (       parser.asm):00487                 pulu a
1100 B711C8           (       parser.asm):00488                 sta sentence+1          ;store id of d.o.
1103 12               (       parser.asm):00489         @dn     nop ; run check rules
1104 8E40AA           (       parser.asm):00490                 ldx #check_table
1107 A684             (       parser.asm):00491         @lp     lda ,x
1109 81FF             (       parser.asm):00492                 cmpa #255
110B 2715             (       parser.asm):00493                 beq @bf
110D B111C7           (       parser.asm):00494                 cmpa sentence  ; get verb
1110 260B             (       parser.asm):00495                 bne @c
1112 AD9801           (       parser.asm):00496                 jsr [1,x] ; jump to the subroutine
1115 3704             (       parser.asm):00497                 pulu b    ;check status
1117 C100             (       parser.asm):00498                 cmpb #0
1119 2602             (       parser.asm):00499                 bne @c
111B 2029             (       parser.asm):00500                 bra @x
111D 3003             (       parser.asm):00501         @c      leax 3,x        ;skip 3 bytes (the size of an entry)
111F 20E6             (       parser.asm):00502                 bra @lp
1121 12               (       parser.asm):00503                 nop ; run 'before' rules
1122 8E3710           (       parser.asm):00504         @bf     ldx #preactions_table
1125 BD13E5           (       parser.asm):00505                 jsr run_actions
1128 3702             (       parser.asm):00506                 pulu a
112A 12               (       parser.asm):00507                 nop ; check the return code?
112B 8E3717           (       parser.asm):00508                 ldx #actions_table
112E BD13E5           (       parser.asm):00509                 jsr run_actions
1131 3702             (       parser.asm):00510                 pulu a
1133 8101             (       parser.asm):00511                 cmpa #1 ; if handled skip default handling
1135 2703             (       parser.asm):00512                 beq @s
1137 BD11AA           (       parser.asm):00513                 jsr run_sentence ; run the sentence
113A 12               (       parser.asm):00514         @s      nop ; run 'after' rules
113B 8E3772           (       parser.asm):00515                 ldx #postactions_table
113E BD13E5           (       parser.asm):00516                 jsr run_actions ;
1141 3702             (       parser.asm):00517                 pulu a
1143 BD3773           (       parser.asm):00518                 jsr do_events
1146 3536             (       parser.asm):00519         @x      puls y,x,d
1148 39               (       parser.asm):00520                 rts     
                      (       parser.asm):00521         
                      (       parser.asm):00522         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00523         ;looks up the word at wc-1
                      (       parser.asm):00524         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1149                  (       parser.asm):00525         lookup_word 
1149 BD1159           (       parser.asm):00526                 jsr a_times_32          ;get word offset
114C 8E416D           (       parser.asm):00527                 ldx #word1
114F 3086             (       parser.asm):00528                 leax a,x
1151 108E1D77         (       parser.asm):00529                 ldy #dictionary         ;need to get i.o., too   
1155 BD0F55           (       parser.asm):00530                 jsr get_word_index      ;check dictionary and leave it on the user stack
1158 39               (       parser.asm):00531                 rts
                      (       parser.asm):00532                 
1159                  (       parser.asm):00533         a_times_32
1159 48               (       parser.asm):00534                 lsla                            ;x32 to get the offset of the word
115A 48               (       parser.asm):00535                 lsla                            ;x32 to get the offset of the word
115B 48               (       parser.asm):00536                 lsla                            ;x32 to get the offset of the word
115C 48               (       parser.asm):00537                 lsla                            ;x32 to get the offset of the word
115D 48               (       parser.asm):00538                 lsla                            ;x32 to get the offset of the word
115E 39               (       parser.asm):00539                 rts
                      (       parser.asm):00540         
                      (       parser.asm):00541         
                      (       parser.asm):00542         
                      (       parser.asm):00543         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00544         ;create_property_mask
                      (       parser.asm):00545         ;assumes prop# is on user stack
                      (       parser.asm):00546         ;value is returned on the user stack
                      (       parser.asm):00547         ;for properties # greater than 16, the msb is
                      (       parser.asm):00548         ; created.
                      (       parser.asm):00549         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
115F                  (       parser.asm):00550         create_property_mask
115F 3406             (       parser.asm):00551                 pshs a,b
1161 3702             (       parser.asm):00552                 pulu a  ; get prop #
1163 8109             (       parser.asm):00553                 cmpa #9 ; is mask >= 9
1165 2504             (       parser.asm):00554                 blo @lp
1167 8008             (       parser.asm):00555                 suba #8 ; -8 to make val <= 8
1169 C601             (       parser.asm):00556                 ldb #1  ; load mask with a '1' to shift left
116B 8101             (       parser.asm):00557         @lp     cmpa #1 ;done?
116D 2004             (       parser.asm):00558                 bra @x  ;done looping
116F 4A               (       parser.asm):00559                 deca    ;dec loop counter
1170 58               (       parser.asm):00560                 aslb            ;shift left
1171 20F8             (       parser.asm):00561                 bra @lp
1173 3604             (       parser.asm):00562         @x  pshu b      ; push return code
1175 3506             (       parser.asm):00563                 puls b,a
1177 39               (       parser.asm):00564                 rts
                      (       parser.asm):00565         
                      (       parser.asm):00566         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00567         ; returns the propert for the object on the 
                      (       parser.asm):00568         ; user stack. the value will be either 1 or 0
                      (       parser.asm):00569         ; 1-object id
                      (       parser.asm):00570         ; 2-property number
                      (       parser.asm):00571         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1178                  (       parser.asm):00572         get_object_property
1178 3436             (       parser.asm):00573                 pshs d,x,y
117A A641             (       parser.asm):00574                 lda 1,u ; id
117C E640             (       parser.asm):00575                 ldb 0,u ; property mask
117E 8E1EF4           (       parser.asm):00576                 ldx #obj_table
1181 8100             (       parser.asm):00577         @lp     cmpa #0                 ;loop to correct offset
1183 2706             (       parser.asm):00578                 beq @d
1185 308813           (       parser.asm):00579                 leax OBJ_ENTRY_SIZE,x
1188 4A               (       parser.asm):00580                 deca
1189 20F6             (       parser.asm):00581                 bra @lp
118B E48811           (       parser.asm):00582         @d      andb (OBJ_ENTRY_SIZE-2),x               ;skip over to property bytes
118E C109             (       parser.asm):00583                 cmpb #9 ; props >=9 are stored 
1190 2504             (       parser.asm):00584                 blo @lo
1192 E484             (       parser.asm):00585                 andb ,x                 ;load the byte
1194 2003             (       parser.asm):00586                 bra @x
1196 12               (       parser.asm):00587         @lo     nop     ; AND higher byte
1197 3001             (       parser.asm):00588                 leax 1,x                ;shift to       
1199 E484             (       parser.asm):00589         @x      andb ,x                 ;load the byte
119B 3702             (       parser.asm):00590                 pulu a                  ;clear 
119D 3702             (       parser.asm):00591                 pulu a                  ;clear 
119F C100             (       parser.asm):00592                 cmpb #0 
11A1 2702             (       parser.asm):00593                 beq @z
11A3 C601             (       parser.asm):00594                 ldb  #1
11A5 3604             (       parser.asm):00595         @z      pshu b                  ;put return val on stack
11A7 3536             (       parser.asm):00596                 puls y,x,d
11A9 39               (       parser.asm):00597                 rts
                      (       parser.asm):00598                 
                      (       parser.asm):00599         
                      (       parser.asm):00600         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00601         ;jumps to the subroutine for the verb the
                      (       parser.asm):00602         ;player typed in.
                      (       parser.asm):00603         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   
11AA                  (       parser.asm):00604         run_sentence
11AA 12               (       parser.asm):00605                 nop     ;       try the custom actions
11AB 12               (       parser.asm):00606                 nop     ;       try the default actions
11AC 8E31B4           (       parser.asm):00607                 ldx #sentence_table
11AF A684             (       parser.asm):00608         @lp     lda ,x
11B1 81FF             (       parser.asm):00609                 cmpa #$ff       ;hit end of table
11B3 270E             (       parser.asm):00610                 beq @x
11B5 B111C7           (       parser.asm):00611                 cmpa sentence
11B8 2605             (       parser.asm):00612                 bne @sk
11BA AD9801           (       parser.asm):00613                 jsr [1,x]
11BD 2004             (       parser.asm):00614                 bra @x
11BF 3003             (       parser.asm):00615         @sk     leax 3,x        ; skip to next handler
11C1 26EC             (       parser.asm):00616                 bne @lp
11C3 39               (       parser.asm):00617         @x      rts
                      (       parser.asm):00618         
                      (       parser.asm):00619                 
                      (       parser.asm):00620         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
11C4 00               (       parser.asm):00621         prep_index .db 0        
11C5 00               (       parser.asm):00622         prep_id .db 0
11C6 00               (       parser.asm):00623         sentence_type .db 0     
11C7 FFFFFFFF         (       parser.asm):00624         sentence .db 255,255,255,255
                      (         main.asm):00042                 include random.asm
                      (       random.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       random.asm):00002         ;NEXT_RAND
                      (       random.asm):00003         ;THIS SUBROUTINE USES A LINEAR SHIFT
                      (       random.asm):00004         ;TO IMPLEMENT RANDOM NUMBER GENERATION
                      (       random.asm):00005         ;THE TAPS ARE BITS 0 AND 3
                      (       random.asm):00006         ;
                      (       random.asm):00007         ;THE SEED (CUR_RAND) SHOULD BE LOADED BEFORE 
                      (       random.asm):00008         ;THIS ROUTINE IS CALLED.  JUST DON'T LOAD
                      (       random.asm):00009         ;IT WITH ALL ZEROS TO START 0
                      (       random.asm):00010         ;
                      (       random.asm):00011         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       random.asm):00012         
                      (       random.asm):00013         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       random.asm):00014         ;user stack contains divisor (16 bit)
                      (       random.asm):00015         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       
11CB                  (       random.asm):00016         randmod
11CB 3436             (       random.asm):00017                 pshs d,x,y
11CD BD11D6           (       random.asm):00018                 jsr rand        ; puts number on stack  
11D0 BD1D1E           (       random.asm):00019                 jsr mod2b   ; leaves number on stack
11D3 3536             (       random.asm):00020                 puls y,x,d
11D5 39               (       random.asm):00021                 rts
                      (       random.asm):00022         
                      (       random.asm):00023         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       random.asm):00024         ;LSR RANDOM NUMBER GENERATOR
                      (       random.asm):00025         ;ALL REGISTERS ARE PRESERVED
                      (       random.asm):00026         ;number is returned on the user stack
                      (       random.asm):00027         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11D6                  (       random.asm):00028         rand
11D6 3416             (       random.asm):00029                 PSHS D,x
11D8 F6123C           (       random.asm):00030                 LDB CUR_RAND+1 ; GET RIGHT BYTE
11DB F41240           (       random.asm):00031                 ANDB LEFT_TAP_MASK ; MASK RAND TO GET LEFT TAP  
11DE F71242           (       random.asm):00032                 STB LEFT_TAP                    ;SAVE IT
11E1 F6123C           (       random.asm):00033                 LDB CUR_RAND+1          ;RELOAD
11E4 F41241           (       random.asm):00034                 ANDB RIGHT_TAP_MASK     ; MASK RAND TO GET RIGHT TAP
                      (       random.asm):00035                 ;RIGHT TAP IS THE LSB (SO WE DON'T NEED TO SHIFT)
11E7 F71243           (       random.asm):00036                 STB RIGHT_TAP
11EA 781243           (       random.asm):00037                 LSL RIGHT_TAP   ;LEFT JUSTIFY THE RIGHT TAP 
11ED 781243           (       random.asm):00038                 LSL RIGHT_TAP   ;SO THE TWO TAPS CAN BE 
11F0 781243           (       random.asm):00039                 LSL RIGHT_TAP   ;XOR'D AND EASILY
11F3 781243           (       random.asm):00040                 LSL RIGHT_TAP   ;MASKED BACK ONTO THE LEFT
11F6 781243           (       random.asm):00041                 LSL RIGHT_TAP   ;BYTE OF THE RANDOM NUMBER
11F9 781243           (       random.asm):00042                 LSL RIGHT_TAP
11FC 781243           (       random.asm):00043                 LSL RIGHT_TAP
                      (       random.asm):00044                 ;NOW WE HAVE BOTH TAPS, XOR THEM
11FF B61242           (       random.asm):00045                 LDA LEFT_TAP
1202 B81243           (       random.asm):00046                 EORA RIGHT_TAP  
1205 B71244           (       random.asm):00047                 STA XOR_RSLT
                      (       random.asm):00048                 ;NOW SHIFT
1208 FC123B           (       random.asm):00049                 LDD CUR_RAND    ;LOAD LEFT BYTE
120B 44               (       random.asm):00050                 LSRA ; PUTS BIT 0 INTO CARRY BIT 
120C B7123B           (       random.asm):00051                 STA CUR_RAND ; STORE NEW MSB
120F 2409             (       random.asm):00052                 BCC @nc
1211 F6123C           (       random.asm):00053                 LDB     CUR_RAND+1      ;THERE WAS A CARRY
1214 54               (       random.asm):00054                 LSRB
1215 FA123F           (       random.asm):00055                 ORB ONE_IN_MSB ;  MASK A 1 ONTO THE LEFT MOST BIT
1218 2004             (       random.asm):00056                 BRA @ds  ;  DONE SHIFTING
121A                  (       random.asm):00057         @nc     
121A F6123C           (       random.asm):00058                 LDB     CUR_RAND+1 ; JUST SHIFT, NO 1 ON LEFT
121D 54               (       random.asm):00059                 LSRB
121E F7123C           (       random.asm):00060         @ds STB CUR_RAND+1      ; STORE RIGHT HALF OF NEW RAND
                      (       random.asm):00061                 ;NOW MASK THE XOR_RSLT ONTO THE MSB
1221 B6123B           (       random.asm):00062                 LDA CUR_RAND
1224 BA1244           (       random.asm):00063                 ORA XOR_RSLT    ; MASK A '1' ONTO THE MSB
1227 B7123B           (       random.asm):00064                 STA CUR_RAND
                      (       random.asm):00065                 ;SUBTRACT 1 SINCE THE WORKING RAND CAN'T CONTAIN 0
122A FC123B           (       random.asm):00066                 LDD CUR_RAND    ; RELOAD 2 BYTE VALUE
122D 830001           (       random.asm):00067                 SUBD #1         ; DEC
1230 FD123D           (       random.asm):00068                 STD RAND                        
1233 BE123B           (       random.asm):00069                 ldx CUR_RAND 
1236 3610             (       random.asm):00070                 pshu x
1238 3516             (       random.asm):00071                 PULS x,D
123A 39               (       random.asm):00072                 RTS     
                      (       random.asm):00073         
                      (       random.asm):00074         ;DATA FOR RANDOM NUMBER GENERATION
123B 0F0F             (       random.asm):00075         CUR_RAND                        .DW 0x0F0F
123D 0000             (       random.asm):00076         RAND                            .DW 0x0000
123F 80               (       random.asm):00077         ONE_IN_MSB              .DB 0x80
1240 80               (       random.asm):00078         LEFT_TAP_MASK   .DB 0x80 ; 1000 0000
1241 01               (       random.asm):00079         RIGHT_TAP_MASK  .DB 0x01 ; 0000 0001
1242 00               (       random.asm):00080         LEFT_TAP                .DB 0x00
1243 00               (       random.asm):00081         RIGHT_TAP               .DB 0x00
1244 00               (       random.asm):00082         XOR_RSLT                        .BYTE 0x00
1245                  (       random.asm):00083         OUTPUT
1245 0000             (       random.asm):00084                 .DW 0X0000
1247 0000             (       random.asm):00085                 .DW 0X0000
1249 0000             (       random.asm):00086                 .DW 0X0000
                      (         main.asm):00043                 include routines.asm
                      (     routines.asm):00001         
                      (     routines.asm):00002         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00003         ;look_at_sub
                      (     routines.asm):00004         ;prints the description and any nested contents
                      (     routines.asm):00005         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
124B                  (     routines.asm):00006         look_at_sub
124B 3436             (     routines.asm):00007                 pshs d,x,y
124D 12               (     routines.asm):00008                 nop ; check for light
124E B611C8           (     routines.asm):00009         @s      lda sentence+1
1251 C613             (     routines.asm):00010                 ldb #OBJ_ENTRY_SIZE
1253 3D               (     routines.asm):00011                 mul
1254 1F01             (     routines.asm):00012                 tfr d,x
1256 30891EF4         (     routines.asm):00013                 leax obj_table,x
125A 3610             (     routines.asm):00014                 pshu x
125C A603             (     routines.asm):00015                 lda DESC_ID,x
125E 3602             (     routines.asm):00016                 pshu a
1260 8E21B6           (     routines.asm):00017                 ldx #description_table
1263 BD19FF           (     routines.asm):00018                 jsr print_table_entry
1266 1F21             (     routines.asm):00019                 tfr y,x
1268 B611C8           (     routines.asm):00020                 lda sentence+1
126B 3602             (     routines.asm):00021                 pshu a
126D BD183A           (     routines.asm):00022                 jsr count_visible_items
1270 3702             (     routines.asm):00023                 pulu a
1272 3710             (     routines.asm):00024                 pulu x
1274 8100             (     routines.asm):00025                 cmpa #0
1276 2703             (     routines.asm):00026                 beq @x
1278 BD1A20           (     routines.asm):00027                 jsr print_nested_contents
127B BDB958           (     routines.asm):00028         @x      jsr PRINTCR
127E 3536             (     routines.asm):00029                 puls y,x,d
1280 39               (     routines.asm):00030                 rts
                      (     routines.asm):00031                 
                      (     routines.asm):00032         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00033         ;       called by jump table
                      (     routines.asm):00034         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1281                  (     routines.asm):00035         move_player
1281 3432             (     routines.asm):00036                 pshs a,x,y
1283 BD12ED           (     routines.asm):00037                 jsr get_move_direction ; convert verb to get move direction
1286 3704             (     routines.asm):00038                 pulu b
1288 12               (     routines.asm):00039                 nop     ; now get player's current room
1289 BD1BAC           (     routines.asm):00040                 jsr get_player_room ;get player's current room
128C 3702             (     routines.asm):00041                 pulu a          ; get player's current room
128E 12               (     routines.asm):00042                 nop ; now get that room's direction attribute
128F 3602             (     routines.asm):00043                 pshu a          ; put object id back on stack (yes, this is redundant)
1291 3604             (     routines.asm):00044                 pshu b          ; put the direction on the stack        
1293 BD138A           (     routines.asm):00045                 jsr get_object_attribute 
1296 3702             (     routines.asm):00046                 pulu a          ; get new room
1298 B713C2           (     routines.asm):00047                 sta new_room
129B 817F             (     routines.asm):00048                 cmpa #127       ; is it a room or a nogo message?
129D 223D             (     routines.asm):00049                 bhi @ng
129F 12               (     routines.asm):00050                 nop ; is it a door?
12A0 C613             (     routines.asm):00051                 ldb #OBJ_ENTRY_SIZE
12A2 3D               (     routines.asm):00052                 mul
12A3 1F01             (     routines.asm):00053                 tfr d,x
12A5 30891EF4         (     routines.asm):00054                 leax obj_table,x
12A9 E68812           (     routines.asm):00055                 ldb PROPERTY_BYTE_2,x
12AC C440             (     routines.asm):00056                 andb #DOOR_MASK
12AE C140             (     routines.asm):00057                 cmpb #DOOR_MASK
12B0 2619             (     routines.asm):00058                 bne @g          ;not a door-jump
12B2 E68811           (     routines.asm):00059                 ldb PROPERTY_BYTE_1,x
12B5 C420             (     routines.asm):00060                 andb #OPEN_MASK
12B7 C120             (     routines.asm):00061                 cmpb #OPEN_MASK
12B9 2706             (     routines.asm):00062                 beq @d          ;open - go through door
12BB BD1538           (     routines.asm):00063                 jsr print_object_closed
12BE 202A             (     routines.asm):00064                 bra @x  ;
12C0 12               (     routines.asm):00065                 nop             ; door is open, get room it leads to
12C1 BD12ED           (     routines.asm):00066         @d      jsr get_move_direction ; convert verb to get move direction
12C4 3704             (     routines.asm):00067                 pulu b
12C6 E685             (     routines.asm):00068                 ldb b,x
12C8 F713C2           (     routines.asm):00069                 stb new_room
12CB C601             (     routines.asm):00070         @g      ldb #PLAYER
12CD 3604             (     routines.asm):00071                 pshu b          ;push player id 
12CF B613C2           (     routines.asm):00072                 lda new_room
12D2 3602             (     routines.asm):00073                 pshu a          ;push new room  
12D4 BD130E           (     routines.asm):00074                 jsr move_object
12D7 BD1746           (     routines.asm):00075                 jsr look_sub    
12DA 200E             (     routines.asm):00076                 bra @x
12DC 12               (     routines.asm):00077         @ng nop         ;convert a to a positive #
12DD 43               (     routines.asm):00078                 coma    ;take two's complement of a
12DE 4C               (     routines.asm):00079                 inca
12DF 3602             (     routines.asm):00080                 pshu a
12E1 8E3193           (     routines.asm):00081                 ldx #nogo_table 
12E4 BD19FF           (     routines.asm):00082                 jsr print_table_entry
12E7 BDB958           (     routines.asm):00083                 jsr PRINTCR
12EA 3532             (     routines.asm):00084         @x      puls y,x,a
12EC 39               (     routines.asm):00085                 rts
                      (     routines.asm):00086         
                      (     routines.asm):00087         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00088         ;converts the verb in $sentence to the attribute
                      (     routines.asm):00089         ;number for that direction.
                      (     routines.asm):00090         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12ED                  (     routines.asm):00091         get_move_direction
12ED 3436             (     routines.asm):00092                 pshs d,x,y
12EF 86FF             (     routines.asm):00093                 lda #$ff
12F1 3602             (     routines.asm):00094                 pshu a                  ;push return value
12F3 8E135E           (     routines.asm):00095                 ldx #direction_map
12F6 A684             (     routines.asm):00096         @lp lda ,x
12F8 81FF             (     routines.asm):00097                 cmpa #$ff
12FA 270F             (     routines.asm):00098                 beq @x
12FC B111C7           (     routines.asm):00099                 cmpa sentence   
12FF 2606             (     routines.asm):00100                 bne @s
1301 A601             (     routines.asm):00101                 lda 1,x ; skip id byte to get value
1303 A7C4             (     routines.asm):00102                 sta ,u  ;store return value
1305 2004             (     routines.asm):00103                 bra @x
1307 3002             (     routines.asm):00104         @s      leax 2,x        ;go to next table entry
1309 20EB             (     routines.asm):00105                 bra @lp
130B 3536             (     routines.asm):00106         @x      puls y,x,d
130D 39               (     routines.asm):00107                 rts
                      (     routines.asm):00108                 
                      (     routines.asm):00109         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00110         ;move_object
                      (     routines.asm):00111         ;param 1 (top of u) is the object/room to move it to 
                      (     routines.asm):00112         ;param 2 is the object to move
                      (     routines.asm):00113         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
130E                  (     routines.asm):00114         move_object
130E 3436             (     routines.asm):00115                 pshs d,x,y
1310 3704             (     routines.asm):00116                 pulu b  ;new room
1312 3702             (     routines.asm):00117                 pulu a  ;get object id
1314 3602             (     routines.asm):00118                 pshu a  ;put object on stack (yes this is silly)
1316 8601             (     routines.asm):00119                 lda #HOLDER_ID
1318 3602             (     routines.asm):00120                 pshu a  ;put attr # on stack
131A 3604             (     routines.asm):00121                 pshu b  ;put new val on stack
131C BD13A8           (     routines.asm):00122                 jsr set_object_attribute        ;
131F 3536             (     routines.asm):00123                 puls y,x,d
1321 39               (     routines.asm):00124                 rts
                      (     routines.asm):00125         
1322                  (     routines.asm):00126         get_sub
1322 3436             (     routines.asm):00127                 pshs d,x,y
1324 12               (     routines.asm):00128                 nop     ; can the player see it
1325 12               (     routines.asm):00129                 nop     ; is the object portable
1326 B611C8           (     routines.asm):00130                 lda sentence+1
1329 C613             (     routines.asm):00131                 ldb #OBJ_ENTRY_SIZE
132B 3D               (     routines.asm):00132                 mul
132C 1F01             (     routines.asm):00133                 tfr d,x
132E 30891EF4         (     routines.asm):00134                 leax obj_table,x 
1332 A68812           (     routines.asm):00135                 lda PROPERTY_BYTE_2,x
1335 8401             (     routines.asm):00136                 anda #PORTABLE_MASK
1337 8101             (     routines.asm):00137                 cmpa #PORTABLE_MASK
1339 10260119         (     routines.asm):00138                 lbne print_ret_not_portable
133D 12               (     routines.asm):00139                 nop ; check that the player can see it
133E B611C8           (     routines.asm):00140                 lda sentence+1
1341 3602             (     routines.asm):00141                 pshu a
1343 8601             (     routines.asm):00142                 lda #PLAYER
1345 3602             (     routines.asm):00143                 pshu a
1347 BD130E           (     routines.asm):00144                 jsr move_object
134A 8E13C3           (     routines.asm):00145                 ldx #taken
134D BD1914           (     routines.asm):00146                 jsr PRINT
1350 BDB958           (     routines.asm):00147                 jsr PRINTCR
1353 B611C8           (     routines.asm):00148                 lda sentence+1
1356 3602             (     routines.asm):00149                 pshu a
1358 BD1375           (     routines.asm):00150                 jsr unset_initial_description
135B 3536             (     routines.asm):00151         @x      puls y,x,d
135D 39               (     routines.asm):00152                 rts
                      (     routines.asm):00153         
                      (     routines.asm):00154                 
                      (     routines.asm):00155         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00156         ;maps verb ids to direction codes
                      (     routines.asm):00157         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
135E                  (     routines.asm):00158         direction_map
135E 0004             (     routines.asm):00159                 .db n_verb_id,NORTH
1360 0105             (     routines.asm):00160                 .db s_verb_id,SOUTH
1362 0206             (     routines.asm):00161                 .db e_verb_id,EAST
1364 0307             (     routines.asm):00162                 .db w_verb_id,WEST
1366 0408             (     routines.asm):00163                 .db ne_verb_id,NORTHEAST
1368 0509             (     routines.asm):00164                 .db se_verb_id,SOUTHEAST
136A 060A             (     routines.asm):00165                 .db sw_verb_id,SOUTHWEST
136C 070B             (     routines.asm):00166                 .db nw_verb_id,NORTHWEST
136E 080C             (     routines.asm):00167                 .db up_verb_id,UP
1370 090D             (     routines.asm):00168                 .db down_verb_id,DOWN
1372 0B0F             (     routines.asm):00169                 .db out_verb_id,OUT
1374 FF               (     routines.asm):00170                 .db 255 
                      (     routines.asm):00171                 
                      (     routines.asm):00172         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00173         ;if the player is a parent of the object,
                      (     routines.asm):00174         ;set its initial desc to 255 (none)
                      (     routines.asm):00175         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1375                  (     routines.asm):00176         unset_initial_description
1375 3436             (     routines.asm):00177                 pshs d,x,y
1377 3702             (     routines.asm):00178                 pulu a 
1379 8E1EF4           (     routines.asm):00179                 ldx #obj_table
137C C613             (     routines.asm):00180                 ldb #OBJ_ENTRY_SIZE
137E 3D               (     routines.asm):00181                 mul
137F 308B             (     routines.asm):00182                 leax d,x
1381 3002             (     routines.asm):00183                 leax INITIAL_DESC_ID,x
1383 86FF             (     routines.asm):00184                 lda #255
1385 A784             (     routines.asm):00185                 sta ,x
1387 3536             (     routines.asm):00186                 puls y,x,d
1389 39               (     routines.asm):00187                 rts
                      (     routines.asm):00188         
                      (     routines.asm):00189         
                      (     routines.asm):00190         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00191         ;get_object_attribute
                      (     routines.asm):00192         ;params are on user stack
                      (     routines.asm):00193         ;top  param is attr to get 
                      (     routines.asm):00194         ;next param is obj id
                      (     routines.asm):00195         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
138A                  (     routines.asm):00196         get_object_attribute
138A 3436             (     routines.asm):00197                 pshs d,x,y
138C A641             (     routines.asm):00198                 lda 1,u ; id
138E C613             (     routines.asm):00199                 ldb #OBJ_ENTRY_SIZE
1390 3D               (     routines.asm):00200                 mul
1391 1F01             (     routines.asm):00201                 tfr d,x
1393 30891EF4         (     routines.asm):00202                 leax obj_table,x
1397 8600             (     routines.asm):00203                 lda #0                  
1399 E640             (     routines.asm):00204                 ldb 0,u ; prop id
139B 1F02             (     routines.asm):00205                 tfr d,y 
139D 3085             (     routines.asm):00206                 leax b,x                        ;add attr offset to x
139F A684             (     routines.asm):00207                 lda ,x                  ;get the value
13A1 3704             (     routines.asm):00208                 pulu b                  ; delete param (leave 2nd on stack for return val)
13A3 A7C4             (     routines.asm):00209                 sta ,u
13A5 3536             (     routines.asm):00210                 puls y,x,d
13A7 39               (     routines.asm):00211                 rts     
                      (     routines.asm):00212         
                      (     routines.asm):00213         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00214         ;set_object_attribute
                      (     routines.asm):00215         ;params are on user stack
                      (     routines.asm):00216         ;top param is new value
                      (     routines.asm):00217         ;next param is attr to set 
                      (     routines.asm):00218         ;next is object
                      (     routines.asm):00219         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13A8                  (     routines.asm):00220         set_object_attribute
13A8 3436             (     routines.asm):00221                 pshs d,x,y
13AA A642             (     routines.asm):00222                 lda 2,u ;id     
13AC C613             (     routines.asm):00223                 ldb #OBJ_ENTRY_SIZE
13AE 3D               (     routines.asm):00224                 mul
13AF 1F01             (     routines.asm):00225                 tfr d,x
13B1 30891EF4         (     routines.asm):00226                 leax obj_table,x
13B5 E641             (     routines.asm):00227                 ldb 1,u ; get attr #
13B7 3085             (     routines.asm):00228                 leax b,x ; get offset
13B9 E6C4             (     routines.asm):00229                 ldb ,u
13BB E784             (     routines.asm):00230                 stb ,x  ; write new value
13BD 3343             (     routines.asm):00231                 leau 3,u ; pop all 3 params
13BF 3536             (     routines.asm):00232                 puls y,x,d
                      (     routines.asm):00233                 
13C1 39               (     routines.asm):00234                 rts
                      (     routines.asm):00235                 
13C2 FF               (     routines.asm):00236         new_room .db  255
                      (     routines.asm):00237                 
13C3 54414B454E2E00   (     routines.asm):00238         taken .strz "TAKEN."
13CA 495420434F4E5441 (     routines.asm):00239         itcontains .strz "IT CONTAINS..."
     494E532E2E2E00
13D9 4F4E204954204953 (     routines.asm):00240         onitis .strz "ON IT IS..."
     2E2E2E00
                      (         main.asm):00044                 include preactions.asm
                      (   preactions.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (   preactions.asm):00002         ; run_actions.asm
                      (   preactions.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (   preactions.asm):00004         
                      (   preactions.asm):00005         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (   preactions.asm):00006         ; x contains address of table
                      (   preactions.asm):00007         ; with actions.
                      (   preactions.asm):00008         ;
                      (   preactions.asm):00009         ; registers are clobbered
                      (   preactions.asm):00010         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13E5                  (   preactions.asm):00011         run_actions
13E5 3436             (   preactions.asm):00012                 pshs d,x,y
13E7 8600             (   preactions.asm):00013                 lda #0  ; push a 0 onto the stack
13E9 3602             (   preactions.asm):00014                 pshu a  
13EB A684             (   preactions.asm):00015         @lp     lda ,x
13ED 81FF             (   preactions.asm):00016                 cmpa #$ff  ; hit end?
13EF 2725             (   preactions.asm):00017                 beq @x
13F1 C600             (   preactions.asm):00018                 ldb #0
13F3 A685             (   preactions.asm):00019         @l2     lda b,x  ;get a byte from table
13F5 81FE             (   preactions.asm):00020                 cmpa #ANY_OBJECT ; skip "*"
13F7 270A             (   preactions.asm):00021                 beq @sk 
13F9 108E11C7         (   preactions.asm):00022                 ldy #sentence
13FD 31A5             (   preactions.asm):00023                 leay b,y
13FF A120             (   preactions.asm):00024                 cmpa 0,y ;compare it to sentence
1401 260F             (   preactions.asm):00025                 bne @c   ;if no match, continue
1403 5C               (   preactions.asm):00026         @sk     incb
1404 C104             (   preactions.asm):00027                 cmpb #4  ;done?
1406 26EB             (   preactions.asm):00028                 bne @l2  ;loop
1408 12               (   preactions.asm):00029                 nop ; if got here sentence matches
1409 AD9804           (   preactions.asm):00030                 jsr [4,x]
140C 8601             (   preactions.asm):00031                 lda #1          ;put a 1 on return stack
140E A7C4             (   preactions.asm):00032                 sta ,u
1410 2004             (   preactions.asm):00033                 bra @x
1412 3006             (   preactions.asm):00034         @c  leax 6,x    ; entries are 6 bytes
1414 20D5             (   preactions.asm):00035                 bra @lp
1416 3536             (   preactions.asm):00036         @x      puls y,x,d
1418 39               (   preactions.asm):00037                 rts
                      (         main.asm):00045                 include printrets.asm
                      (    printrets.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    printrets.asm):00002         ;print-returns
                      (    printrets.asm):00003         ;these are NOT subroutines.  calling subroutines should
                      (    printrets.asm):00004         ;long branch to these addresses.
                      (    printrets.asm):00005         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1419                  (    printrets.asm):00006         print_ret_no_have
1419 8E15EF           (    printrets.asm):00007                 ldx #nohave
141C BD1914           (    printrets.asm):00008                 jsr PRINT                ;close the sentence
141F BDB958           (    printrets.asm):00009                 jsr PRINTCR             ;newline
1422 3536             (    printrets.asm):00010                 puls y,x,d
1424 39               (    printrets.asm):00011                 rts
                      (    printrets.asm):00012         
                      (    printrets.asm):00013         
1425                  (    printrets.asm):00014         print_ret_bad_noun
1425 3410             (    printrets.asm):00015                 pshs x
1427 8E15BF           (    printrets.asm):00016                 ldx #bad_noun
142A BD1914           (    printrets.asm):00017                 jsr PRINT               ;print 1st part
142D 3510             (    printrets.asm):00018                 puls x                  ;load word
142F BD1914           (    printrets.asm):00019                 jsr PRINT               ;print the word
1432 8E15D8           (    printrets.asm):00020                 ldx #close_quote
1435 BD1914           (    printrets.asm):00021                 jsr PRINT                ;close the sentence
1438 BDB958           (    printrets.asm):00022                 jsr PRINTCR             ;newline
143B 3536             (    printrets.asm):00023                 puls y,x,d
143D 39               (    printrets.asm):00024                 rts
                      (    printrets.asm):00025         
143E                  (    printrets.asm):00026         print_ret_bad_verb
143E 8E1573           (    printrets.asm):00027                 ldx #badverb
1441 BD1914           (    printrets.asm):00028                 jsr PRINT
1444 8E416D           (    printrets.asm):00029                 ldx #word1
1447 BD1914           (    printrets.asm):00030                 jsr PRINT
144A 8E15D8           (    printrets.asm):00031                 ldx #close_quote
144D BD1914           (    printrets.asm):00032                 jsr PRINT
1450 BDB958           (    printrets.asm):00033                 jsr PRINTCR
1453 3536             (    printrets.asm):00034                 puls y,x,d
1455 39               (    printrets.asm):00035                 rts
                      (    printrets.asm):00036                 
1456                  (    printrets.asm):00037         print_ret_not_portable
1456 8E1627           (    printrets.asm):00038                 ldx #notportable
1459 BD1914           (    printrets.asm):00039                 jsr PRINT
145C BDB958           (    printrets.asm):00040                 jsr PRINTCR
145F 3536             (    printrets.asm):00041                 puls y,x,d
1461 39               (    printrets.asm):00042                 rts
                      (    printrets.asm):00043                 
                      (    printrets.asm):00044          
1462                  (    printrets.asm):00045         print_ret_already_open
1462 8E16F7           (    printrets.asm):00046                 ldx #alreadyopen
1465 BD1914           (    printrets.asm):00047                 jsr PRINT
1468 BDB958           (    printrets.asm):00048                 jsr PRINTCR
146B 3536             (    printrets.asm):00049                 puls y,x,d
146D 39               (    printrets.asm):00050                 rts     
                      (    printrets.asm):00051         
146E                  (    printrets.asm):00052         print_ret_not_closeable
146E 8E16B5           (    printrets.asm):00053                 ldx #notcloseable
1471 BD1914           (    printrets.asm):00054                 jsr PRINT
1474 BDB958           (    printrets.asm):00055                 jsr PRINTCR
1477 3536             (    printrets.asm):00056                 puls y,x,d
1479 39               (    printrets.asm):00057                 rts     
                      (    printrets.asm):00058                 
147A                  (    printrets.asm):00059         print_ret_already_closed
147A 8E16E2           (    printrets.asm):00060                 ldx #alreadyclosed
147D BD1914           (    printrets.asm):00061                 jsr PRINT
1480 BDB958           (    printrets.asm):00062                 jsr PRINTCR
1483 3536             (    printrets.asm):00063                 puls y,x,d
1485 39               (    printrets.asm):00064                 rts     
                      (    printrets.asm):00065         
1486                  (    printrets.asm):00066         print_ret_not_supporter
1486 8E165A           (    printrets.asm):00067                 ldx #notsupporter
1489 BD1914           (    printrets.asm):00068                 jsr PRINT
148C BDB958           (    printrets.asm):00069                 jsr PRINTCR
148F 3536             (    printrets.asm):00070                 puls y,x,d
1491 39               (    printrets.asm):00071                 rts     
                      (    printrets.asm):00072                 
1492                  (    printrets.asm):00073         print_ret_not_container
1492 8E163C           (    printrets.asm):00074                 ldx #notcontainer
1495 BD1914           (    printrets.asm):00075                 jsr PRINT
1498 BDB958           (    printrets.asm):00076                 jsr PRINTCR
149B 3536             (    printrets.asm):00077                 puls y,x,d
149D 39               (    printrets.asm):00078                 rts     
                      (    printrets.asm):00079         
                      (    printrets.asm):00080         
149E                  (    printrets.asm):00081         print_ret_dont_understand
149E 8E1678           (    printrets.asm):00082                 ldx #dontunderstand
14A1 BD1914           (    printrets.asm):00083                 jsr PRINT
14A4 BDB958           (    printrets.asm):00084                 jsr PRINTCR
14A7 3536             (    printrets.asm):00085                 puls y,x,d
14A9 39               (    printrets.asm):00086                 rts     
                      (    printrets.asm):00087         
14AA                  (    printrets.asm):00088         print_ret_bad_put_command
14AA 8E1678           (    printrets.asm):00089                 ldx #dontunderstand
14AD BD1914           (    printrets.asm):00090                 jsr PRINT
14B0 BDB958           (    printrets.asm):00091                 jsr PRINTCR
14B3 8E168C           (    printrets.asm):00092                 ldx #badputcommand
14B6 BD1914           (    printrets.asm):00093                 jsr PRINT
14B9 BDB958           (    printrets.asm):00094                 jsr PRINTCR
14BC 3536             (    printrets.asm):00095                 puls y,x,d
14BE 39               (    printrets.asm):00096                 rts     
                      (    printrets.asm):00097         
14BF                  (    printrets.asm):00098         print_ret_bad_open
14BF 8E1678           (    printrets.asm):00099                 ldx #dontunderstand
14C2 BD1914           (    printrets.asm):00100                 jsr PRINT
14C5 BDB958           (    printrets.asm):00101                 jsr PRINTCR
14C8 8E15A6           (    printrets.asm):00102                 ldx #badopen
14CB BD1914           (    printrets.asm):00103                 jsr PRINT
14CE BDB958           (    printrets.asm):00104                 jsr PRINTCR
14D1 3536             (    printrets.asm):00105                 puls y,x,d
14D3 39               (    printrets.asm):00106                 rts
                      (    printrets.asm):00107         
14D4                  (    printrets.asm):00108         print_ret_not_openable
14D4 8E16CC           (    printrets.asm):00109                 ldx #notopenable
14D7 BD1914           (    printrets.asm):00110                 jsr PRINT
14DA BDB958           (    printrets.asm):00111                 jsr PRINTCR
14DD 3536             (    printrets.asm):00112                 puls y,x,d
14DF 39               (    printrets.asm):00113                 rts
                      (    printrets.asm):00114         
14E0                  (    printrets.asm):00115         print_ret_pardon
14E0 8E173E           (    printrets.asm):00116                 ldx #pardon
14E3 BD1914           (    printrets.asm):00117                 jsr PRINT
14E6 BDB958           (    printrets.asm):00118                 jsr PRINTCR
14E9 3536             (    printrets.asm):00119                 puls y,x,d
14EB 39               (    printrets.asm):00120                 rts
                      (    printrets.asm):00121         
                      (    printrets.asm):00122                 
14EC                  (    printrets.asm):00123         print_ret_io_closed
14EC 8E171B           (    printrets.asm):00124                 ldx #the
14EF BD1914           (    printrets.asm):00125                 jsr PRINT
14F2 B611CA           (    printrets.asm):00126                 lda sentence+3
14F5 3602             (    printrets.asm):00127                 pshu a
14F7 BD191E           (    printrets.asm):00128                 jsr print_obj_name
14FA 8E1720           (    printrets.asm):00129                 ldx #isclosed
14FD BD1914           (    printrets.asm):00130                 jsr PRINT
1500 BDB958           (    printrets.asm):00131                 jsr PRINTCR
1503 3536             (    printrets.asm):00132                 puls y,x,d
1505 39               (    printrets.asm):00133                 rts
                      (    printrets.asm):00134         
                      (    printrets.asm):00135                 
                      (    printrets.asm):00136                 
1506                  (    printrets.asm):00137         print_ret_bad_examine
1506 8E158C           (    printrets.asm):00138                 ldx #badexamine
1509 BD1914           (    printrets.asm):00139                 jsr PRINT
150C BDB958           (    printrets.asm):00140                 jsr PRINTCR
150F 3536             (    printrets.asm):00141                 puls y,x,d
1511 39               (    printrets.asm):00142                 rts
                      (    printrets.asm):00143         
1512                  (    printrets.asm):00144         print_ret_no_light
1512 8E172C           (    printrets.asm):00145                 ldx #itispitchdark
1515 BD1914           (    printrets.asm):00146                 jsr PRINT
1518 BDB958           (    printrets.asm):00147                 jsr PRINTCR
151B 3536             (    printrets.asm):00148                 puls y,x,d
151D 39               (    printrets.asm):00149                 rts
                      (    printrets.asm):00150         
151E                  (    printrets.asm):00151         print_ret_locked
151E 8E171B           (    printrets.asm):00152                 ldx #the
1521 BD1914           (    printrets.asm):00153                 jsr PRINT
1524 B611C8           (    printrets.asm):00154                 lda sentence+1
1527 3602             (    printrets.asm):00155                 pshu a
1529 BD191E           (    printrets.asm):00156                 jsr print_obj_name
152C 8E170A           (    printrets.asm):00157                 ldx #islocked
152F BD1914           (    printrets.asm):00158                 jsr PRINT
1532 BDB958           (    printrets.asm):00159                 jsr PRINTCR
1535 3536             (    printrets.asm):00160                 puls y,x,d
1537 39               (    printrets.asm):00161                 rts
                      (    printrets.asm):00162         
                      (    printrets.asm):00163         ;this actually is a subroutine
                      (    printrets.asm):00164         ;it checks the object in the direction
                      (    printrets.asm):00165         ;the player is trying to move
                      (    printrets.asm):00166         ;the move direction is on the user stack
1538                  (    printrets.asm):00167         print_object_closed
1538 3436             (    printrets.asm):00168                 pshs d,x,y
153A 8E171B           (    printrets.asm):00169                 ldx #the
153D BD1914           (    printrets.asm):00170                 jsr PRINT
1540 12               (    printrets.asm):00171                 nop ; get current room
1541 BD1BAC           (    printrets.asm):00172                 jsr get_player_room
1544 3702             (    printrets.asm):00173                 pulu a
1546 C613             (    printrets.asm):00174                 ldb #OBJ_ENTRY_SIZE
1548 3D               (    printrets.asm):00175                 mul
1549 1F01             (    printrets.asm):00176                 tfr d,x 
154B 30891EF4         (    printrets.asm):00177                 leax obj_table,x
154F BD12ED           (    printrets.asm):00178                 jsr get_move_direction ; convert verb to get move direction
1552 3704             (    printrets.asm):00179                 pulu b
1554 A685             (    printrets.asm):00180                 lda b,x ; now has room player is moving into (the door)
1556 C613             (    printrets.asm):00181                 ldb #OBJ_ENTRY_SIZE
1558 3D               (    printrets.asm):00182                 mul
1559 1F01             (    printrets.asm):00183                 tfr d,x
155B 30891EF4         (    printrets.asm):00184                 leax obj_table,x
155F 12               (    printrets.asm):00185                 nop ; get that object's name attribute
1560 A684             (    printrets.asm):00186                 lda OBJ_ID,x
1562 3602             (    printrets.asm):00187                 pshu a
1564 BD191E           (    printrets.asm):00188                 jsr print_obj_name
1567 8E1720           (    printrets.asm):00189                 ldx #isclosed
156A BD1914           (    printrets.asm):00190                 jsr PRINT 
156D BDB958           (    printrets.asm):00191                 jsr PRINTCR
1570 3536             (    printrets.asm):00192                 puls y,x,d
1572 39               (    printrets.asm):00193                 rts
                      (    printrets.asm):00194                 
                      (    printrets.asm):00195                 
1573 4920444F4E275420 (    printrets.asm):00196         badverb .strz "I DON'T KNOW THE VERB, '"
     4B4E4F5720544845
     20564552422C2027
     00
158C 5452593A20455841 (    printrets.asm):00197         badexamine .strz "TRY: EXAMINE (SOMETHING)."
     4D494E452028534F
     4D455448494E4729
     2E00
15A6 5452593A204F5045 (    printrets.asm):00198         badopen .strz "TRY: OPEN (SOMETHING)."
     4E2028534F4D4554
     48494E47292E00
15BD 2E00             (    printrets.asm):00199         period .strz "."
15BF 4920444F4E275420 (    printrets.asm):00200         bad_noun .strz "I DON'T KNOW THE WORD, '"
     4B4E4F5720544845
     20574F52442C2027
     00
15D8 272E00           (    printrets.asm):00201         close_quote .strz "'."
15DB 594F5520444F4E27 (    printrets.asm):00202         badobj .strz "YOU DON'T SEE THAT."      
     5420534545205448
     41542E00
15EF 594F5520444F4E27 (    printrets.asm):00203         nohave .strz "YOU DON'T HAVE THAT."     
     5420484156452054
     4841542E00
1604 5448415420495320 (    printrets.asm):00204         noeat .strz  "THAT IS NOT SOMETHING YOU CAN EAT."
     4E4F5420534F4D45
     5448494E4720594F
     552043414E204541
     542E00
1627 594F552043414E27 (    printrets.asm):00205         notportable .strz       "YOU CAN'T TAKE THAT."
     542054414B452054
     4841542E00
163C 594F552043414E27 (    printrets.asm):00206         notcontainer .strz      "YOU CAN'T PUT THINGS IN THAT."
     5420505554205448
     494E475320494E20
     544841542E00
165A 594F552046494E44 (    printrets.asm):00207         notsupporter .strz      "YOU FIND NO SUITABLE SURFACE."
     204E4F2053554954
     41424C4520535552
     464143452E00
1678 4920444F4E275420 (    printrets.asm):00208         dontunderstand .strz "I DON'T UNDERSTAND."
     554E444552535441
     4E442E00
168C 5452592050555420 (    printrets.asm):00209         badputcommand .strz "TRY PUT (SOMETHING) IN (SOMETHING ELSE)."
     28534F4D45544849
     4E472920494E2028
     534F4D455448494E
     4720454C5345292E
     00
16B5 5448415420495320 (    printrets.asm):00210         notcloseable .strz "THAT IS NOT CLOSEABLE."
     4E4F5420434C4F53
     4541424C452E00
16CC 5448415420495320 (    printrets.asm):00211         notopenable .strz "THAT IS NOT OPENABLE."
     4E4F54204F50454E
     41424C452E00
16E2 4954275320414C52 (    printrets.asm):00212         alreadyclosed .strz "IT'S ALREADY CLOSED."
     4541445920434C4F
     5345442E00
16F7 4954275320414C52 (    printrets.asm):00213         alreadyopen .strz "IT'S ALREADY OPEN."
     45414459204F5045
     4E2E00
170A 204953204C4F434B (    printrets.asm):00214         islocked .strz " IS LOCKED."
     45442E00
1716 5055542000       (    printrets.asm):00215         putconfused .strz "PUT " 
171B 5448452000       (    printrets.asm):00216         the .strz "THE "
1720 20495320434C4F53 (    printrets.asm):00217         isclosed .strz " IS CLOSED."
     45442E00
172C 4954204953205049 (    printrets.asm):00218         itispitchdark .strz "IT IS PITCH DARK."
     544348204441524B
     2E00
173E 504152444F4E3F00 (    printrets.asm):00219         pardon .strz "PARDON?"
                      (         main.asm):00046                 include look.asm
                      (         look.asm):00001         
                      (         look.asm):00002         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         look.asm):00003         ;routines
                      (         look.asm):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1746                  (         look.asm):00005         look_sub
1746 3436             (         look.asm):00006                 pshs d,x,y
                      (         look.asm):00007                 ;check for light
1748 BD1BAC           (         look.asm):00008                 jsr get_player_room
174B BD1BC0           (         look.asm):00009                 jsr ambient_light
174E 3702             (         look.asm):00010                 pulu a
1750 8100             (         look.asm):00011                 cmpa #0
1752 1027FDBC         (         look.asm):00012                 lbeq print_ret_no_light
                      (         look.asm):00013                 ;print room name
                      (         look.asm):00014                 ;load the 'holder' of object 1 player
1756 BD1BAC           (         look.asm):00015                 jsr get_player_room
1759 3702             (         look.asm):00016                 pulu a 
175B 12               (         look.asm):00017                 nop     ; now get the holder's description attr
175C 3602             (         look.asm):00018                 pshu a  ; push holder id
175E 8603             (         look.asm):00019                 lda #DESC_ID    ; holder attr #
1760 3602             (         look.asm):00020                 pshu a  ;
1762 BD138A           (         look.asm):00021                 jsr get_object_attribute
1765 3702             (         look.asm):00022                 pulu a  ; get description id#2  
1767 12               (         look.asm):00023                 nop             ; now print that id
1768 8E21B6           (         look.asm):00024                 ldx #description_table
176B 3602             (         look.asm):00025                 pshu a 
176D BD19FF           (         look.asm):00026                 jsr print_table_entry   ; print the description for the room
1770 BDB958           (         look.asm):00027                 jsr PRINTCR
                      (         look.asm):00028                 ;jsr list_room_items    
1773 BD1BAC           (         look.asm):00029                 jsr get_player_room             ; get and leave player room on stack
1776 BD177C           (         look.asm):00030                 jsr start_look_sub
1779 3536             (         look.asm):00031                 puls x,y,d
177B 39               (         look.asm):00032                 rts
                      (         look.asm):00033                 
                      (         look.asm):00034         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         look.asm):00035         ;holder is on the user stack
                      (         look.asm):00036         ;used by look_sub
                      (         look.asm):00037         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
177C                  (         look.asm):00038         start_look_sub
177C 3436             (         look.asm):00039                 pshs d,x,y
177E 8600             (         look.asm):00040                 lda #0
1780 8E1EF4           (         look.asm):00041                 ldx #obj_table
1783 A684             (         look.asm):00042         @lp lda OBJ_ID,x  
1785 81FF             (         look.asm):00043                 cmpa #$ff       ; hit end of table
1787 2754             (         look.asm):00044                 beq @x
1789 8101             (         look.asm):00045                 cmpa #PLAYER
178B 274B             (         look.asm):00046                 beq @c
178D A68811           (         look.asm):00047                 lda PROPERTY_BYTE_1,x  ;check for a skip scenery items
1790 8401             (         look.asm):00048                 anda #SCENERY_MASK
1792 8101             (         look.asm):00049                 cmpa #SCENERY_MASK
1794 2742             (         look.asm):00050                 beq @c
1796 A601             (         look.asm):00051                 lda HOLDER_ID,x
1798 A1C4             (         look.asm):00052                 cmpa ,u         ; is the player's room the holder of this object
179A 263C             (         look.asm):00053                 bne @c
179C 12               (         look.asm):00054                 nop ; now print the object (then handle nesting)
179D 12               (         look.asm):00055                 nop ; does is have an initial description?
179E A602             (         look.asm):00056                 lda INITIAL_DESC_ID,x
17A0 81FF             (         look.asm):00057                 cmpa #255
17A2 2711             (         look.asm):00058                 beq @n  ; no initial description
17A4 3602             (         look.asm):00059                 pshu a  ; push description param
17A6 3410             (         look.asm):00060                 pshs x
17A8 8E21B6           (         look.asm):00061                 ldx #description_table ; put table in x
17AB BD19FF           (         look.asm):00062                 jsr print_table_entry
17AE BDB958           (         look.asm):00063                 jsr PRINTCR
17B1 3510             (         look.asm):00064                 puls x
17B3 2020             (         look.asm):00065                 bra @f
17B5 12               (         look.asm):00066         @n      nop ; no  - print "THERE IS A [OBJECT] HERE."
17B6 3410             (         look.asm):00067                 pshs x
17B8 8E17E2           (         look.asm):00068                 ldx #thereis
17BB BD1914           (         look.asm):00069                 jsr PRINT
17BE 3510             (         look.asm):00070                 puls x
17C0 A684             (         look.asm):00071                 lda OBJ_ID,x
17C2 3602             (         look.asm):00072                 pshu a
17C4 BD191E           (         look.asm):00073                 jsr print_obj_name
17C7 3410             (         look.asm):00074                 pshs x
17C9 8E17EE           (         look.asm):00075                 ldx #here
17CC BD1914           (         look.asm):00076                 jsr PRINT
17CF BDB958           (         look.asm):00077                 jsr PRINTCR
17D2 3510             (         look.asm):00078                 puls x
17D4 12               (         look.asm):00079                 nop ; now check for contains/supporters
17D5 BD1A20           (         look.asm):00080         @f      jsr print_nested_contents
17D8 308813           (         look.asm):00081         @c      leax OBJ_ENTRY_SIZE,x   ; loop to next object
17DB 20A6             (         look.asm):00082                 bra @lp
17DD 3702             (         look.asm):00083         @x      pulu a  ; pop stack
17DF 3536             (         look.asm):00084                 puls y,x,d
17E1 39               (         look.asm):00085                 rts     
                      (         look.asm):00086                 
17E2 5448455245204953 (         look.asm):00087         thereis .strz "THERE IS A "
     20412000
17EE 20484552452E00   (         look.asm):00088         here    .strz " HERE."          
                      (         main.asm):00047                 include inventory.asm
                      (    inventory.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00002         ;inventory.asm
                      (    inventory.asm):00003         ;routines having to do with the inventory
                      (    inventory.asm):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00005         
                      (    inventory.asm):00006         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00007         ;drop sub
                      (    inventory.asm):00008         ;moves an object to the player's room
                      (    inventory.asm):00009         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17F5                  (    inventory.asm):00010         drop_sub
17F5 3436             (    inventory.asm):00011                 pshs d,x,y
17F7 B611C8           (    inventory.asm):00012                 lda sentence+1
17FA C613             (    inventory.asm):00013                 ldb #OBJ_ENTRY_SIZE
17FC 3D               (    inventory.asm):00014                 mul
17FD 1F01             (    inventory.asm):00015                 tfr d,x
17FF 30891EF4         (    inventory.asm):00016                 leax obj_table,x
1803 3001             (    inventory.asm):00017                 leax HOLDER_ID,x
1805 BD1BAC           (    inventory.asm):00018                 jsr get_player_room
1808 3702             (    inventory.asm):00019                 pulu a
180A A784             (    inventory.asm):00020                 sta ,x
180C 8E190B           (    inventory.asm):00021                 ldx #dropped
180F BD1914           (    inventory.asm):00022                 jsr PRINT
1812 BDB958           (    inventory.asm):00023                 jsr PRINTCR
1815 2000             (    inventory.asm):00024                 bra @x
1817 3536             (    inventory.asm):00025         @x      puls y,x,d
1819 39               (    inventory.asm):00026                 rts
                      (    inventory.asm):00027                 
                      (    inventory.asm):00028         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00029         ;param on top is object to consider
                      (    inventory.asm):00030         ;param under top is parent to check for
                      (    inventory.asm):00031         ;0 or non zero is return on the stack
                      (    inventory.asm):00032         ;
                      (    inventory.asm):00033         ;loop over each 
                      (    inventory.asm):00034         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
181A                  (    inventory.asm):00035         is_visible_child_of
181A 3436             (    inventory.asm):00036                 pshs d,x,y
181C 3702             (    inventory.asm):00037                 pulu a  ;get child (the object)
181E C613             (    inventory.asm):00038         @lp ldb #OBJ_ENTRY_SIZE
1820 3D               (    inventory.asm):00039                 mul     
1821 1F01             (    inventory.asm):00040                 tfr d,x
1823 30891EF4         (    inventory.asm):00041                 leax obj_table,x 
1827 A601             (    inventory.asm):00042                 lda HOLDER_ID,x
1829 A1C4             (    inventory.asm):00043                 cmpa ,u         ;is the parent a match
182B 2706             (    inventory.asm):00044                 beq @y
182D 8100             (    inventory.asm):00045                 cmpa #0         ;offscreen
182F 2704             (    inventory.asm):00046                 beq @x
1831 20EB             (    inventory.asm):00047                 bra @lp
1833 8601             (    inventory.asm):00048         @y  lda #1      ;if not found, a will be 0
1835 A7C4             (    inventory.asm):00049         @x      sta ,u          ;if a is 0, the answer was no
1837 3536             (    inventory.asm):00050                 puls y,d,x
1839 39               (    inventory.asm):00051                 rts
                      (    inventory.asm):00052         
                      (    inventory.asm):00053         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00054         ;count visible contents
                      (    inventory.asm):00055         ;counts the number of non-scenery
                      (    inventory.asm):00056         ;objects in the object on the user 
                      (    inventory.asm):00057         ;stack
                      (    inventory.asm):00058         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
183A                  (    inventory.asm):00059         count_visible_items
183A 3436             (    inventory.asm):00060                 pshs d,x,y
183C 8600             (    inventory.asm):00061                 lda #0
183E 3602             (    inventory.asm):00062                 pshu a  ;push return value
1840 8E1EF4           (    inventory.asm):00063                 ldx #obj_table
1843 A684             (    inventory.asm):00064         @lp lda ,x
1845 81FF             (    inventory.asm):00065                 cmpa #$ff
1847 271C             (    inventory.asm):00066                 beq @x
1849 8101             (    inventory.asm):00067                 cmpa #1 ; don't count the player
184B 2713             (    inventory.asm):00068                 beq @c
184D E601             (    inventory.asm):00069                 ldb HOLDER_ID,x
184F E141             (    inventory.asm):00070                 cmpb 1,u        ;is the holder the parameter?
1851 260D             (    inventory.asm):00071                 bne @c
1853 A68811           (    inventory.asm):00072                 lda PROPERTY_BYTE_1,x           ;get the byte with the scenery bit
1856 8401             (    inventory.asm):00073                 anda #SCENERY_MASK
1858 8100             (    inventory.asm):00074                 cmpa #0
185A 2604             (    inventory.asm):00075                 bne @c
185C 6C40             (    inventory.asm):00076                 inc 0,u                 ;found an object
185E 2005             (    inventory.asm):00077                 bra @x                  ;we only need to find 1
1860 308813           (    inventory.asm):00078         @c  leax OBJ_ENTRY_SIZE,x        ; skip to next object
1863 20DE             (    inventory.asm):00079                 bra @lp
1865 A6C4             (    inventory.asm):00080         @x      lda ,u  ;copy return val
1867 A741             (    inventory.asm):00081                 sta 1,u ;one byte into stack 
1869 3702             (    inventory.asm):00082                 pulu a ;pop local var
186B 3536             (    inventory.asm):00083                 puls y,x,d
186D 39               (    inventory.asm):00084                 rts
                      (    inventory.asm):00085         
                      (    inventory.asm):00086         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00087         ;returns true if paramter 1
                      (    inventory.asm):00088         ;is an adjacent door to the param 2 
                      (    inventory.asm):00089         ;
                      (    inventory.asm):00090         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
186E                  (    inventory.asm):00091         is_adjacent_door
186E 3436             (    inventory.asm):00092                 pshs d,x,y
1870 BD1BAC           (    inventory.asm):00093                 jsr get_player_room
1873 3702             (    inventory.asm):00094                 pulu a
1875 3602             (    inventory.asm):00095                 pshu a
1877 C613             (    inventory.asm):00096                 ldb #OBJ_ENTRY_SIZE
1879 3D               (    inventory.asm):00097                 mul
187A 1F01             (    inventory.asm):00098                 tfr d,x
187C 30891EF4         (    inventory.asm):00099                 leax obj_table,x
1880 3004             (    inventory.asm):00100                 leax NORTH,x ; skip to direction bytes
1882 8600             (    inventory.asm):00101                 lda #0  ;l
1884 E686             (    inventory.asm):00102         @lp ldb a,x
1886 F111C8           (    inventory.asm):00103                 cmpb sentence+1  ;  is the param, any of the adjacent rooms?
1889 2608             (    inventory.asm):00104                 bne @s
188B 12               (    inventory.asm):00105                 nop     ;  it's adjacent, is it a door
188C 12               (    inventory.asm):00106                 nop     ; not doing door check right now
188D 8601             (    inventory.asm):00107                 lda #1  ; return a 1    
188F A7C4             (    inventory.asm):00108                 sta ,u
1891 2009             (    inventory.asm):00109                 bra @x
1893 4C               (    inventory.asm):00110         @s      inca     
1894 810A             (    inventory.asm):00111                 cmpa #10 ; 10 directions
1896 26EC             (    inventory.asm):00112                 bne @lp
1898 8600             (    inventory.asm):00113                 lda #0   ; if got here, not adjacent
189A A7C4             (    inventory.asm):00114                 sta ,u  ;return a 0
189C 3536             (    inventory.asm):00115         @x      puls y,x,d
189E 39               (    inventory.asm):00116                 rts
                      (    inventory.asm):00117                 
                      (    inventory.asm):00118         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00119         ;inventory
                      (    inventory.asm):00120         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
189F                  (    inventory.asm):00121         inventory_sub
189F 3436             (    inventory.asm):00122                 pshs d,x,y
18A1 8601             (    inventory.asm):00123                 lda #PLAYER 
18A3 3602             (    inventory.asm):00124                 pshu a
18A5 BD183A           (    inventory.asm):00125                 jsr count_visible_items
18A8 3702             (    inventory.asm):00126                 pulu a
18AA 8100             (    inventory.asm):00127                 cmpa #0
18AC 260B             (    inventory.asm):00128                 bne @si         ;show items
18AE 8E18E1           (    inventory.asm):00129                 ldx #noitems
18B1 BD1914           (    inventory.asm):00130                 jsr PRINT
18B4 BDB958           (    inventory.asm):00131                 jsr PRINTCR
18B7 2011             (    inventory.asm):00132                 bra @x
18B9 12               (    inventory.asm):00133         @si     nop             ;list items`
18BA 8E18CD           (    inventory.asm):00134                 ldx #carrying
18BD BD1914           (    inventory.asm):00135                 jsr PRINT
18C0 BDB958           (    inventory.asm):00136                 jsr PRINTCR
18C3 8601             (    inventory.asm):00137                 lda #PLAYER
18C5 3602             (    inventory.asm):00138                 pshu a
18C7 BD1975           (    inventory.asm):00139                 jsr print_obj_contents
18CA 3536             (    inventory.asm):00140         @x      puls y,x,d
18CC 39               (    inventory.asm):00141                 rts
                      (    inventory.asm):00142         
                      (    inventory.asm):00143         
                      (    inventory.asm):00144         
18CD 594F552041524520 (    inventory.asm):00145         carrying .strz "YOU ARE CARRYING..."
     4341525259494E47
     2E2E2E00
18E1 594F552041524520 (    inventory.asm):00146         noitems .strz "YOU ARE EMPTY HANDED."
     454D505459204841
     4E4445442E00
18F7 594F5520444F4E27 (    inventory.asm):00147         nosee .strz "YOU DON'T SEE THAT."
     5420534545205448
     41542E00
190B 44524F505045442E (    inventory.asm):00148         dropped .strz "DROPPED."
     00
                      (    inventory.asm):00149         
                      (         main.asm):00048                 include print.asm
1914                  (        print.asm):00001         PRINT 
1914 3476             (        print.asm):00002                 pshs d,u,x,y
1916 301F             (        print.asm):00003                 leax -1,x
1918 BDB99C           (        print.asm):00004                 jsr SYSPRINT
191B 3576             (        print.asm):00005                 puls y,x,u,d
191D 39               (        print.asm):00006                         rts
                      (        print.asm):00007         
                      (        print.asm):00008         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        print.asm):00009         ;prints the words in the obj_word_table for
                      (        print.asm):00010         ;and object
                      (        print.asm):00011         ;the id of the object in on the user stack
                      (        print.asm):00012         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
191E                  (        print.asm):00013         print_obj_name
191E 3436             (        print.asm):00014                 pshs d,x,y
1920 12               (        print.asm):00015                 nop ; param on stack is passed to subroutine
1921 BD195B           (        print.asm):00016                 jsr find_obj_word_entry ;put x at start of words 
1924 A680             (        print.asm):00017                 lda ,x+
1926 1F12             (        print.asm):00018                 tfr x,y
1928 8E1D77           (        print.asm):00019                 ldx #dictionary
192B 3602             (        print.asm):00020                 pshu a ; index to print
192D BD19FF           (        print.asm):00021                 jsr print_table_entry
1930 A6A0             (        print.asm):00022                 lda ,y+
1932 81FF             (        print.asm):00023                 cmpa #$ff ;last word?
1934 2722             (        print.asm):00024                 beq @x
1936 8E1A8C           (        print.asm):00025                 ldx #space 
1939 BD1914           (        print.asm):00026                 jsr PRINT 
193C 8E1D77           (        print.asm):00027                 ldx #dictionary
193F 3602             (        print.asm):00028                 pshu a
1941 BD19FF           (        print.asm):00029                 jsr print_table_entry ; print second word
1944 A6A0             (        print.asm):00030                 lda ,y+
1946 81FF             (        print.asm):00031                 cmpa #$ff
1948 270E             (        print.asm):00032                 beq @x
194A 8E1A8C           (        print.asm):00033                 ldx #space
194D BD1914           (        print.asm):00034                 jsr PRINT
1950 8E1D77           (        print.asm):00035                 ldx #dictionary
1953 3602             (        print.asm):00036                 pshu a
1955 BD19FF           (        print.asm):00037                 jsr print_table_entry   
1958 3536             (        print.asm):00038         @x      puls y,x,d
195A 39               (        print.asm):00039                 rts
                      (        print.asm):00040         
                      (        print.asm):00041         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        print.asm):00042         ;user stack contains id of obj to print
                      (        print.asm):00043         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
195B                  (        print.asm):00044         find_obj_word_entry
195B 3426             (        print.asm):00045                 pshs d,y
195D 3702             (        print.asm):00046                 pulu a  ;get obj id
195F 8E211C           (        print.asm):00047                 ldx #obj_word_table
1962 E684             (        print.asm):00048         @lp     ldb ,x  ;get id
1964 C1FF             (        print.asm):00049                 cmpb #$ff       ;end of table?
1966 2708             (        print.asm):00050                 beq @x
1968 A184             (        print.asm):00051                 cmpa ,x  ;get id
196A 2704             (        print.asm):00052                 beq @x  ;found entry
196C 3004             (        print.asm):00053                 leax 4,x ; OBJ_WORD_ENTRY SIZE
196E 20F2             (        print.asm):00054                 bra @lp
1970 3001             (        print.asm):00055         @x      leax 1,x ; skip id byte
1972 3526             (        print.asm):00056                 puls y,d
1974 39               (        print.asm):00057                 rts
                      (        print.asm):00058         
                      (        print.asm):00059         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        print.asm):00060         ;prints out non scenery items in the 
                      (        print.asm):00061         ;param pushed on u
                      (        print.asm):00062         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1975                  (        print.asm):00063         print_obj_contents
1975 3436             (        print.asm):00064                 pshs d,x,y
1977 12               (        print.asm):00065                 nop ; now list all the objects
1978 7C1A8B           (        print.asm):00066                 inc indent_level        ;
197B 8E1EF4           (        print.asm):00067                 ldx #obj_table
197E A684             (        print.asm):00068         @lp lda ,x
1980 81FF             (        print.asm):00069                 cmpa #$ff       ; end of table?
1982 2754             (        print.asm):00070                 beq @x
1984 8101             (        print.asm):00071                 cmpa #PLAYER ; skip over player
1986 274B             (        print.asm):00072                 beq @c
1988 A601             (        print.asm):00073                 lda HOLDER_ID,x ;get holder byte
198A A1C4             (        print.asm):00074                 cmpa ,u                 ;compare to parameter
198C 2645             (        print.asm):00075                 bne @c                  ; skip it
198E A68811           (        print.asm):00076                 lda PROPERTY_BYTE_1,x           ;get the byte with the scenery bit
1991 8401             (        print.asm):00077                 anda #SCENERY_MASK
1993 8101             (        print.asm):00078                 cmpa #SCENERY_MASK
1995 273C             (        print.asm):00079                 beq @c  ; this items is 'invisible' - don't show it
1997 A684             (        print.asm):00080                 lda OBJ_ID,x    ; reload and push object id
1999 12               (        print.asm):00081                 nop             ; does the object have an initial description?
199A C613             (        print.asm):00082                 ldb #OBJ_ENTRY_SIZE
199C 3D               (        print.asm):00083                 mul
199D 3410             (        print.asm):00084             pshs x
199F 1F01             (        print.asm):00085                 tfr d,x
19A1 30891EF4         (        print.asm):00086                 leax obj_table,x
19A5 E602             (        print.asm):00087                 ldb INITIAL_DESC_ID,x
19A7 3510             (        print.asm):00088                 puls x
19A9 C1FF             (        print.asm):00089                 cmpb #$ff
19AB 2714             (        print.asm):00090                 beq @p
19AD 3410             (        print.asm):00091                 pshs x
19AF 8E21B6           (        print.asm):00092                 ldx #description_table
19B2 3604             (        print.asm):00093                 pshu b
19B4 BD1A76           (        print.asm):00094                 jsr indent
19B7 BD19FF           (        print.asm):00095                 jsr print_table_entry  ; print initial description
19BA BDB958           (        print.asm):00096                 jsr PRINTCR
19BD 3510             (        print.asm):00097                 puls x
19BF 200F             (        print.asm):00098                 bra @r 
19C1 A684             (        print.asm):00099         @p      lda OBJ_ID,x
19C3 3602             (        print.asm):00100                 pshu a
19C5 BD1A76           (        print.asm):00101                 jsr indent
19C8 BD191E           (        print.asm):00102                 jsr print_obj_name      ; just print the object's name
19CB BDB958           (        print.asm):00103                 jsr PRINTCR
19CE 12               (        print.asm):00104                 nop ;   if that is an open container or transprent
19CF 12               (        print.asm):00105                 nop ;   print its name
19D0 BD1A20           (        print.asm):00106         @r      jsr print_nested_contents
19D3 308813           (        print.asm):00107         @c  leax OBJ_ENTRY_SIZE,x        ; skip to next object
19D6 20A6             (        print.asm):00108                 bra @lp 
19D8 3702             (        print.asm):00109         @x      pulu a ; pop parameter
19DA 7A1A8B           (        print.asm):00110                 dec indent_level
19DD 3536             (        print.asm):00111                 puls y,x,d
19DF 39               (        print.asm):00112                 rts     
                      (        print.asm):00113         
                      (        print.asm):00114         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        print.asm):00115         ;handles 'look'
                      (        print.asm):00116         ;no params
                      (        print.asm):00117         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
19E0                  (        print.asm):00118         list_room_items
19E0 3436             (        print.asm):00119                 pshs d,x,y
19E2 BD1BAC           (        print.asm):00120                 jsr get_player_room
19E5 3702             (        print.asm):00121                 pulu a ;get result
19E7 1F89             (        print.asm):00122                 tfr a,b ; save copy of room
19E9 3602             (        print.asm):00123                 pshu a  ;pass room # to sub
19EB BD183A           (        print.asm):00124                 jsr count_visible_items
19EE 3702             (        print.asm):00125                 pulu a
19F0 8100             (        print.asm):00126                 cmpa #0
19F2 2708             (        print.asm):00127                 beq     @x      ; quit if no visible objects
                      (        print.asm):00128         ;       ldx #visible_items
                      (        print.asm):00129         ;       jsr PRINT
                      (        print.asm):00130         ;       jsr PRINTCR
19F4 3604             (        print.asm):00131                 pshu b  ;push room #
19F6 BD1A76           (        print.asm):00132                 jsr indent
19F9 BD1975           (        print.asm):00133                 jsr print_obj_contents
19FC 3536             (        print.asm):00134         @x      puls y,x,d
19FE 39               (        print.asm):00135                 rts
                      (        print.asm):00136         
                      (        print.asm):00137         ;print_table_entry
                      (        print.asm):00138         ;
                      (        print.asm):00139         ;prints the text for a word in a table 
                      (        print.asm):00140         ; x contains address of table
                      (        print.asm):00141         ; u contains index to print
                      (        print.asm):00142         ;[length (minus null)][null terminated text]
                      (        print.asm):00143         ;
                      (        print.asm):00144         ;this function cleans up the stack
                      (        print.asm):00145         ;this routine is called by print_object_name
                      (        print.asm):00146         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19FF                  (        print.asm):00147         print_table_entry
19FF 3436             (        print.asm):00148                 pshs d,x,y
1A01 3704             (        print.asm):00149                 pulu b     ;get index to print
1A03 C100             (        print.asm):00150         @lp     cmpb #0         ;done looping?
1A05 2711             (        print.asm):00151                 beq @d
1A07 1F02             (        print.asm):00152                 tfr d,y         ;save a,b
1A09 1F10             (        print.asm):00153                 tfr x,d
1A0B EB84             (        print.asm):00154                 addb ,x         ;get length byte
1A0D 8900             (        print.asm):00155                 adca #0                 ;add any carry to hi byte 
1A0F 1F01             (        print.asm):00156                 tfr d,x
1A11 3002             (        print.asm):00157                 leax 2,x        ;skip null and length byte
1A13 1F20             (        print.asm):00158                 tfr y,d         ;restore a,b
1A15 5A               (        print.asm):00159                 decb
1A16 20EB             (        print.asm):00160                 bra @lp
1A18 3001             (        print.asm):00161         @d  leax 1,x    ;skip length byte
1A1A BD1914           (        print.asm):00162                 jsr PRINT   ; x should now be 1 byte behind str 
1A1D 3536             (        print.asm):00163                 puls y,x,d
1A1F 39               (        print.asm):00164                 rts
                      (        print.asm):00165         
                      (        print.asm):00166         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        print.asm):00167         ;this subroutine prints the nested contents
                      (        print.asm):00168         ;of an object ()if it has any.
                      (        print.asm):00169         ;x contains address of object to examine
                      (        print.asm):00170         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
1A20                  (        print.asm):00171         print_nested_contents
1A20 3436             (        print.asm):00172                 pshs d,x,y
1A22 12               (        print.asm):00173                 nop ; check if it has contents
                      (        print.asm):00174         ;       inc indent_level
1A23 A684             (        print.asm):00175                 lda OBJ_ID,x
1A25 3602             (        print.asm):00176                 pshu a
1A27 BD183A           (        print.asm):00177                 jsr count_visible_items
1A2A 3702             (        print.asm):00178                 pulu a
1A2C 8100             (        print.asm):00179                 cmpa #0
1A2E 2743             (        print.asm):00180                 beq @d
1A30 A68811           (        print.asm):00181                 lda PROPERTY_BYTE_1,x
1A33 8404             (        print.asm):00182                 anda #CONTAINER_MASK
1A35 8104             (        print.asm):00183                 cmpa #CONTAINER_MASK
1A37 2617             (        print.asm):00184                 bne @s
1A39 BD1A76           (        print.asm):00185                 jsr indent
1A3C 3410             (        print.asm):00186                 pshs x
1A3E 8E13CA           (        print.asm):00187                 ldx #itcontains
1A41 BD1914           (        print.asm):00188                 jsr PRINT
1A44 BDB958           (        print.asm):00189                 jsr PRINTCR
1A47 3510             (        print.asm):00190                 puls x
1A49 A684             (        print.asm):00191                 lda OBJ_ID,x
1A4B 3602             (        print.asm):00192                 pshu a
1A4D BD1975           (        print.asm):00193                 jsr print_obj_contents
1A50 A68811           (        print.asm):00194         @s      lda PROPERTY_BYTE_1,x ; is it a supporter
1A53 8402             (        print.asm):00195                 anda #SUPPORTER_MASK
1A55 8102             (        print.asm):00196                 cmpa #SUPPORTER_MASK    
1A57 261A             (        print.asm):00197                 bne @d
1A59 BDB958           (        print.asm):00198                 jsr PRINTCR
1A5C 3410             (        print.asm):00199                 pshs x
1A5E BD1A76           (        print.asm):00200                 jsr indent
1A61 8E13D9           (        print.asm):00201                 ldx #onitis
1A64 BD1914           (        print.asm):00202                 jsr PRINT
1A67 BDB958           (        print.asm):00203                 jsr PRINTCR
1A6A 3510             (        print.asm):00204                 puls x
1A6C A684             (        print.asm):00205                 lda OBJ_ID,x
1A6E 3602             (        print.asm):00206                 pshu a
1A70 BD1975           (        print.asm):00207                 jsr print_obj_contents
1A73 3536             (        print.asm):00208         @d      puls y,x,d
                      (        print.asm):00209         ;       dec indent_level
1A75 39               (        print.asm):00210                 rts
                      (        print.asm):00211         
1A76                  (        print.asm):00212         indent
1A76 3436             (        print.asm):00213                 pshs d,x,y
1A78 B61A8B           (        print.asm):00214                 lda indent_level
1A7B 8100             (        print.asm):00215         @lp     cmpa #0
1A7D 2709             (        print.asm):00216                 beq @x
1A7F 8E1A8C           (        print.asm):00217             ldx #space
1A82 BD1914           (        print.asm):00218                 jsr PRINT
1A85 4A               (        print.asm):00219                 deca
1A86 20F3             (        print.asm):00220                 bra @lp
1A88 3536             (        print.asm):00221         @x      puls y,x,d
1A8A 39               (        print.asm):00222                 rts
                      (        print.asm):00223                 
1A8B 00               (        print.asm):00224         indent_level .db 0
                      (        print.asm):00225                 
1A8C 2000             (        print.asm):00226         space .strz " "
                      (         main.asm):00049                 include put.asm
                      (          put.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (          put.asm):00002         ;put_routines
                      (          put.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1A8E                  (          put.asm):00004         put_sub
1A8E 3436             (          put.asm):00005                 pshs d,x,y
1A90 B611C8           (          put.asm):00006                 lda sentence+1
1A93 81FF             (          put.asm):00007                 cmpa #$ff
1A95 1027FA11         (          put.asm):00008                 lbeq print_ret_bad_put_command
1A99 B611CA           (          put.asm):00009                 lda sentence+3
1A9C 81FF             (          put.asm):00010                 cmpa #$ff
1A9E 1027FA08         (          put.asm):00011                 lbeq print_ret_bad_put_command
1AA2 12               (          put.asm):00012                 nop     ; check if the player has the d.o.
1AA3 12               (          put.asm):00013                 nop     ; check if the player sees the i.o      
1AA4 12               (          put.asm):00014                 nop     ; is this in or on? 
1AA5 B611C9           (          put.asm):00015                 lda sentence+2
1AA8 8100             (          put.asm):00016                 cmpa #0 ; id of "IN"
1AAA 2605             (          put.asm):00017                 bne @s1
1AAC BD1AC1           (          put.asm):00018                 jsr put_in_sub
1AAF 200D             (          put.asm):00019                 bra @x
1AB1 8106             (          put.asm):00020         @s1     cmpa #6 ; id of "ON"
1AB3 2605             (          put.asm):00021                 bne @s2
1AB5 BD1AF5           (          put.asm):00022                 jsr put_on_sub
1AB8 2004             (          put.asm):00023                 bra @x
1ABA 1027F9E0         (          put.asm):00024         @s2     lbeq print_ret_dont_understand
1ABE 3536             (          put.asm):00025         @x      puls y,x,d
1AC0 39               (          put.asm):00026                 rts
                      (          put.asm):00027         
1AC1                  (          put.asm):00028         put_in_sub      
1AC1 3436             (          put.asm):00029                 pshs d,x,y
1AC3 12               (          put.asm):00030                 nop     ; verify the i.o is a container
1AC4 B611CA           (          put.asm):00031                 lda sentence+3
1AC7 C613             (          put.asm):00032                 ldb #OBJ_ENTRY_SIZE
1AC9 3D               (          put.asm):00033                 mul
1ACA 1F01             (          put.asm):00034                 tfr d,x
1ACC 30891EF4         (          put.asm):00035                 leax obj_table,x
1AD0 A68811           (          put.asm):00036                 lda PROPERTY_BYTE_1,x
1AD3 8404             (          put.asm):00037                 anda #CONTAINER_MASK
1AD5 8100             (          put.asm):00038                 cmpa #0
1AD7 1027F9B7         (          put.asm):00039                 lbeq  print_ret_not_container
1ADB 12               (          put.asm):00040                 nop ;verify it isn't closed
1ADC B611C8           (          put.asm):00041                 lda sentence+1  ; move object
1ADF 3602             (          put.asm):00042                 pshu a
1AE1 B611CA           (          put.asm):00043                 lda sentence+3  ; to object
1AE4 3602             (          put.asm):00044                 pshu a
1AE6 BD130E           (          put.asm):00045                 jsr move_object
1AE9 8E1B28           (          put.asm):00046                 ldx #done
1AEC BD1914           (          put.asm):00047                 jsr PRINT
1AEF BDB958           (          put.asm):00048                 jsr PRINTCR
1AF2 3536             (          put.asm):00049                 puls y,x,d
1AF4 39               (          put.asm):00050                 rts
                      (          put.asm):00051         
1AF5                  (          put.asm):00052         put_on_sub
1AF5 3436             (          put.asm):00053                 pshs d,x,y
1AF7 B611CA           (          put.asm):00054                 lda sentence+3
1AFA C613             (          put.asm):00055                 ldb #OBJ_ENTRY_SIZE
1AFC 3D               (          put.asm):00056                 mul
1AFD 1F01             (          put.asm):00057                 tfr d,x
1AFF 30891EF4         (          put.asm):00058                 leax obj_table,x
1B03 A68811           (          put.asm):00059                 lda PROPERTY_BYTE_1,x
1B06 8402             (          put.asm):00060                 anda #SUPPORTER_MASK
1B08 8100             (          put.asm):00061                 cmpa #0
1B0A 1027F978         (          put.asm):00062                 lbeq  print_ret_not_supporter
1B0E 12               (          put.asm):00063                 nop     ; move the object
1B0F B611C8           (          put.asm):00064                 lda sentence+1 ; move the object
1B12 3602             (          put.asm):00065                 pshu a
1B14 B611CA           (          put.asm):00066                 lda sentence+3
1B17 3602             (          put.asm):00067                 pshu a
1B19 BD130E           (          put.asm):00068                 jsr move_object
1B1C 8E1B28           (          put.asm):00069                 ldx #done
1B1F BD1914           (          put.asm):00070                 jsr PRINT
1B22 BDB958           (          put.asm):00071                 jsr PRINTCR
1B25 3536             (          put.asm):00072                 puls y,x,d
1B27 39               (          put.asm):00073                 rts
                      (          put.asm):00074                 
1B28 444F4E452E00     (          put.asm):00075         done .strz "DONE."      
                      (         main.asm):00050                 include open.asm
                      (         open.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         open.asm):00002         ;open and closing subroutines
                      (         open.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         open.asm):00004         
1B2E                  (         open.asm):00005         open_sub
1B2E 3436             (         open.asm):00006                 pshs d,x,y
1B30 B611C8           (         open.asm):00007                 lda sentence+1
1B33 C613             (         open.asm):00008                 ldb #OBJ_ENTRY_SIZE    
1B35 3D               (         open.asm):00009                 mul
1B36 1F01             (         open.asm):00010                 tfr d,x
1B38 30891EF4         (         open.asm):00011                 leax obj_table,x
1B3C A68811           (         open.asm):00012                 lda PROPERTY_BYTE_1,x  ; openable?
1B3F 8410             (         open.asm):00013                 anda #OPENABLE_MASK
1B41 8110             (         open.asm):00014                 cmpa #OPENABLE_MASK
1B43 1026F98D         (         open.asm):00015                 lbne print_ret_not_openable
1B47 A68811           (         open.asm):00016                 lda PROPERTY_BYTE_1,x  ; already open?
1B4A 8420             (         open.asm):00017                 anda #OPEN_MASK
1B4C 8120             (         open.asm):00018                 cmpa #OPEN_MASK
1B4E 1027F910         (         open.asm):00019                 lbeq print_ret_already_open
1B52 A68811           (         open.asm):00020                 lda PROPERTY_BYTE_1,x  ; locked?
1B55 8480             (         open.asm):00021                 anda #LOCKED_MASK
1B57 8180             (         open.asm):00022                 cmpa #LOCKED_MASK
1B59 1027F9C1         (         open.asm):00023                 lbeq print_ret_locked
1B5D A68811           (         open.asm):00024                 lda PROPERTY_BYTE_1,x
1B60 8A20             (         open.asm):00025                 ora #OPEN_MASK
1B62 A78811           (         open.asm):00026                 sta PROPERTY_BYTE_1,x
1B65 8E1B28           (         open.asm):00027                 ldx #done
1B68 BD1914           (         open.asm):00028                 jsr PRINT
1B6B BDB958           (         open.asm):00029                 jsr PRINTCR
1B6E 3536             (         open.asm):00030                 puls y,x,d
1B70 39               (         open.asm):00031                 rts
                      (         open.asm):00032                 
1B71                  (         open.asm):00033         close_sub
1B71 3436             (         open.asm):00034                 pshs d,x,y
1B73 B611C8           (         open.asm):00035                 lda sentence+1
1B76 C613             (         open.asm):00036                 ldb #OBJ_ENTRY_SIZE
1B78 3D               (         open.asm):00037                 mul
1B79 1F01             (         open.asm):00038                 tfr d,x
1B7B 30891EF4         (         open.asm):00039                 leax obj_table,x
1B7F 12               (         open.asm):00040                 nop     ; is it openable?
1B80 A68811           (         open.asm):00041                 lda PROPERTY_BYTE_1,x
1B83 8410             (         open.asm):00042                 anda #OPENABLE_MASK     
1B85 8110             (         open.asm):00043                 cmpa #OPENABLE_MASK
1B87 1026F8E3         (         open.asm):00044                 lbne print_ret_not_closeable
1B8B 12               (         open.asm):00045                 nop ; is it already closed?
1B8C A68811           (         open.asm):00046                 lda PROPERTY_BYTE_1,x
1B8F 8420             (         open.asm):00047                 anda #OPEN_MASK 
1B91 8100             (         open.asm):00048                 cmpa #0 ; 0 means its closed
1B93 1027F8E3         (         open.asm):00049                 lbeq print_ret_already_closed   ;       
1B97 12               (         open.asm):00050                 nop ; close it
1B98 8620             (         open.asm):00051                 lda #OPEN_MASK
1B9A A88811           (         open.asm):00052                 eora PROPERTY_BYTE_1,x
1B9D A78811           (         open.asm):00053                 sta PROPERTY_BYTE_1,x
1BA0 8E1B28           (         open.asm):00054                 ldx #done
1BA3 BD1914           (         open.asm):00055                 jsr PRINT
1BA6 BDB958           (         open.asm):00056                 jsr PRINTCR
1BA9 3536             (         open.asm):00057                 puls y,x,d
1BAB 39               (         open.asm):00058                 rts
                      (         open.asm):00059         
                      (         open.asm):00060                 
1BAC                  (         open.asm):00061         get_player_room
1BAC 3436             (         open.asm):00062                 pshs d,x,y
1BAE 8601             (         open.asm):00063                 lda #PLAYER
1BB0 C613             (         open.asm):00064                 ldb #OBJ_ENTRY_SIZE
1BB2 3D               (         open.asm):00065                 mul
1BB3 1F01             (         open.asm):00066                 tfr d,x
1BB5 30891EF4         (         open.asm):00067                 leax obj_table,x
1BB9 A601             (         open.asm):00068                 lda HOLDER_ID,x
1BBB 3602             (         open.asm):00069                 pshu a
1BBD 3536             (         open.asm):00070                 puls y,x,d
1BBF 39               (         open.asm):00071                 rts     
                      (         open.asm):00072                 
                      (         open.asm):00073                 
                      (         main.asm):00051                 include light.asm
                      (        light.asm):00001          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        light.asm):00002          ;routines having to do with light
                      (        light.asm):00003          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        light.asm):00004          
                      (        light.asm):00005          
                      (        light.asm):00006          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        light.asm):00007          ;returns 1 if there is light in the player's
                      (        light.asm):00008          ;room or the something in that room has
                      (        light.asm):00009          ;a child that is emitting light and is in
                      (        light.asm):00010          ;a supporter or (an open or transparent container)
                      (        light.asm):00011          ;
                      (        light.asm):00012          ;player's room is on user stack
                      (        light.asm):00013          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1BC0                  (        light.asm):00014         ambient_light
1BC0 3436             (        light.asm):00015                 pshs d,x,y
1BC2 3702             (        light.asm):00016                 pulu a  ;get object from stack
1BC4 C613             (        light.asm):00017                 ldb #OBJ_ENTRY_SIZE
1BC6 3D               (        light.asm):00018                 mul
1BC7 1F01             (        light.asm):00019                 tfr d,x ; save offset
1BC9 1F02             (        light.asm):00020                 tfr d,y ; save offset
1BCB 30891EF4         (        light.asm):00021                 leax obj_table,x
1BCF A68812           (        light.asm):00022                 lda PROPERTY_BYTE_2,x
1BD2 8420             (        light.asm):00023                 anda #LIT_MASK
1BD4 8120             (        light.asm):00024                 cmpa #LIT_MASK  
1BD6 2606             (        light.asm):00025                 bne @s ; not emitting light, check children
1BD8 8601             (        light.asm):00026         @y      lda #1 ; emitting light, push 1 and return
1BDA 3602             (        light.asm):00027                 pshu a
1BDC 2042             (        light.asm):00028                 bra @x
1BDE 12               (        light.asm):00029         @s      nop     ; see if any children are emitting light
1BDF E684             (        light.asm):00030                 ldb OBJ_ID,x    ;reload id of parent
1BE1 8E1EF4           (        light.asm):00031                 ldx #obj_table  
1BE4 A684             (        light.asm):00032         @lp lda OBJ_ID,x    ;get obj id
1BE6 81FF             (        light.asm):00033                 cmpa #$ff       ;hit end of table?
1BE8 2732             (        light.asm):00034                 beq @n
1BEA E184             (        light.asm):00035                 cmpb OBJ_ID,x   ;is it this object?
1BEC 2729             (        light.asm):00036                 beq @c
1BEE E101             (        light.asm):00037                 cmpb HOLDER_ID,x ;is it a child of this object?
1BF0 2625             (        light.asm):00038                 bne @c
1BF2 A68812           (        light.asm):00039                 lda PROPERTY_BYTE_2,x   ;is the object a light source
1BF5 8420             (        light.asm):00040                 anda #LIT_MASK
1BF7 8120             (        light.asm):00041                 cmpa #LIT_MASK
1BF9 27DD             (        light.asm):00042                 beq @y
1BFB A684             (        light.asm):00043                 lda OBJ_ID,x            ;if we're the player check children
1BFD 8101             (        light.asm):00044                 cmpa #PLAYER
1BFF 270B             (        light.asm):00045                 beq @p
1C01 A68811           (        light.asm):00046                 lda PROPERTY_BYTE_1,x   ;is the object a closed container
1C04 8424             (        light.asm):00047                 anda #OPEN_CONTAINER_MASK       ;
1C06 8104             (        light.asm):00048                 cmpa #CONTAINER_MASK    ;               
1C08 260D             (        light.asm):00049                 bne @c
1C0A A684             (        light.asm):00050                 lda OBJ_ID,x     ;reload obj id
1C0C 3602             (        light.asm):00051         @p      pshu a                   ;put child id on stack 
1C0E BD1BC0           (        light.asm):00052                 jsr ambient_light ;is it emitting light
1C11 3702             (        light.asm):00053                 pulu a
1C13 8101             (        light.asm):00054                 cmpa #1
1C15 27C1             (        light.asm):00055                 beq @y                          
1C17 308813           (        light.asm):00056         @c  leax OBJ_ENTRY_SIZE,x ; go to next entry
1C1A 20C8             (        light.asm):00057                 bra @lp 
1C1C 8600             (        light.asm):00058         @n  lda #0
1C1E 3602             (        light.asm):00059                 pshu a  
1C20 3536             (        light.asm):00060         @x      puls y,x,d
1C22 39               (        light.asm):00061                 rts
                      (        light.asm):00062                 
                      (        light.asm):00063                 
                      (         main.asm):00052                 include locks.asm
                      (        locks.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        locks.asm):00002         ; containers.asm
                      (        locks.asm):00003         ; subroutines for manipulating
                      (        locks.asm):00004         ; containers 
                      (        locks.asm):00005         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        locks.asm):00006                 
1C23                  (        locks.asm):00007         lock_sub
1C23 39               (        locks.asm):00008                 rts
                      (        locks.asm):00009         
1C24                  (        locks.asm):00010         unlock_sub
1C24 39               (        locks.asm):00011                 rts
                      (         main.asm):00053                 ; include smell.asm ; now generated by tool
                      (         main.asm):00054                 ; include listen.asm ; now generated by tool
                      (         main.asm):00055                 include enter_sub.asm
                      (    enter_sub.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    enter_sub.asm):00002         ; enter_sub
                      (    enter_sub.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1C25                  (    enter_sub.asm):00004         enter_sub
1C25 3436             (    enter_sub.asm):00005                 pshs d,x,y
1C27 B611C8           (    enter_sub.asm):00006                 lda sentence+1
1C2A C613             (    enter_sub.asm):00007                 ldb #OBJ_ENTRY_SIZE
1C2C 3D               (    enter_sub.asm):00008                 mul
1C2D 1F01             (    enter_sub.asm):00009                 tfr d,x
1C2F 30891EF4         (    enter_sub.asm):00010                 leax obj_table,x
1C33 300E             (    enter_sub.asm):00011                 leax ENTER,x
1C35 A684             (    enter_sub.asm):00012                 lda ,x
1C37 81FF             (    enter_sub.asm):00013                 cmpa #$ff
1C39 260B             (    enter_sub.asm):00014                 bne @s
1C3B 8E1C56           (    enter_sub.asm):00015                 ldx #notenterable
1C3E BD1914           (    enter_sub.asm):00016                 jsr PRINT
1C41 BDB958           (    enter_sub.asm):00017                 jsr PRINTCR
1C44 200D             (    enter_sub.asm):00018                 bra @x
1C46 8E1EF4           (    enter_sub.asm):00019         @s  ldx #obj_table
1C49 308813           (    enter_sub.asm):00020                 leax OBJ_ENTRY_SIZE,x
1C4C 3001             (    enter_sub.asm):00021                 leax HOLDER_ID,x
1C4E A784             (    enter_sub.asm):00022                 sta ,x                  ;set player's new room
1C50 BD1746           (    enter_sub.asm):00023             jsr look_sub
1C53 3536             (    enter_sub.asm):00024         @x      puls y,x,d      
1C55 39               (    enter_sub.asm):00025                 rts
                      (    enter_sub.asm):00026                 
                      (    enter_sub.asm):00027                 
1C56 594F552043414E27 (    enter_sub.asm):00028         notenterable    .strz "YOU CAN'T ENTER THAT."
     5420454E54455220
     544841542E00
                      (         main.asm):00056                 include title_bar.asm
                      (    title_bar.asm):00001         ;title_bar.asm
                      (    title_bar.asm):00002         
     041B             (    title_bar.asm):00003         SCOREPOS equ 1051
                      (    title_bar.asm):00004         
1C6C                  (    title_bar.asm):00005         draw_bar
1C6C 3436             (    title_bar.asm):00006                 pshs d,x,y
1C6E 8600             (    title_bar.asm):00007                 lda #0
1C70 C620             (    title_bar.asm):00008                 ldb #32 ; blank
1C72 8E0400           (    title_bar.asm):00009                 ldx #1024
1C75 E786             (    title_bar.asm):00010         @lp stb a,x
1C77 4C               (    title_bar.asm):00011                 inca
1C78 8120             (    title_bar.asm):00012                 cmpa #32 ; end of line
1C7A 2702             (    title_bar.asm):00013                 beq @d  ;break
1C7C 20F7             (    title_bar.asm):00014                 bra @lp ; loop
1C7E 12               (    title_bar.asm):00015         @d  nop
1C7F BD1C88           (    title_bar.asm):00016                 jsr print_room_name
1C82 BD1CC0           (    title_bar.asm):00017                 jsr print_score
1C85 3536             (    title_bar.asm):00018                 puls y,x,d
1C87 39               (    title_bar.asm):00019                 rts
                      (    title_bar.asm):00020                 
1C88                  (    title_bar.asm):00021         print_room_name
1C88 3436             (    title_bar.asm):00022                 pshs d,x,y
1C8A 109E88           (    title_bar.asm):00023                 ldy 136 ; COCO cursor
1C8D 3420             (    title_bar.asm):00024                 pshs y  ; save cursor pos
1C8F 8E0400           (    title_bar.asm):00025                 ldx #1024
1C92 9F88             (    title_bar.asm):00026                 stx 136 ; top left
1C94 BD1BAC           (    title_bar.asm):00027                 jsr get_player_room ;get obj and leave it on stack
1C97 BD191E           (    title_bar.asm):00028                 jsr print_obj_name
1C9A BD1CA5           (    title_bar.asm):00029                 jsr invert_room
1C9D 3520             (    title_bar.asm):00030                 puls y          ; restore cursor pos
1C9F 109F88           (    title_bar.asm):00031                 sty 136
1CA2 3536             (    title_bar.asm):00032                 puls y,x,d
1CA4 39               (    title_bar.asm):00033                 rts
                      (    title_bar.asm):00034         
1CA5                  (    title_bar.asm):00035         invert_room
1CA5 3436             (    title_bar.asm):00036                 pshs d,x,y
1CA7 8E0400           (    title_bar.asm):00037                 ldx #1024
1CAA 8600             (    title_bar.asm):00038                 lda #0
1CAC 8118             (    title_bar.asm):00039         @lp cmpa #24
1CAE 270D             (    title_bar.asm):00040                 beq @x
1CB0 E686             (    title_bar.asm):00041                 ldb a,x
1CB2 C120             (    title_bar.asm):00042                 cmpb #32 ; don't invert blank
1CB4 2704             (    title_bar.asm):00043                 beq @s
1CB6 C040             (    title_bar.asm):00044                 subb #64 ;invert char
1CB8 E786             (    title_bar.asm):00045                 stb a,x ;store it back to mem
1CBA 4C               (    title_bar.asm):00046         @s  inca        
1CBB 20EF             (    title_bar.asm):00047                 bra @lp
1CBD 3536             (    title_bar.asm):00048         @x      puls y,x,d
1CBF 39               (    title_bar.asm):00049                 rts
                      (    title_bar.asm):00050         
                      (    title_bar.asm):00051         ;write "/100"
                      (    title_bar.asm):00052         ;then print the score next to it        
1CC0                  (    title_bar.asm):00053         print_score
1CC0 3436             (    title_bar.asm):00054                 pshs d,x,y
1CC2 862F             (    title_bar.asm):00055                 lda #47  ; inverse "/"
1CC4 B7041C           (    title_bar.asm):00056                 sta 1024+28
1CC7 8631             (    title_bar.asm):00057                 lda #49   ; inverse "1"
1CC9 B7041D           (    title_bar.asm):00058                 sta 1024+29
1CCC 8630             (    title_bar.asm):00059                 lda #48  ; inverse "0"
1CCE B7041E           (    title_bar.asm):00060                 sta 1024+30
1CD1 B7041F           (    title_bar.asm):00061                 sta 1024+31
1CD4 12               (    title_bar.asm):00062                 nop ; now print the score (right justified)
1CD5 B61D0C           (    title_bar.asm):00063                 lda score
1CD8 3602             (    title_bar.asm):00064                 pshu a ; save it
1CDA C60A             (    title_bar.asm):00065                 ldb #10
1CDC 8E041B           (    title_bar.asm):00066                 ldx #SCOREPOS
1CDF BD1D0D           (    title_bar.asm):00067                 jsr mod8        ; get rightmost digit
1CE2 8B30             (    title_bar.asm):00068                 adda #48        ; convert digit to inverse char 
1CE4 A784             (    title_bar.asm):00069             sta ,x              ; always draw 1 char
1CE6 301F             (    title_bar.asm):00070                 leax -1,x
1CE8 3702             (    title_bar.asm):00071                 pulu a
1CEA C60A             (    title_bar.asm):00072                 ldb #10         ;divide score by 10 (shift it right)
1CEC BD1D32           (    title_bar.asm):00073                 jsr div8
1CEF 8100             (    title_bar.asm):00074         @lp     cmpa #0         ; score > 0
1CF1 2716             (    title_bar.asm):00075                 beq @x
1CF3 3602             (    title_bar.asm):00076                 pshu a          ;save score
1CF5 C60A             (    title_bar.asm):00077                 ldb #10
1CF7 BD1D0D           (    title_bar.asm):00078                 jsr mod8        ; get rightmost digit
1CFA 8B30             (    title_bar.asm):00079                 adda #48        ; convert digit to inverse char 
1CFC A784             (    title_bar.asm):00080             sta ,x      ; draw char
1CFE 301F             (    title_bar.asm):00081                 leax -1,x
1D00 3702             (    title_bar.asm):00082                 pulu a          ; restore score
1D02 C60A             (    title_bar.asm):00083                 ldb #10         ;divide score by 10 (shift it right)
1D04 BD1D32           (    title_bar.asm):00084                 jsr div8
1D07 20E6             (    title_bar.asm):00085                 bra @lp
1D09 3536             (    title_bar.asm):00086         @x      puls y,x,d
1D0B 39               (    title_bar.asm):00087                 rts
                      (    title_bar.asm):00088         
                      (    title_bar.asm):00089                 
1D0C 00               (    title_bar.asm):00090         score .db 0
                      (         main.asm):00057                 include math.asm
                      (         math.asm):00001         ;mod10
                      (         math.asm):00002         
                      (         math.asm):00003         ;a contains value
                      (         math.asm):00004         ;b contains mod
1D0D                  (         math.asm):00005         mod8
1D0D 3430             (         math.asm):00006                 pshs x,y
1D0F 3604             (         math.asm):00007                 pshu b
1D11 A1C4             (         math.asm):00008         @lp     cmpa ,u
1D13 2B04             (         math.asm):00009                 bmi @x
1D15 A0C4             (         math.asm):00010                 suba ,u ; subtract value
1D17 20F8             (         math.asm):00011                 bra @lp
1D19 3341             (         math.asm):00012         @x  leau 1,u ; remove val we pushed
1D1B 3530             (         math.asm):00013                 puls y,x
1D1D 39               (         math.asm):00014                 rts
                      (         math.asm):00015         
                      (         math.asm):00016         ;16 bit mod
                      (         math.asm):00017         ;top of stack is number
                      (         math.asm):00018         ;under it is divisor
                      (         math.asm):00019         ;the result is returned on the stack
1D1E                  (         math.asm):00020         mod2b
1D1E 3436             (         math.asm):00021                 pshs d,x,y
1D20 3706             (         math.asm):00022                 pulu d ; get number
1D22 10A3C4           (         math.asm):00023         @lp cmpd ,u
1D25 2D04             (         math.asm):00024                 blt @x
1D27 A3C4             (         math.asm):00025                 subd ,u
1D29 20F7             (         math.asm):00026                 bra @lp
1D2B 3710             (         math.asm):00027         @x      pulu x  ; pop divisor
1D2D 3606             (         math.asm):00028                 pshu d ; put result on stack
1D2F 3536             (         math.asm):00029                 puls y,x,d
1D31 39               (         math.asm):00030                 rts
                      (         math.asm):00031                         
                      (         math.asm):00032         ;divide a by b
                      (         math.asm):00033         ;result in a
1D32                  (         math.asm):00034         div8
1D32 3430             (         math.asm):00035                 pshs x,y
1D34 3604             (         math.asm):00036                 pshu b  ; push divisor
1D36 C600             (         math.asm):00037                 ldb #0  ; pushs result
1D38 3604             (         math.asm):00038                 pshu b  ; 
1D3A A141             (         math.asm):00039         @lp cmpa 1,u
1D3C 2B06             (         math.asm):00040             bmi @x
1D3E A041             (         math.asm):00041                 suba 1,u
1D40 6CC4             (         math.asm):00042                 inc  ,u ; 
1D42 20F6             (         math.asm):00043                 bra @lp
1D44 A6C4             (         math.asm):00044         @x  lda ,u  ; put result in reg a
1D46 3342             (         math.asm):00045                 leau 2,u ; pop 2 params leaving result on stack
1D48 3530             (         math.asm):00046                 puls y,x
1D4A 39               (         math.asm):00047                 rts
                      (         math.asm):00048         
                      (         main.asm):00058                 include cls.asm
                      (          cls.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (          cls.asm):00002         ;CLS
                      (          cls.asm):00003         ;CLEARS SCREEN
                      (          cls.asm):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1D4B                  (          cls.asm):00005         cls
1D4B 3436             (          cls.asm):00006                 pshs d,x,y  ; save registers
1D4D 108E0000         (          cls.asm):00007                 ldy #0
1D51 8660             (          cls.asm):00008                 lda #96 blank space     
1D53 8E0400           (          cls.asm):00009                 ldx #1024
1D56 A780             (          cls.asm):00010         @a      sta ,x+
1D58 3121             (          cls.asm):00011                 leay 1,y        ; inc loop counter
1D5A 108C0200         (          cls.asm):00012                 cmpy #512  ; bottom of screen mem
1D5E 26F6             (          cls.asm):00013                 bne @a
1D60 3536             (          cls.asm):00014                 puls y,x,d  ; restore registers
1D62 39               (          cls.asm):00015                 rts
                      (         main.asm):00059                 include quit.asm
                      (         quit.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         quit.asm):00002         ;handles quitting
                      (         quit.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1D63                  (         quit.asm):00004         quit_sub
1D63 12               (         quit.asm):00005                 nop ; confirm?
1D64 8E1D72           (         quit.asm):00006                 ldx #bye
1D67 BD1914           (         quit.asm):00007                 jsr PRINT
1D6A BDB958           (         quit.asm):00008                 jsr PRINTCR
1D6D 12               (         quit.asm):00009                 nop ; need to execute a 'new'
1D6E 16F0D0           (         quit.asm):00010                 lbra quit ; reset stacks and exit
1D71 39               (         quit.asm):00011                 rts
                      (         quit.asm):00012                 
1D72 4259452E00       (         quit.asm):00013         bye .strz "BYE."        
                      (         main.asm):00060                 include Dictionary6809.asm
                      (Dictionary6809.as):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (Dictionary6809.as):00002         ; Dictionary6809.asm
                      (Dictionary6809.as):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (Dictionary6809.as):00004         
1D77                  (Dictionary6809.as):00005         dictionary
1D77 09               (Dictionary6809.as):00006                 .db 9
1D78 4F46465343524545 (Dictionary6809.as):00007                 .strz "OFFSCREEN" ; 0
     4E00
1D82 06               (Dictionary6809.as):00008                 .db 6
1D83 504C4159455200   (Dictionary6809.as):00009                 .strz "PLAYER" ; 1
1D8A 02               (Dictionary6809.as):00010                 .db 2
1D8B 4D4500           (Dictionary6809.as):00011                 .strz "ME" ; 2
1D8E 04               (Dictionary6809.as):00012                 .db 4
1D8F 53454C4600       (Dictionary6809.as):00013                 .strz "SELF" ; 3
1D94 06               (Dictionary6809.as):00014                 .db 6
1D95 4E4152524F5700   (Dictionary6809.as):00015                 .strz "NARROW" ; 4
1D9C 05               (Dictionary6809.as):00016                 .db 5
1D9D 414C4C455900     (Dictionary6809.as):00017                 .strz "ALLEY" ; 5
1DA3 06               (Dictionary6809.as):00018                 .db 6
1DA4 54415244495300   (Dictionary6809.as):00019                 .strz "TARDIS" ; 6
1DAB 04               (Dictionary6809.as):00020                 .db 4
1DAC 424C554500       (Dictionary6809.as):00021                 .strz "BLUE" ; 7
1DB1 06               (Dictionary6809.as):00022                 .db 6
1DB2 504F4C49434500   (Dictionary6809.as):00023                 .strz "POLICE" ; 8
1DB9 03               (Dictionary6809.as):00024                 .db 3
1DBA 424F5800         (Dictionary6809.as):00025                 .strz "BOX" ; 9
1DBE 06               (Dictionary6809.as):00026                 .db 6
1DBF 494E5349444500   (Dictionary6809.as):00027                 .strz "INSIDE" ; 10
1DC6 04               (Dictionary6809.as):00028                 .db 4
1DC7 4E4F544500       (Dictionary6809.as):00029                 .strz "NOTE" ; 11
1DCC 04               (Dictionary6809.as):00030                 .db 4
1DCD 4255535900       (Dictionary6809.as):00031                 .strz "BUSY" ; 12
1DD2 0C               (Dictionary6809.as):00032                 .db 12
1DD3 494E544552534543 (Dictionary6809.as):00033                 .strz "INTERSECTION" ; 13
     54494F4E00
1DE0 05               (Dictionary6809.as):00034                 .db 5
1DE1 4E4F52544800     (Dictionary6809.as):00035                 .strz "NORTH" ; 14
1DE7 06               (Dictionary6809.as):00036                 .db 6
1DE8 53545245455400   (Dictionary6809.as):00037                 .strz "STREET" ; 15
1DEF 04               (Dictionary6809.as):00038                 .db 4
1DF0 4541535400       (Dictionary6809.as):00039                 .strz "EAST" ; 16
1DF5 03               (Dictionary6809.as):00040                 .db 3
1DF6 31535400         (Dictionary6809.as):00041                 .strz "1ST" ; 17
1DFA 05               (Dictionary6809.as):00042                 .db 5
1DFB 464C4F4F5200     (Dictionary6809.as):00043                 .strz "FLOOR" ; 18
1E01 03               (Dictionary6809.as):00044                 .db 3
1E02 324E4400         (Dictionary6809.as):00045                 .strz "2ND" ; 19
1E06 08               (Dictionary6809.as):00046                 .db 8
1E07 424153454D454E54 (Dictionary6809.as):00047                 .strz "BASEMENT" ; 20
     00
1E10 09               (Dictionary6809.as):00048                 .db 9
1E11 494E56454E544F52 (Dictionary6809.as):00049                 .strz "INVENTORY" ; 21
     5900
1E1B 04               (Dictionary6809.as):00050                 .db 4
1E1C 524F4F4D00       (Dictionary6809.as):00051                 .strz "ROOM" ; 22
1E21 04               (Dictionary6809.as):00052                 .db 4
1E22 444F4F5200       (Dictionary6809.as):00053                 .strz "DOOR" ; 23
1E27 05               (Dictionary6809.as):00054                 .db 5
1E28 4C4F42425900     (Dictionary6809.as):00055                 .strz "LOBBY" ; 24
1E2E 08               (Dictionary6809.as):00056                 .db 8
1E2F 454C455641544F52 (Dictionary6809.as):00057                 .strz "ELEVATOR" ; 25
     00
1E38 06               (Dictionary6809.as):00058                 .db 6
1E39 425554544F4E00   (Dictionary6809.as):00059                 .strz "BUTTON" ; 26
1E40 07               (Dictionary6809.as):00060                 .db 7
1E41 48414C4C57415900 (Dictionary6809.as):00061                 .strz "HALLWAY" ; 27
1E49 06               (Dictionary6809.as):00062                 .db 6
1E4A 524F5345275300   (Dictionary6809.as):00063                 .strz "ROSE'S" ; 28
1E51 09               (Dictionary6809.as):00064                 .db 9
1E52 41504152544D454E (Dictionary6809.as):00065                 .strz "APARTMENT" ; 29
     5400
1E5C 09               (Dictionary6809.as):00066                 .db 9
1E5D 4D414E4E45515549 (Dictionary6809.as):00067                 .strz "MANNEQUIN" ; 30
     4E00
1E67 07               (Dictionary6809.as):00068                 .db 7
1E68 435249434B455400 (Dictionary6809.as):00069                 .strz "CRICKET" ; 31
1E70 03               (Dictionary6809.as):00070                 .db 3
1E71 42415400         (Dictionary6809.as):00071                 .strz "BAT" ; 32
1E75 04               (Dictionary6809.as):00072                 .db 4
1E76 524F534500       (Dictionary6809.as):00073                 .strz "ROSE" ; 33
1E7B 05               (Dictionary6809.as):00074                 .db 5
1E7C 44414C454B00     (Dictionary6809.as):00075                 .strz "DALEK" ; 34
1E82 03               (Dictionary6809.as):00076                 .db 3
1E83 48415400         (Dictionary6809.as):00077                 .strz "HAT" ; 35
1E87 06               (Dictionary6809.as):00078                 .db 6
1E88 4645444F524100   (Dictionary6809.as):00079                 .strz "FEDORA" ; 36
1E8F 07               (Dictionary6809.as):00080                 .db 7
1E90 504C415354494300 (Dictionary6809.as):00081                 .strz "PLASTIC" ; 37
1E98 04               (Dictionary6809.as):00082                 .db 4
1E99 4845414400       (Dictionary6809.as):00083                 .strz "HEAD" ; 38
1E9E 05               (Dictionary6809.as):00084                 .db 5
1E9F 544F52534F00     (Dictionary6809.as):00085                 .strz "TORSO" ; 39
1EA5 05               (Dictionary6809.as):00086                 .db 5
1EA6 534F4E494300     (Dictionary6809.as):00087                 .strz "SONIC" ; 40
1EAC 0B               (Dictionary6809.as):00088                 .db 11
1EAD 5343524557445249 (Dictionary6809.as):00089                 .strz "SCREWDRIVER" ; 41
     56455200
1EB9 05               (Dictionary6809.as):00090                 .db 5
1EBA 534352455700     (Dictionary6809.as):00091                 .strz "SCREW" ; 42
1EC0 06               (Dictionary6809.as):00092                 .db 6
1EC1 44524956455200   (Dictionary6809.as):00093                 .strz "DRIVER" ; 43
1EC8 08               (Dictionary6809.as):00094                 .db 8
1EC9 4559455354414C4B (Dictionary6809.as):00095                 .strz "EYESTALK" ; 44
     00
1ED2 07               (Dictionary6809.as):00096                 .db 7
1ED3 504C554E47455200 (Dictionary6809.as):00097                 .strz "PLUNGER" ; 45
1EDB 03               (Dictionary6809.as):00098                 .db 3
1EDC 45594500         (Dictionary6809.as):00099                 .strz "EYE" ; 46
1EE0 05               (Dictionary6809.as):00100                 .db 5
1EE1 5354414C4B00     (Dictionary6809.as):00101                 .strz "STALK" ; 47
1EE7 0A               (Dictionary6809.as):00102                 .db 10
1EE8 5452454E5A414C4F (Dictionary6809.as):00103                 .strz "TRENZALORE" ; 48
     524500
1EF3 00               (Dictionary6809.as):00104                 .db 0
                      (         main.asm):00061                 include ObjectTable6809.asm
                      (ObjectTable6809.a):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (ObjectTable6809.a):00002         ; OBJECT_TABLE
                      (ObjectTable6809.a):00003         ; FORMAT: ID,HOLDER,INITIAL DESC,DESC,N,S,E,W,NE,SE,SW,NW,UP,DOWN,OUT,MASS
                      (ObjectTable6809.a):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (ObjectTable6809.a):00005         
1EF4                  (ObjectTable6809.a):00006         obj_table
1EF4 0000FF00FFFFFFFF (ObjectTable6809.a):00007                 .db 0,0,255,0,255,255,255,255,255,255,255,255,255,255,255,255,0   ; OFFSCREEN
     FFFFFFFFFFFFFFFF
     00
1F05 00               (ObjectTable6809.a):00008                 .db 0    ;  flags 1 - 8
1F06 00               (ObjectTable6809.a):00009                 .db 0    ;  flags 9 - 16
1F07 0102FF01FFFFFFFF (ObjectTable6809.a):00010                 .db 1,2,255,1,255,255,255,255,255,255,255,255,255,255,255,255,0   ; PLAYER
     FFFFFFFFFFFFFFFF
     00
1F18 00               (ObjectTable6809.a):00011                 .db 0    ;  flags 1 - 8
1F19 00               (ObjectTable6809.a):00012                 .db 0    ;  flags 9 - 16
1F1A 0200FF0206FFFFFF (ObjectTable6809.a):00013                 .db 2,0,255,2,6,255,255,255,255,255,255,255,255,255,255,255,0   ; NARROW ALLEY
     FFFFFFFFFFFFFFFF
     00
1F2B 00               (ObjectTable6809.a):00014                 .db 0    ;  flags 1 - 8
1F2C 20               (ObjectTable6809.a):00015                 .db EMITTING_LIGHT_MASK ; flags 9-16
1F2D 03020403FFFFFFFF (ObjectTable6809.a):00016                 .db 3,2,4,3,255,255,255,255,255,255,255,255,255,255,255,255,0   ; TARDIS
     FFFFFFFFFFFFFFFF
     00
1F3E 10               (ObjectTable6809.a):00017                 .db OPENABLE_MASK ; flags 1-8
1F3F 00               (ObjectTable6809.a):00018                 .db 0    ;  flags 9 - 16
1F40 0400FF05FFFFFF02 (ObjectTable6809.a):00019                 .db 4,0,255,5,255,255,255,2,255,255,255,255,255,255,255,2,0   ; INSIDE TARDIS
     FFFFFFFFFFFFFF02
     00
1F51 00               (ObjectTable6809.a):00020                 .db 0    ;  flags 1 - 8
1F52 20               (ObjectTable6809.a):00021                 .db EMITTING_LIGHT_MASK ; flags 9-16
1F53 05040603FFFFFFFF (ObjectTable6809.a):00022                 .db 5,4,6,3,255,255,255,255,255,255,255,255,255,255,255,255,0   ; NOTE
     FFFFFFFFFFFFFFFF
     00
1F64 00               (ObjectTable6809.a):00023                 .db 0    ;  flags 1 - 8
1F65 01               (ObjectTable6809.a):00024                 .db PORTABLE_MASK ; flags 9-16
1F66 0600FF07070208FF (ObjectTable6809.a):00025                 .db 6,0,255,7,7,2,8,255,255,255,255,255,255,255,255,255,0   ; BUSY INTERSECTION
     FFFFFFFFFFFFFFFF
     00
1F77 00               (ObjectTable6809.a):00026                 .db 0    ;  flags 1 - 8
1F78 20               (ObjectTable6809.a):00027                 .db EMITTING_LIGHT_MASK ; flags 9-16
1F79 0700FF08FF06FF0E (ObjectTable6809.a):00028                 .db 7,0,255,8,255,6,255,14,255,255,255,255,255,255,255,255,0   ; NORTH STREET
     FFFFFFFFFFFFFFFF
     00
1F8A 00               (ObjectTable6809.a):00029                 .db 0    ;  flags 1 - 8
1F8B 20               (ObjectTable6809.a):00030                 .db EMITTING_LIGHT_MASK ; flags 9-16
1F8C 0800FF0909FFFF06 (ObjectTable6809.a):00031                 .db 8,0,255,9,9,255,255,6,255,255,255,255,255,255,255,255,0   ; EAST STREET
     FFFFFFFFFFFFFFFF
     00
1F9D 00               (ObjectTable6809.a):00032                 .db 0    ;  flags 1 - 8
1F9E 20               (ObjectTable6809.a):00033                 .db EMITTING_LIGHT_MASK ; flags 9-16
1F9F 0900FF0AFF08FFFF (ObjectTable6809.a):00034                 .db 9,0,255,10,255,8,255,255,255,255,255,255,10,11,255,255,0   ; 1ST FLOOR
     FFFFFFFF0A0BFFFF
     00
1FB0 00               (ObjectTable6809.a):00035                 .db 0    ;  flags 1 - 8
1FB1 20               (ObjectTable6809.a):00036                 .db EMITTING_LIGHT_MASK ; flags 9-16
1FB2 0A00FF0BFFFFFFFF (ObjectTable6809.a):00037                 .db 10,0,255,11,255,255,255,255,255,255,255,255,255,9,255,255,0   ; 2ND FLOOR
     FFFFFFFFFF09FFFF
     00
1FC3 00               (ObjectTable6809.a):00038                 .db 0    ;  flags 1 - 8
1FC4 20               (ObjectTable6809.a):00039                 .db EMITTING_LIGHT_MASK ; flags 9-16
1FC5 0B00FF0CFF0CFFFF (ObjectTable6809.a):00040                 .db 11,0,255,12,255,12,255,255,255,255,255,255,9,255,255,255,0   ; BASEMENT
     FFFFFFFF09FFFFFF
     00
1FD6 00               (ObjectTable6809.a):00041                 .db 0    ;  flags 1 - 8
1FD7 20               (ObjectTable6809.a):00042                 .db EMITTING_LIGHT_MASK ; flags 9-16
1FD8 0C00FF0D0BFFFFFF (ObjectTable6809.a):00043                 .db 12,0,255,13,11,255,255,255,255,255,255,255,255,255,255,255,0   ; INVENTORY ROOM
     FFFFFFFFFFFFFFFF
     00
1FE9 00               (ObjectTable6809.a):00044                 .db 0    ;  flags 1 - 8
1FEA 20               (ObjectTable6809.a):00045                 .db EMITTING_LIGHT_MASK ; flags 9-16
1FEB 0D0BFF03FF0DFFFF (ObjectTable6809.a):00046                 .db 13,11,255,3,255,13,255,255,255,255,255,255,255,255,255,255,0   ; DOOR
     FFFFFFFFFFFFFFFF
     00
1FFC D1               (ObjectTable6809.a):00047                 .db SCENERY_MASK|OPENABLE_MASK|LOCKABLE_MASK|LOCKED_MASK ; flags 1-8
1FFD 40               (ObjectTable6809.a):00048                 .db DOOR_MASK ; flags 9-16
1FFE 0E00FF0EFFFF070F (ObjectTable6809.a):00049                 .db 14,0,255,14,255,255,7,15,255,255,255,255,255,255,255,255,0   ; LOBBY
     FFFFFFFFFFFFFFFF
     00
200F 00               (ObjectTable6809.a):00050                 .db 0    ;  flags 1 - 8
2010 20               (ObjectTable6809.a):00051                 .db EMITTING_LIGHT_MASK ; flags 9-16
2011 0F00FF0FFFFF0EFF (ObjectTable6809.a):00052                 .db 15,0,255,15,255,255,14,255,255,255,255,255,255,255,255,255,0   ; ELEVATOR
     FFFFFFFFFFFFFFFF
     00
2022 00               (ObjectTable6809.a):00053                 .db 0    ;  flags 1 - 8
2023 20               (ObjectTable6809.a):00054                 .db EMITTING_LIGHT_MASK ; flags 9-16
2024 100F1003FFFFFFFF (ObjectTable6809.a):00055                 .db 16,15,16,3,255,255,255,255,255,255,255,255,255,255,255,255,0   ; BUTTON
     FFFFFFFFFFFFFFFF
     00
2035 00               (ObjectTable6809.a):00056                 .db 0    ;  flags 1 - 8
2036 00               (ObjectTable6809.a):00057                 .db 0    ;  flags 9 - 16
2037 1100FF11FFFF120F (ObjectTable6809.a):00058                 .db 17,0,255,17,255,255,18,15,255,255,255,255,255,255,255,255,0   ; HALLWAY
     FFFFFFFFFFFFFFFF
     00
2048 00               (ObjectTable6809.a):00059                 .db 0    ;  flags 1 - 8
2049 20               (ObjectTable6809.a):00060                 .db EMITTING_LIGHT_MASK ; flags 9-16
204A 1200FF12FFFFFF11 (ObjectTable6809.a):00061                 .db 18,0,255,18,255,255,255,17,255,255,255,255,255,255,255,17,0   ; ROSE'S APARTMENT
     FFFFFFFFFFFFFF11
     00
205B 00               (ObjectTable6809.a):00062                 .db 0    ;  flags 1 - 8
205C 20               (ObjectTable6809.a):00063                 .db EMITTING_LIGHT_MASK ; flags 9-16
205D 13091413FFFFFFFF (ObjectTable6809.a):00064                 .db 19,9,20,19,255,255,255,255,255,255,255,255,255,255,255,255,0   ; MANNEQUIN
     FFFFFFFFFFFFFFFF
     00
206E 00               (ObjectTable6809.a):00065                 .db 0    ;  flags 1 - 8
206F 00               (ObjectTable6809.a):00066                 .db 0    ;  flags 9 - 16
2070 140A1615FFFFFFFF (ObjectTable6809.a):00067                 .db 20,10,22,21,255,255,255,255,255,255,255,255,255,255,255,255,0   ; CRICKET BAT
     FFFFFFFFFFFFFFFF
     00
2081 00               (ObjectTable6809.a):00068                 .db 0    ;  flags 1 - 8
2082 01               (ObjectTable6809.a):00069                 .db PORTABLE_MASK ; flags 9-16
2083 150C1703FFFFFFFF (ObjectTable6809.a):00070                 .db 21,12,23,3,255,255,255,255,255,255,255,255,255,255,255,255,0   ; ROSE
     FFFFFFFFFFFFFFFF
     00
2094 00               (ObjectTable6809.a):00071                 .db 0    ;  flags 1 - 8
2095 00               (ObjectTable6809.a):00072                 .db 0    ;  flags 9 - 16
2096 16001918FFFFFFFF (ObjectTable6809.a):00073                 .db 22,0,25,24,255,255,255,255,255,255,255,255,255,255,255,255,0   ; DALEK
     FFFFFFFFFFFFFFFF
     00
20A7 02               (ObjectTable6809.a):00074                 .db SUPPORTER_MASK ; flags 1-8
20A8 00               (ObjectTable6809.a):00075                 .db 0    ;  flags 9 - 16
20A9 17091B1AFFFFFFFF (ObjectTable6809.a):00076                 .db 23,9,27,26,255,255,255,255,255,255,255,255,255,255,255,255,0   ; HAT
     FFFFFFFFFFFFFFFF
     00
20BA 00               (ObjectTable6809.a):00077                 .db 0    ;  flags 1 - 8
20BB 01               (ObjectTable6809.a):00078                 .db PORTABLE_MASK ; flags 9-16
20BC 18001D1CFFFFFFFF (ObjectTable6809.a):00079                 .db 24,0,29,28,255,255,255,255,255,255,255,255,255,255,255,255,0   ; PLASTIC HEAD
     FFFFFFFFFFFFFFFF
     00
20CD 00               (ObjectTable6809.a):00080                 .db 0    ;  flags 1 - 8
20CE 01               (ObjectTable6809.a):00081                 .db PORTABLE_MASK ; flags 9-16
20CF 19001F1EFFFFFFFF (ObjectTable6809.a):00082                 .db 25,0,31,30,255,255,255,255,255,255,255,255,255,255,255,255,0   ; TORSO
     FFFFFFFFFFFFFFFF
     00
20E0 00               (ObjectTable6809.a):00083                 .db 0    ;  flags 1 - 8
20E1 00               (ObjectTable6809.a):00084                 .db 0    ;  flags 9 - 16
20E2 1A12FF20FFFFFFFF (ObjectTable6809.a):00085                 .db 26,18,255,32,255,255,255,255,255,255,255,255,255,255,255,255,0   ; SONIC SCREWDRIVER
     FFFFFFFFFFFFFFFF
     00
20F3 00               (ObjectTable6809.a):00086                 .db 0    ;  flags 1 - 8
20F4 01               (ObjectTable6809.a):00087                 .db PORTABLE_MASK ; flags 9-16
20F5 1B16FF21FFFFFFFF (ObjectTable6809.a):00088                 .db 27,22,255,33,255,255,255,255,255,255,255,255,255,255,255,255,0   ; EYESTALK
     FFFFFFFFFFFFFFFF
     00
2106 01               (ObjectTable6809.a):00089                 .db SCENERY_MASK ; flags 1-8
2107 00               (ObjectTable6809.a):00090                 .db 0    ;  flags 9 - 16
2108 1C00FF22FFFFFFFF (ObjectTable6809.a):00091                 .db 28,0,255,34,255,255,255,255,255,255,255,255,255,255,255,255,0   ; TRENZALORE
     FFFFFFFFFFFFFFFF
     00
2119 00               (ObjectTable6809.a):00092                 .db 0    ;  flags 1 - 8
211A 20               (ObjectTable6809.a):00093                 .db EMITTING_LIGHT_MASK ; flags 9-16
211B FF               (ObjectTable6809.a):00094                 .db 255
                      (         main.asm):00062                 include ObjectWordTable6809.asm
                      (ObjectWordTable68):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (ObjectWordTable68):00002         ; OBJECT WORD TABLE
                      (ObjectWordTable68):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (ObjectWordTable68):00004         
211C                  (ObjectWordTable68):00005         obj_word_table
211C 0000FFFF         (ObjectWordTable68):00006                 .db 0,0,255,255   ;   OFFSCREEN
2120 0101FFFF         (ObjectWordTable68):00007                 .db 1,1,255,255   ;   PLAYER
2124 020405FF         (ObjectWordTable68):00008                 .db 2,4,5,255   ;   NARROW ALLEY
2128 0306FFFF         (ObjectWordTable68):00009                 .db 3,6,255,255   ;   TARDIS
212C 040A06FF         (ObjectWordTable68):00010                 .db 4,10,6,255   ;   INSIDE TARDIS
2130 050BFFFF         (ObjectWordTable68):00011                 .db 5,11,255,255   ;   NOTE
2134 060C0DFF         (ObjectWordTable68):00012                 .db 6,12,13,255   ;   BUSY INTERSECTION
2138 070E0FFF         (ObjectWordTable68):00013                 .db 7,14,15,255   ;   NORTH STREET
213C 08100FFF         (ObjectWordTable68):00014                 .db 8,16,15,255   ;   EAST STREET
2140 091112FF         (ObjectWordTable68):00015                 .db 9,17,18,255   ;   1ST FLOOR
2144 0A1312FF         (ObjectWordTable68):00016                 .db 10,19,18,255   ;   2ND FLOOR
2148 0B14FFFF         (ObjectWordTable68):00017                 .db 11,20,255,255   ;   BASEMENT
214C 0C1516FF         (ObjectWordTable68):00018                 .db 12,21,22,255   ;   INVENTORY ROOM
2150 0D17FFFF         (ObjectWordTable68):00019                 .db 13,23,255,255   ;   DOOR
2154 0E18FFFF         (ObjectWordTable68):00020                 .db 14,24,255,255   ;   LOBBY
2158 0F19FFFF         (ObjectWordTable68):00021                 .db 15,25,255,255   ;   ELEVATOR
215C 101AFFFF         (ObjectWordTable68):00022                 .db 16,26,255,255   ;   BUTTON
2160 111BFFFF         (ObjectWordTable68):00023                 .db 17,27,255,255   ;   HALLWAY
2164 121C1DFF         (ObjectWordTable68):00024                 .db 18,28,29,255   ;   ROSE'S APARTMENT
2168 131EFFFF         (ObjectWordTable68):00025                 .db 19,30,255,255   ;   MANNEQUIN
216C 141F20FF         (ObjectWordTable68):00026                 .db 20,31,32,255   ;   CRICKET BAT
2170 1521FFFF         (ObjectWordTable68):00027                 .db 21,33,255,255   ;   ROSE
2174 1622FFFF         (ObjectWordTable68):00028                 .db 22,34,255,255   ;   DALEK
2178 1723FFFF         (ObjectWordTable68):00029                 .db 23,35,255,255   ;   HAT
217C 182526FF         (ObjectWordTable68):00030                 .db 24,37,38,255   ;   PLASTIC HEAD
2180 1927FFFF         (ObjectWordTable68):00031                 .db 25,39,255,255   ;   TORSO
2184 1A2829FF         (ObjectWordTable68):00032                 .db 26,40,41,255   ;   SONIC SCREWDRIVER
2188 1B2CFFFF         (ObjectWordTable68):00033                 .db 27,44,255,255   ;   EYESTALK
218C 1C30FFFF         (ObjectWordTable68):00034                 .db 28,48,255,255   ;   TRENZALORE
2190 00FFFFFF         (ObjectWordTable68):00035                 .db 0,-1,255,255   ;   synonyms for OFFSCREEN
2194 010203FF         (ObjectWordTable68):00036                 .db 1,2,3,255   ;   synonyms for PLAYER
2198 03070809         (ObjectWordTable68):00037                 .db 3,7,8,9   ;   synonyms for TARDIS
219C 08FFFFFF         (ObjectWordTable68):00038                 .db 8,-1,255,255   ;   synonyms for EAST STREET
21A0 16FFFFFF         (ObjectWordTable68):00039                 .db 22,-1,255,255   ;   synonyms for DALEK
21A4 1724FFFF         (ObjectWordTable68):00040                 .db 23,36,255,255   ;   synonyms for HAT
21A8 1A2A2BFF         (ObjectWordTable68):00041                 .db 26,42,43,255   ;   synonyms for SONIC SCREWDRIVER
21AC 1B2D2E2F         (ObjectWordTable68):00042                 .db 27,45,46,47   ;   synonyms for EYESTALK
21B0 1CFFFFFF         (ObjectWordTable68):00043                 .db 28,-1,255,255   ;   synonyms for TRENZALORE
21B4 FF               (ObjectWordTable68):00044                 .db 255
21B5 1D               (ObjectWordTable68):00045         obj_table_size  .db 29
                      (         main.asm):00063                 include DescriptionTable6809.asm
                      (DescriptionTable6):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (DescriptionTable6):00002         ; DescriptionTable6809.asm
                      (DescriptionTable6):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (DescriptionTable6):00004         
21B6                  (DescriptionTable6):00005         description_table
21B6 3B               (DescriptionTable6):00006                 .db 59
21B7 4F46465354414745 (DescriptionTable6):00007                 .strz "OFFSTAGE.  MOVE OBJECTS HERE TO REMOVE THEM FROM THE WORLD." ; 0
     2E20204D4F564520
     4F424A4543545320
     4845524520544F20
     52454D4F56452054
     48454D2046524F4D
     2054484520574F52
     4C442E00
21F3 41               (DescriptionTable6):00008                 .db 65
21F4 594F552752452041 (DescriptionTable6):00009                 .strz "YOU'RE A WONDERFUL PERSON. YOU SHOULDN'T CARE WHAT YOU LOOK LIKE." ; 1
     20574F4E44455246
     554C20504552534F
     4E2E20594F552053
     484F554C444E2754
     2043415245205748
     415420594F55204C
     4F4F4B204C494B45
     2E00
2236 17               (DescriptionTable6):00010                 .db 23
2237 5448495320495320 (DescriptionTable6):00011                 .strz "THIS IS A NARROW ALLEY." ; 2
     41204E4152524F57
     20414C4C45592E00
224F 1E               (DescriptionTable6):00012                 .db 30
2250 594F55204E4F5449 (DescriptionTable6):00013                 .strz "YOU NOTICE NOTHING UNEXPECTED." ; 3
     4345204E4F544849
     4E4720554E455850
     45435445442E00
226F 1F               (DescriptionTable6):00014                 .db 31
2270 4120424C55452050 (DescriptionTable6):00015                 .strz "A BLUE POLICE BOX STANDS NEARBY" ; 4
     4F4C49434520424F
     58205354414E4453
     204E454152425900
2290 53               (DescriptionTable6):00016                 .db 83
2291 415320594F552045 (DescriptionTable6):00017                 .strz "AS YOU ENTER THE TARDIS, YOU REALIZE THAT IT IS MUCH BIGGER ON THE INSIDE THAN OUT." ; 5
     4E54455220544845
     205441524449532C
     20594F5520524541
     4C495A4520544841
     5420495420495320
     4D55434820424947
     474552204F4E2054
     484520494E534944
     45205448414E204F
     55542E00
22E5 29               (DescriptionTable6):00018                 .db 41
22E6 4120534D414C4C20 (DescriptionTable6):00019                 .strz "A SMALL NOTE LIES ON ONE OF THE CONSOLES." ; 6
     4E4F5445204C4945
     53204F4E204F4E45
     204F462054484520
     434F4E534F4C4553
     2E00
2310 6F               (DescriptionTable6):00020                 .db 111
2311 5448495320495320 (DescriptionTable6):00021                 .strz "THIS IS A BUSY INTERSECTION.  STREETS LEAD NORTH AND EAST.  AN ALLEY LEADS SOUTH.  TRAFFIC BLOCKS THE WAY WEST." ; 7
     4120425553592049
     4E54455253454354
     494F4E2E20205354
     5245455453204C45
     4144204E4F525448
     20414E4420454153
     542E2020414E2041
     4C4C4559204C4541
     445320534F555448
     2E20205452414646
     494320424C4F434B
     5320544845205741
     5920574553542E00
2381 43               (DescriptionTable6):00022                 .db 67
2382 5448495320495320 (DescriptionTable6):00023                 .strz "THIS IS A BUSY LONDON STREET.  ROSE'S APT. BUILDING IS TO THE WEST." ; 8
     412042555359204C
     4F4E444F4E205354
     524545542E202052
     4F53452753204150
     542E204255494C44
     494E472049532054
     4F20544845205745
     53542E00
23C6 62               (DescriptionTable6):00024                 .db 98
23C7 5448495320412043 (DescriptionTable6):00025                 .strz "THIS A CONGESTED EAST-WEST STREET.  ON THE NORTH SIDE OF THE STREET IS HERRICK'S DEPARTMENT STORE." ; 9
     4F4E474553544544
     20454153542D5745
     5354205354524545
     542E20204F4E2054
     4845204E4F525448
     2053494445204F46
     2054484520535452
     4545542049532048
     45525249434B2753
     204445504152544D
     454E542053544F52
     452E00
242A 82               (DescriptionTable6):00026                 .db 130
242B 5448495320495320 (DescriptionTable6):00027                 .strz "THIS IS THE GROUND FLOOR OF HERRICK'S DEPARTMENT STORE.  WIDES STAIRCASES LEAD UP AND DOWN. CLASS DOORS LEAD OUTSIDE TO THE SOUTH." ; 10
     5448452047524F55
     4E4420464C4F4F52
     204F462048455252
     49434B2753204445
     504152544D454E54
     2053544F52452E20
     2057494445532053
     5441495243415345
     53204C4541442055
     5020414E4420444F
     574E2E20434C4153
     5320444F4F525320
     4C454144204F5554
     5349444520544F20
     54484520534F5554
     482E00
24AE 5E               (DescriptionTable6):00028                 .db 94
24AF 5448495320495320 (DescriptionTable6):00029                 .strz "THIS IS THE UPSTAIRS OF HERRICK'S, WHICH HOUSES THE SPORTING GOODS SECTION.  STAIRS LEAD DOWN." ; 11
     5448452055505354
     41495253204F4620
     4845525249434B27
     532C205748494348
     20484F5553455320
     5448452053504F52
     54494E4720474F4F
     4453205345435449
     4F4E2E2020535441
     495253204C454144
     20444F574E2E00
250E 64               (DescriptionTable6):00030                 .db 100
250F 5448495320495320 (DescriptionTable6):00031                 .strz "THIS IS THE BASEMENT UP HERRICK'S. STAIRS LEAD UP.  A ROOM LABELED 'EMPLOYEES ONLY IS TO THE SOUTH'." ; 12
     5448452042415345
     4D454E5420555020
     4845525249434B27
     532E205354414952
     53204C4541442055
     502E20204120524F
     4F4D204C4142454C
     45442027454D504C
     4F59454553204F4E
     4C5920495320544F
     2054484520534F55
     5448272E00
2574 48               (DescriptionTable6):00032                 .db 72
2575 5448495320495320 (DescriptionTable6):00033                 .strz "THIS IS ROOM USED FOR STOCKING INVENTORY.  A DOOR LEADS OUT TO THE NORTH" ; 13
     524F4F4D20555345
     4420464F52205354
     4F434B494E472049
     4E56454E544F5259
     2E20204120444F4F
     52204C4541445320
     4F555420544F2054
     4845204E4F525448
     00
25BE 69               (DescriptionTable6):00034                 .db 105
25BF 5448495320495320 (DescriptionTable6):00035                 .strz "THIS IS THE LOBBY OF ROSE'S APT. BUILDING. TO THE WEST IS AN ELEVATOR. TO THE EAST, A DOOR LEADS OUTSIDE." ; 14
     544845204C4F4242
     59204F4620524F53
     452753204150542E
     204255494C44494E
     472E20544F205448
     4520574553542049
     5320414E20454C45
     5641544F522E2054
     4F20544845204541
     53542C204120444F
     4F52204C45414453
     204F555453494445
     2E00
2629 19               (DescriptionTable6):00036                 .db 25
262A 5448495320495320 (DescriptionTable6):00037                 .strz "THIS IS A SMALL ELEVATOR." ; 15
     4120534D414C4C20
     454C455641544F52
     2E00
2644 25               (DescriptionTable6):00038                 .db 37
2645 412053494E474C45 (DescriptionTable6):00039                 .strz "A SINGLE BUTTON  IS NEXT TO THE DOOR." ; 16
     20425554544F4E20
     204953204E455854
     20544F2054484520
     444F4F522E00
266B 59               (DescriptionTable6):00040                 .db 89
266C 5448495320495320 (DescriptionTable6):00041                 .strz "THIS IS CRAMPED, DINGY HALLWAY.  ROSE'S FLAT IS TO THE EAST, TO THE WEST IS THE ELEVATOR." ; 17
     4352414D5045442C
     2044494E47592048
     414C4C5741592E20
     20524F5345275320
     464C415420495320
     544F205448452045
     4153542C20544F20
     5448452057455354
     2049532054484520
     454C455641544F52
     2E00
26C6 38               (DescriptionTable6):00042                 .db 56
26C7 5448495320495320 (DescriptionTable6):00043                 .strz "THIS IS ROSES SMALL APARTMENT.  TO THE WEST IS THE HALL." ; 18
     524F53455320534D
     414C4C2041504152
     544D454E542E2020
     544F205448452057
     4553542049532054
     48452048414C4C2E
     00
2700 3C               (DescriptionTable6):00044                 .db 60
2701 54484F554748204F (DescriptionTable6):00045                 .strz "THOUGH OBVIOUSLY PLASTIC, THE MANNEQUIN IS EERILY LIFE-LIKE." ; 19
     4256494F55534C59
     20504C4153544943
     2C20544845204D41
     4E4E455155494E20
     495320454552494C
     59204C4946452D4C
     494B452E00
273E 30               (DescriptionTable6):00046                 .db 48
273F 4120504C41535449 (DescriptionTable6):00047                 .strz "A PLASTIC MANNEQUIN STANDS ON A  SMALL PEDESTAL." ; 20
     43204D414E4E4551
     55494E205354414E
     4453204F4E204120
     20534D414C4C2050
     4544455354414C2E
     00
2770 44               (DescriptionTable6):00048                 .db 68
2771 5448452042415420 (DescriptionTable6):00049                 .strz "THE BAT IS SOLID WILLOW.  DEFINITELY GOOD FOR GETTING A FEW 'OVERS'." ; 21
     495320534F4C4944
     2057494C4C4F572E
     2020444546494E49
     54454C5920474F4F
     4420464F52204745
     5454494E47204120
     46455720274F5645
     5253272E00
27B6 2D               (DescriptionTable6):00050                 .db 45
27B7 4120435249434B45 (DescriptionTable6):00051                 .strz "A CRICKET BAT LIES AMOUNG THE ASSORTED ITEMS." ; 22
     5420424154204C49
     455320414D4F554E
     4720544845204153
     534F525445442049
     54454D532E00
27E5 28               (DescriptionTable6):00052                 .db 40
27E6 524F534520495320 (DescriptionTable6):00053                 .strz "ROSE IS LYING ON THE GROUND UNCONSCIOUS." ; 23
     4C59494E47204F4E
     205448452047524F
     554E4420554E434F
     4E5343494F55532E
     00
280F 41               (DescriptionTable6):00054                 .db 65
2810 5448452044414C45 (DescriptionTable6):00055                 .strz "THE DALEK RESEMBLES A GARBAGE CAN WITH A TOILET PLUNGER STICKOUT." ; 24
     4B20524553454D42
     4C45532041204741
     5242414745204341
     4E20574954482041
     20544F494C455420
     504C554E47455220
     535449434B4F5554
     2E00
2852 3C               (DescriptionTable6):00056                 .db 60
2853 4120484F5354494C (DescriptionTable6):00057                 .strz "A HOSTILE DALEK IS WHEELING AROUND, SCREAMING 'EXTERMINATE!'" ; 25
     452044414C454B20
     495320574845454C
     494E472041524F55
     4E442C2053435245
     414D494E47202745
     585445524D494E41
     5445212700
2890 1C               (DescriptionTable6):00058                 .db 28
2891 5448452048415420 (DescriptionTable6):00059                 .strz "THE HAT IS A STYLISH FEDORA." ; 26
     4953204120535459
     4C49534820464544
     4F52412E00
28AE 27               (DescriptionTable6):00060                 .db 39
28AF 41205354594C4953 (DescriptionTable6):00061                 .strz "A STYLISH HAT RESTS ATOP THE MANNEQUIN." ; 27
     4820484154205245
     5354532041544F50
     20544845204D414E
     4E455155494E2E00
28D7 24               (DescriptionTable6):00062                 .db 36
28D8 5448452048454144 (DescriptionTable6):00063                 .strz "THE HEAD STARES BLANKLY BACK AT YOU." ; 28
     2053544152455320
     424C414E4B4C5920
     4241434B20415420
     594F552E00
28FD 22               (DescriptionTable6):00064                 .db 34
28FE 4120504C41535449 (DescriptionTable6):00065                 .strz "A PLASTIC HEAD LIES ON THE GROUND." ; 29
     432048454144204C
     494553204F4E2054
     48452047524F554E
     442E00
2921 3A               (DescriptionTable6):00066                 .db 58
2922 4C4F4F4B494E4720 (DescriptionTable6):00067                 .strz "LOOKING DOWN THE NECK, YOU CAN SEE SOPHISTICATED ROBOTICS." ; 30
     444F574E20544845
     204E45434B2C2059
     4F552043414E2053
     454520534F504849
     5354494341544544
     20524F424F544943
     532E00
295D 2D               (DescriptionTable6):00068                 .db 45
295E 41204C4946454C45 (DescriptionTable6):00069                 .strz "A LIFELESS TORSO LIES CRUMPLED ON THE GROUND." ; 31
     535320544F52534F
     204C494553204352
     554D504C4544204F
     4E20544845204752
     4F554E442E00
298C 4B               (DescriptionTable6):00070                 .db 75
298D 54484520534F4E49 (DescriptionTable6):00071                 .strz "THE SONIC SCREWDRIVER HAS SEVERAL BUTTONS, THOUGH NONE OF THEM ARE LABELED." ; 32
     4320534352455744
     5249564552204841
     5320534556455241
     4C20425554544F4E
     532C2054484F5547
     48204E4F4E45204F
     46205448454D2041
     5245204C4142454C
     45442E00
29D9 47               (DescriptionTable6):00072                 .db 71
29DA 54484520504C554E (DescriptionTable6):00073                 .strz "THE PLUNGER LIKE APPENDAGE PERMITS THE DALEK A LIMITED FIELD OF VISION." ; 33
     474552204C494B45
     20415050454E4441
     4745205045524D49
     5453205448452044
     414C454B2041204C
     494D495445442046
     49454C44204F4620
     564953494F4E2E00
2A22 7C               (DescriptionTable6):00074                 .db 124
2A23 57454C434F4D4520 (DescriptionTable6):00075                 .strz "WELCOME TO TRENZALORE, WHERE TIME LORDS GO WHEN THEY ARE OUT OF LIVES. NEXT TIME, PERHAPS, WE'LL FIND A WAY PAST THAT DALEK." ; 34
     544F205452454E5A
     414C4F52452C2057
     484552452054494D
     45204C4F52445320
     474F205748454E20
     5448455920415245
     204F5554204F4620
     4C495645532E204E
     4558542054494D45
     2C20504552484150
     532C205745274C4C
     2046494E44204120
     5741592050415354
     2054484154204441
     4C454B2E00
2AA0 34               (DescriptionTable6):00076                 .db 52
2AA1 544845204D414E4E (DescriptionTable6):00077                 .strz "THE MANNEQUIN IS OBVIOUSLY ALIVE AND VERY DANGEROUS." ; 35
     455155494E204953
     204F4256494F5553
     4C5920414C495645
     20414E4420564552
     592044414E474552
     4F55532E00
2AD6 2B               (DescriptionTable6):00078                 .db 43
2AD7 544845204D414E4E (DescriptionTable6):00079                 .strz "THE MANNEQUIN IS STANDING OVER ROSE'S BODY." ; 36
     455155494E204953
     205354414E44494E
     47204F5645522052
     4F5345275320424F
     44592E00
2B03 20               (DescriptionTable6):00080                 .db 32
2B04 41205354594C4953 (DescriptionTable6):00081                 .strz "A STYLISH HAT LIES ON THE FLOOR." ; 37
     4820484154204C49
     4553204F4E205448
     4520464C4F4F522E
     00
2B25 58               (DescriptionTable6):00082                 .db 88
2B26 4153205448452053 (DescriptionTable6):00083                 .strz "AS THE SELF DESTRUCT ACTIVATES, THE DALEK IS SHATTERED BY A POWERFUL INTERNAL EXPLOSION." ; 38
     454C462044455354
     5255435420414354
     4956415445532C20
     5448452044414C45
     4B20495320534841
     5454455245442042
     59204120504F5745
     5246554C20494E54
     45524E414C204558
     504C4F53494F4E2E
     00
2B7F 48               (DescriptionTable6):00084                 .db 72
2B80 544845204D415353 (DescriptionTable6):00085                 .strz "THE MASSIVE CONCUSSSION, TRAPPED INSIDE THE TARDIS, KILLS YOU INSTANTLY." ; 39
     49564520434F4E43
     55535353494F4E2C
     2054524150504544
     20494E5349444520
     5448452054415244
     49532C204B494C4C
     5320594F5520494E
     5354414E544C592E
     00
2BC9 1B               (DescriptionTable6):00086                 .db 27
2BCA 5448452044414C45 (DescriptionTable6):00087                 .strz "THE DALEK IS FOLLOWING YOU." ; 40
     4B20495320464F4C
     4C4F57494E472059
     4F552E00
2BE6 4D               (DescriptionTable6):00088                 .db 77
2BE7 415320594F552045 (DescriptionTable6):00089                 .strz "AS YOU ENTER THE LOBBY, A HULKING JUDOON WALKS BY, KNOCKING YOU BACK OUTSIDE." ; 41
     4E54455220544845
     204C4F4242592C20
     412048554C4B494E
     47204A55444F4F4E
     2057414C4B532042
     592C204B4E4F434B
     494E4720594F5520
     4241434B204F5554
     534944452E00
2C35 69               (DescriptionTable6):00090                 .db 105
2C36 434F4E4752415455 (DescriptionTable6):00091                 .strz "CONGRATULATIONS!  WITH THE DALEK DESTROYED, YOU AND THE TARDIS ARE NOW READY FOR YOUR FURTHER ADVENTURES." ; 42
     4C4154494F4E5321
     2020574954482054
     48452044414C454B
     2044455354524F59
     45442C20594F5520
     414E442054484520
     5441524449532041
     5245204E4F572052
     4541445920464F52
     20594F5552204655
     5254484552204144
     56454E5455524553
     2E00
2CA0 0F               (DescriptionTable6):00092                 .db 15
2CA1 53544F525920434F (DescriptionTable6):00093                 .strz "STORY COMPLETE." ; 43
     4D504C4554452E00
2CB1 19               (DescriptionTable6):00094                 .db 25
2CB2 5459504520275155 (DescriptionTable6):00095                 .strz "TYPE 'QUIT' TO EXIT GAME." ; 44
     49542720544F2045
     5849542047414D45
     2E00
2CCC 4C               (DescriptionTable6):00096                 .db 76
2CCD 494620594F552041 (DescriptionTable6):00097                 .strz "IF YOU ARE EXPERIENCING SUICIDAL THOUGHTS, YOU SHOULD SEEK PHSYCIATRIC HELP." ; 45
     5245204558504552
     49454E43494E4720
     535549434944414C
     2054484F55474854
     532C20594F552053
     484F554C44205345
     454B205048535943
     4941545249432048
     454C502E00
2D1A 14               (DescriptionTable6):00098                 .db 20
2D1B 2A2A2A594F552048 (DescriptionTable6):00099                 .strz "***YOU HAVE DIED***." ; 46
     4156452044494544
     2A2A2A2E00
2D30 3B               (DescriptionTable6):00100                 .db 59
2D31 54414C4B494E4720 (DescriptionTable6):00101                 .strz "TALKING TO YOURSELF IS A SIGN OF IMPENDING MENTAL COLLAPSE." ; 47
     544F20594F555253
     454C462049532041
     205349474E204F46
     20494D50454E4449
     4E47204D454E5441
     4C20434F4C4C4150
     53452E00
2D6D 1C               (DescriptionTable6):00102                 .db 28
2D6E 594F552048454152 (DescriptionTable6):00103                 .strz "YOU HEAR NOTHING UNEXPECTED." ; 48
     204E4F5448494E47
     20554E4558504543
     5445442E00
2D8B 1D               (DescriptionTable6):00104                 .db 29
2D8C 594F5520534D454C (DescriptionTable6):00105                 .strz "YOU SMELL NOTHING UNEXPECTED." ; 49
     4C204E4F5448494E
     4720554E45585045
     435445442E00
2DAA 0E               (DescriptionTable6):00106                 .db 14
2DAB 54494D4520504153 (DescriptionTable6):00107                 .strz "TIME PASSES..." ; 50
     5345532E2E2E00
2DBA 18               (DescriptionTable6):00108                 .db 24
2DBB 4141414141414141 (DescriptionTable6):00109                 .strz "AAAAAAAAAAAAARRRRGGGGGG!" ; 51
     4141414141525252
     5247474747474721
     00
2DD4 06               (DescriptionTable6):00110                 .db 6
2DD5 57484545452100   (DescriptionTable6):00111                 .strz "WHEEE!" ; 52
2DDC 07               (DescriptionTable6):00112                 .db 7
2DDD 2854414B454E2900 (DescriptionTable6):00113                 .strz "(TAKEN)" ; 53
2DE5 11               (DescriptionTable6):00114                 .db 17
2DE6 544845204E4F5445 (DescriptionTable6):00115                 .strz "THE NOTE READS..." ; 54
     2052454144532E2E
     2E00
2DF8 5E               (DescriptionTable6):00116                 .db 94
2DF9 2744454152204452 (DescriptionTable6):00117                 .strz "'DEAR DR., I STILL HAVE YOUR SONIC SCREWDRIVER. SERIOUSLY, YOU CAN BE SO FORGETFUL SOMETIMES.'" ; 55
     2E2C204920535449
     4C4C204841564520
     594F555220534F4E
     4943205343524557
     4452495645522E20
     534552494F55534C
     592C20594F552043
     414E20424520534F
     20464F5247455446
     554C20534F4D4554
     494D45532E2700
2E58 20               (DescriptionTable6):00118                 .db 32
2E59 594F55522048414E (DescriptionTable6):00119                 .strz "YOUR HANDS DON'T DO MUCH DAMAGE." ; 56
     445320444F4E2754
     20444F204D554348
     2044414D4147452E
     00
2E7A 39               (DescriptionTable6):00120                 .db 57
2E7B 5749544820412050 (DescriptionTable6):00121                 .strz "WITH A PRECISE BLOW, YOU NEATLY DECAPITATE THE MANNEQUIN." ; 57
     5245434953452042
     4C4F572C20594F55
     204E4541544C5920
     4445434150495441
     544520544845204D
     414E4E455155494E
     2E00
2EB5 1A               (DescriptionTable6):00122                 .db 26
2EB6 524F534520535441 (DescriptionTable6):00123                 .strz "ROSE STAGGERS TO HER FEET." ; 58
     474745525320544F
     2048455220464545
     542E00
2ED1 24               (DescriptionTable6):00124                 .db 36
2ED2 524F534520495320 (DescriptionTable6):00125                 .strz "ROSE IS HERE CHECKING THE INVENTORY." ; 59
     4845524520434845
     434B494E47205448
     4520494E56454E54
     4F52592E00
2EF7 03               (DescriptionTable6):00126                 .db 3
2EF8 54424400         (DescriptionTable6):00127                 .strz "TBD" ; 60
2EFC 21               (DescriptionTable6):00128                 .db 33
2EFD 5448455245204953 (DescriptionTable6):00129                 .strz "THERE IS NOTHING TO READ ON THAT." ; 61
     204E4F5448494E47
     20544F2052454144
     204F4E2054484154
     2E00
2F1F 15               (DescriptionTable6):00130                 .db 21
2F20 5448452054415244 (DescriptionTable6):00131                 .strz "THE TARDIS IS CLOSED." ; 62
     495320495320434C
     4F5345442E00
2F36 29               (DescriptionTable6):00132                 .db 41
2F37 544845204C494654 (DescriptionTable6):00133                 .strz "THE LIFT SLOWLY RISES TO THE UPPER FLOOR." ; 63
     20534C4F574C5920
     524953455320544F
     2054484520555050
     455220464C4F4F52
     2E00
2F61 2A               (DescriptionTable6):00134                 .db 42
2F62 54484520444F4F52 (DescriptionTable6):00135                 .strz "THE DOOR OPENS, LEADING EAST TO A HALLWAY." ; 64
     204F50454E532C20
     4C454144494E4720
     4541535420544F20
     412048414C4C5741
     592E00
2F8D 1F               (DescriptionTable6):00136                 .db 31
2F8E 544845204C494654 (DescriptionTable6):00137                 .strz "THE LIFT SLOWLY DESCENDS FLOOR." ; 65
     20534C4F574C5920
     44455343454E4453
     20464C4F4F522E00
2FAE 2A               (DescriptionTable6):00138                 .db 42
2FAF 54484520444F4F52 (DescriptionTable6):00139                 .strz "THE DOOR OPENS, LEADING EAST TO THE LOBBY." ; 66
     204F50454E532C20
     4C454144494E4720
     4541535420544F20
     544845204C4F4242
     592E00
2FDA 33               (DescriptionTable6):00140                 .db 51
2FDB 414654455220534F (DescriptionTable6):00141                 .strz "AFTER SOME CLICKS AND BUZZES, THE TARDIS POPS OPEN." ; 67
     4D4520434C49434B
     5320414E44204255
     5A5A45532C205448
     4520544152444953
     20504F5053204F50
     454E2E00
300F 1B               (DescriptionTable6):00142                 .db 27
3010 5448452054415244 (DescriptionTable6):00143                 .strz "THE TARDIS IS ALREADY OPEN." ; 68
     495320495320414C
     5245414459204F50
     454E2E00
302C 18               (DescriptionTable6):00144                 .db 24
302D 285749544820534F (DescriptionTable6):00145                 .strz "(WITH SONIC SCREWDRIVER)" ; 69
     4E49432053435245
     5744524956455229
     00
3046 23               (DescriptionTable6):00146                 .db 35
3047 594F552048415645 (DescriptionTable6):00147                 .strz "YOU HAVE NOTHING TO UNLOCK IT WITH." ; 70
     204E4F5448494E47
     20544F20554E4C4F
     434B204954205749
     54482E00
306B 35               (DescriptionTable6):00148                 .db 53
306C 594F552044454654 (DescriptionTable6):00149                 .strz "YOU DEFTLY TOSS THE FEDORA ONTO THE DALEK'S EYESTALK." ; 71
     4C5920544F535320
     544845204645444F
     5241204F4E544F20
     5448452044414C45
     4B27532045594553
     54414C4B2E00
30A2 66               (DescriptionTable6):00150                 .db 102
30A3 494E20414E204154 (DescriptionTable6):00151                 .strz "IN AN ATTEMPT TO DESTROY THE HAT, THE DALEK FIRES A LASER AT IT,  ACCIDENTALLY VAPORIZING ITS OWN EYE." ; 72
     54454D505420544F
     2044455354524F59
     2054484520484154
     2C20544845204441
     4C454B2046495245
     532041204C415345
     522041542049542C
     2020414343494445
     4E54414C4C592056
     41504F52495A494E
     4720495453204F57
     4E204559452E00
310A 34               (DescriptionTable6):00152                 .db 52
310B 27494D504F535349 (DescriptionTable6):00153                 .strz "'IMPOSSIBLE! IMPOSSIBLE! MUST DESTROY IMPERFECTION!'" ; 73
     424C452120494D50
     4F535349424C4521
     204D555354204445
     5354524F5920494D
     5045524645435449
     4F4E212700
3140 50               (DescriptionTable6):00154                 .db 80
3141 5448452044414C45 (DescriptionTable6):00155                 .strz "THE DALEK, HAVING ACTIVATED A SELF DESTRUCT MECHANISM IS NOW GLOWING BRIGHT RED." ; 74
     4B2C20484156494E
     4720414354495641
     5445442041205345
     4C46204445535452
     554354204D454348
     414E49534D204953
     204E4F5720474C4F
     57494E4720425249
     474854205245442E
     00
3192 00               (DescriptionTable6):00156                 .db 0
                      (         main.asm):00064                 include NogoTable6809.asm
                      (NogoTable6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (NogoTable6809.asm):00002         ; NogoTable6809.asm
                      (NogoTable6809.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (NogoTable6809.asm):00004         
3193                  (NogoTable6809.asm):00005         nogo_table
3193 05               (NogoTable6809.asm):00006                 .db 5
3194 424C414E4B00     (NogoTable6809.asm):00007                 .strz "BLANK" ; 0
319A 16               (NogoTable6809.asm):00008                 .db 22
319B 594F552043414E27 (NogoTable6809.asm):00009                 .strz "YOU CAN'T GO THAT WAY." ; 1
     5420474F20544841
     54205741592E00
31B2 00               (NogoTable6809.asm):00010                 .db 0
                      (         main.asm):00065                 include BackDropTable6809.asm
                      (BackDropTable6809):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (BackDropTable6809):00002         ; Machine Generated Backdrop Table 
                      (BackDropTable6809):00003         ; Format: id, followed by 5 rooms where that object is visible (or 255)
                      (BackDropTable6809):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (BackDropTable6809):00005         
31B3                  (BackDropTable6809):00006         backdrop_table
31B3 FF               (BackDropTable6809):00007                 .db 255
                      (         main.asm):00066                 include sentence_table.asm
                      (sentence_table.as):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (sentence_table.as):00002         ;sentence jump table
                      (sentence_table.as):00003         ;verb, d.o., prep, i.o 
                      (sentence_table.as):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31B4                  (sentence_table.as):00005         sentence_table 
31B4 11               (sentence_table.as):00006                 .db look_verb_id
31B5 1746             (sentence_table.as):00007                 .dw look_sub
31B7 0D               (sentence_table.as):00008                 .db inventory_verb_id
31B8 189F             (sentence_table.as):00009                 .dw inventory_sub
31BA 00               (sentence_table.as):00010                 .db n_verb_id
31BB 1281             (sentence_table.as):00011                 .dw move_player
31BD 04               (sentence_table.as):00012                 .db ne_verb_id
31BE 1281             (sentence_table.as):00013                 .dw move_player
31C0 07               (sentence_table.as):00014                 .db nw_verb_id
31C1 1281             (sentence_table.as):00015                 .dw move_player 
31C3 01               (sentence_table.as):00016                 .db s_verb_id
31C4 1281             (sentence_table.as):00017                 .dw move_player
31C6 02               (sentence_table.as):00018                 .db e_verb_id
31C7 1281             (sentence_table.as):00019                 .dw move_player
31C9 03               (sentence_table.as):00020                 .db w_verb_id
31CA 1281             (sentence_table.as):00021                 .dw move_player
31CC 05               (sentence_table.as):00022                 .db se_verb_id
31CD 1281             (sentence_table.as):00023                 .dw move_player 
31CF 06               (sentence_table.as):00024                 .db sw_verb_id
31D0 1281             (sentence_table.as):00025                 .dw move_player 
31D2 08               (sentence_table.as):00026                 .db up_verb_id
31D3 1281             (sentence_table.as):00027                 .dw move_player 
31D5 09               (sentence_table.as):00028                 .db down_verb_id
31D6 1281             (sentence_table.as):00029                 .dw move_player 
31D8 0C               (sentence_table.as):00030                 .db get_verb_id
31D9 1322             (sentence_table.as):00031                 .dw get_sub
31DB 0B               (sentence_table.as):00032                 .db out_verb_id
31DC 1281             (sentence_table.as):00033                 .dw move_player 
31DE 0A               (sentence_table.as):00034                 .db enter_verb_id
31DF 1C25             (sentence_table.as):00035                 .dw enter_sub
31E1 0F               (sentence_table.as):00036                 .db drop_verb_id
31E2 17F5             (sentence_table.as):00037                 .dw drop_sub
31E4 12               (sentence_table.as):00038                 .db examine_verb_id
31E5 124B             (sentence_table.as):00039                 .dw look_at_sub
31E7 1A               (sentence_table.as):00040                 .db put_verb_id
31E8 1A8E             (sentence_table.as):00041                 .dw put_sub
31EA 14               (sentence_table.as):00042                 .db open_verb_id
31EB 1B2E             (sentence_table.as):00043                 .dw open_sub
31ED 17               (sentence_table.as):00044                 .db close_verb_id
31EE 1B71             (sentence_table.as):00045                 .dw close_sub   
31F0 14               (sentence_table.as):00046                 .db open_verb_id
31F1 1B2E             (sentence_table.as):00047                 .dw open_sub 
31F3 17               (sentence_table.as):00048                 .db close_verb_id
31F4 1B71             (sentence_table.as):00049                 .dw close_sub
31F6 1C               (sentence_table.as):00050                 .db smell_verb_id
31F7 3C26             (sentence_table.as):00051                 .dw smell_sub
31F9 1D               (sentence_table.as):00052                 .db listen_verb_id
31FA 3C13             (sentence_table.as):00053                 .dw listen_sub
31FC 0A               (sentence_table.as):00054                 .db enter_verb_id
31FD 1C25             (sentence_table.as):00055                 .dw enter_sub
31FF 1B               (sentence_table.as):00056                 .db quit_verb_id
3200 1D63             (sentence_table.as):00057                 .dw quit_sub
3202 FF               (sentence_table.as):00058                 .db 255
                      (         main.asm):00067                 include verbTable6809.asm
                      (verbTable6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (verbTable6809.asm):00002         ; VerbTable6809.asm 
                      (verbTable6809.asm):00003         ; Machine Generated Verb Table
                      (verbTable6809.asm):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (verbTable6809.asm):00005         
     0000             (verbTable6809.asm):00006         n_verb_id equ 0
     0001             (verbTable6809.asm):00007         s_verb_id equ 1
     0002             (verbTable6809.asm):00008         e_verb_id equ 2
     0003             (verbTable6809.asm):00009         w_verb_id equ 3
     0004             (verbTable6809.asm):00010         ne_verb_id equ 4
     0005             (verbTable6809.asm):00011         se_verb_id equ 5
     0006             (verbTable6809.asm):00012         sw_verb_id equ 6
     0007             (verbTable6809.asm):00013         nw_verb_id equ 7
     0008             (verbTable6809.asm):00014         up_verb_id equ 8
     0009             (verbTable6809.asm):00015         down_verb_id equ 9
     000A             (verbTable6809.asm):00016         enter_verb_id equ 10
     000B             (verbTable6809.asm):00017         out_verb_id equ 11
     000C             (verbTable6809.asm):00018         get_verb_id equ 12
     000D             (verbTable6809.asm):00019         inventory_verb_id equ 13
     000E             (verbTable6809.asm):00020         kill_verb_id equ 14
     000F             (verbTable6809.asm):00021         drop_verb_id equ 15
     0010             (verbTable6809.asm):00022         light_verb_id equ 16
     0011             (verbTable6809.asm):00023         look_verb_id equ 17
     0012             (verbTable6809.asm):00024         examine_verb_id equ 18
     0013             (verbTable6809.asm):00025         look_in_verb_id equ 19
     0014             (verbTable6809.asm):00026         open_verb_id equ 20
     0015             (verbTable6809.asm):00027         lock_verb_id equ 21
     0016             (verbTable6809.asm):00028         unlock_verb_id equ 22
     0017             (verbTable6809.asm):00029         close_verb_id equ 23
     0018             (verbTable6809.asm):00030         eat_verb_id equ 24
     0019             (verbTable6809.asm):00031         drink_verb_id equ 25
     001A             (verbTable6809.asm):00032         put_verb_id equ 26
     001B             (verbTable6809.asm):00033         quit_verb_id equ 27
     001C             (verbTable6809.asm):00034         smell_verb_id equ 28
     001D             (verbTable6809.asm):00035         listen_verb_id equ 29
     001E             (verbTable6809.asm):00036         wait_verb_id equ 30
     001F             (verbTable6809.asm):00037         climb_verb_id equ 31
     0020             (verbTable6809.asm):00038         yell_verb_id equ 32
     0021             (verbTable6809.asm):00039         jump_verb_id equ 33
     0022             (verbTable6809.asm):00040         talk_to_verb_id equ 34
     0023             (verbTable6809.asm):00041         hit_verb_id equ 35
     0024             (verbTable6809.asm):00042         read_verb_id equ 36
     0025             (verbTable6809.asm):00043         wear_verb_id equ 37
     0026             (verbTable6809.asm):00044         push_verb_id equ 38
                      (verbTable6809.asm):00045         
                      (verbTable6809.asm):00046         
3203                  (verbTable6809.asm):00047         verb_table
3203 00               (verbTable6809.asm):00048                 .db 0
3204 01               (verbTable6809.asm):00049                 .db 1
3205 4E00             (verbTable6809.asm):00050                 .strz "N"
3207 00               (verbTable6809.asm):00051                 .db 0
3208 08               (verbTable6809.asm):00052                 .db 8
3209 474F204E4F525448 (verbTable6809.asm):00053                 .strz "GO NORTH"
     00
3212 00               (verbTable6809.asm):00054                 .db 0
3213 05               (verbTable6809.asm):00055                 .db 5
3214 4E4F52544800     (verbTable6809.asm):00056                 .strz "NORTH"
321A 01               (verbTable6809.asm):00057                 .db 1
321B 01               (verbTable6809.asm):00058                 .db 1
321C 5300             (verbTable6809.asm):00059                 .strz "S"
321E 01               (verbTable6809.asm):00060                 .db 1
321F 08               (verbTable6809.asm):00061                 .db 8
3220 474F20534F555448 (verbTable6809.asm):00062                 .strz "GO SOUTH"
     00
3229 01               (verbTable6809.asm):00063                 .db 1
322A 05               (verbTable6809.asm):00064                 .db 5
322B 534F55544800     (verbTable6809.asm):00065                 .strz "SOUTH"
3231 02               (verbTable6809.asm):00066                 .db 2
3232 01               (verbTable6809.asm):00067                 .db 1
3233 4500             (verbTable6809.asm):00068                 .strz "E"
3235 02               (verbTable6809.asm):00069                 .db 2
3236 07               (verbTable6809.asm):00070                 .db 7
3237 474F204541535400 (verbTable6809.asm):00071                 .strz "GO EAST"
323F 02               (verbTable6809.asm):00072                 .db 2
3240 04               (verbTable6809.asm):00073                 .db 4
3241 4541535400       (verbTable6809.asm):00074                 .strz "EAST"
3246 03               (verbTable6809.asm):00075                 .db 3
3247 01               (verbTable6809.asm):00076                 .db 1
3248 5700             (verbTable6809.asm):00077                 .strz "W"
324A 03               (verbTable6809.asm):00078                 .db 3
324B 07               (verbTable6809.asm):00079                 .db 7
324C 474F205745535400 (verbTable6809.asm):00080                 .strz "GO WEST"
3254 03               (verbTable6809.asm):00081                 .db 3
3255 04               (verbTable6809.asm):00082                 .db 4
3256 5745535400       (verbTable6809.asm):00083                 .strz "WEST"
325B 04               (verbTable6809.asm):00084                 .db 4
325C 02               (verbTable6809.asm):00085                 .db 2
325D 4E4500           (verbTable6809.asm):00086                 .strz "NE"
3260 04               (verbTable6809.asm):00087                 .db 4
3261 0C               (verbTable6809.asm):00088                 .db 12
3262 474F204E4F525448 (verbTable6809.asm):00089                 .strz "GO NORTHEAST"
     4541535400
326F 04               (verbTable6809.asm):00090                 .db 4
3270 09               (verbTable6809.asm):00091                 .db 9
3271 4E4F525448454153 (verbTable6809.asm):00092                 .strz "NORTHEAST"
     5400
327B 05               (verbTable6809.asm):00093                 .db 5
327C 02               (verbTable6809.asm):00094                 .db 2
327D 534500           (verbTable6809.asm):00095                 .strz "SE"
3280 05               (verbTable6809.asm):00096                 .db 5
3281 0C               (verbTable6809.asm):00097                 .db 12
3282 474F20534F555448 (verbTable6809.asm):00098                 .strz "GO SOUTHEAST"
     4541535400
328F 05               (verbTable6809.asm):00099                 .db 5
3290 09               (verbTable6809.asm):00100                 .db 9
3291 534F555448454153 (verbTable6809.asm):00101                 .strz "SOUTHEAST"
     5400
329B 06               (verbTable6809.asm):00102                 .db 6
329C 02               (verbTable6809.asm):00103                 .db 2
329D 535700           (verbTable6809.asm):00104                 .strz "SW"
32A0 06               (verbTable6809.asm):00105                 .db 6
32A1 0C               (verbTable6809.asm):00106                 .db 12
32A2 474F20534F555448 (verbTable6809.asm):00107                 .strz "GO SOUTHWEST"
     5745535400
32AF 06               (verbTable6809.asm):00108                 .db 6
32B0 09               (verbTable6809.asm):00109                 .db 9
32B1 534F555448574553 (verbTable6809.asm):00110                 .strz "SOUTHWEST"
     5400
32BB 07               (verbTable6809.asm):00111                 .db 7
32BC 02               (verbTable6809.asm):00112                 .db 2
32BD 4E5700           (verbTable6809.asm):00113                 .strz "NW"
32C0 07               (verbTable6809.asm):00114                 .db 7
32C1 0C               (verbTable6809.asm):00115                 .db 12
32C2 474F204E4F525448 (verbTable6809.asm):00116                 .strz "GO NORTHWEST"
     5745535400
32CF 07               (verbTable6809.asm):00117                 .db 7
32D0 09               (verbTable6809.asm):00118                 .db 9
32D1 4E4F525448574553 (verbTable6809.asm):00119                 .strz "NORTHWEST"
     5400
32DB 08               (verbTable6809.asm):00120                 .db 8
32DC 02               (verbTable6809.asm):00121                 .db 2
32DD 555000           (verbTable6809.asm):00122                 .strz "UP"
32E0 08               (verbTable6809.asm):00123                 .db 8
32E1 05               (verbTable6809.asm):00124                 .db 5
32E2 474F20555000     (verbTable6809.asm):00125                 .strz "GO UP"
32E8 08               (verbTable6809.asm):00126                 .db 8
32E9 01               (verbTable6809.asm):00127                 .db 1
32EA 5500             (verbTable6809.asm):00128                 .strz "U"
32EC 09               (verbTable6809.asm):00129                 .db 9
32ED 04               (verbTable6809.asm):00130                 .db 4
32EE 444F574E00       (verbTable6809.asm):00131                 .strz "DOWN"
32F3 09               (verbTable6809.asm):00132                 .db 9
32F4 07               (verbTable6809.asm):00133                 .db 7
32F5 474F20444F574E00 (verbTable6809.asm):00134                 .strz "GO DOWN"
32FD 09               (verbTable6809.asm):00135                 .db 9
32FE 01               (verbTable6809.asm):00136                 .db 1
32FF 4400             (verbTable6809.asm):00137                 .strz "D"
3301 0A               (verbTable6809.asm):00138                 .db 10
3302 05               (verbTable6809.asm):00139                 .db 5
3303 454E54455200     (verbTable6809.asm):00140                 .strz "ENTER"
3309 0A               (verbTable6809.asm):00141                 .db 10
330A 05               (verbTable6809.asm):00142                 .db 5
330B 474F20494E00     (verbTable6809.asm):00143                 .strz "GO IN"
3311 0A               (verbTable6809.asm):00144                 .db 10
3312 07               (verbTable6809.asm):00145                 .db 7
3313 474F20494E544F00 (verbTable6809.asm):00146                 .strz "GO INTO"
331B 0A               (verbTable6809.asm):00147                 .db 10
331C 09               (verbTable6809.asm):00148                 .db 9
331D 474F20494E534944 (verbTable6809.asm):00149                 .strz "GO INSIDE"
     4500
3327 0B               (verbTable6809.asm):00150                 .db 11
3328 03               (verbTable6809.asm):00151                 .db 3
3329 4F555400         (verbTable6809.asm):00152                 .strz "OUT"
332D 0C               (verbTable6809.asm):00153                 .db 12
332E 03               (verbTable6809.asm):00154                 .db 3
332F 47455400         (verbTable6809.asm):00155                 .strz "GET"
3333 0C               (verbTable6809.asm):00156                 .db 12
3334 04               (verbTable6809.asm):00157                 .db 4
3335 54414B4500       (verbTable6809.asm):00158                 .strz "TAKE"
333A 0C               (verbTable6809.asm):00159                 .db 12
333B 04               (verbTable6809.asm):00160                 .db 4
333C 4752414200       (verbTable6809.asm):00161                 .strz "GRAB"
3341 0C               (verbTable6809.asm):00162                 .db 12
3342 07               (verbTable6809.asm):00163                 .db 7
3343 5049434B20555000 (verbTable6809.asm):00164                 .strz "PICK UP"
334B 0D               (verbTable6809.asm):00165                 .db 13
334C 09               (verbTable6809.asm):00166                 .db 9
334D 494E56454E544F52 (verbTable6809.asm):00167                 .strz "INVENTORY"
     5900
3357 0D               (verbTable6809.asm):00168                 .db 13
3358 01               (verbTable6809.asm):00169                 .db 1
3359 4900             (verbTable6809.asm):00170                 .strz "I"
335B 0E               (verbTable6809.asm):00171                 .db 14
335C 04               (verbTable6809.asm):00172                 .db 4
335D 4B494C4C00       (verbTable6809.asm):00173                 .strz "KILL"
3362 0F               (verbTable6809.asm):00174                 .db 15
3363 04               (verbTable6809.asm):00175                 .db 4
3364 44524F5000       (verbTable6809.asm):00176                 .strz "DROP"
3369 10               (verbTable6809.asm):00177                 .db 16
336A 05               (verbTable6809.asm):00178                 .db 5
336B 4C4947485400     (verbTable6809.asm):00179                 .strz "LIGHT"
3371 11               (verbTable6809.asm):00180                 .db 17
3372 04               (verbTable6809.asm):00181                 .db 4
3373 4C4F4F4B00       (verbTable6809.asm):00182                 .strz "LOOK"
3378 11               (verbTable6809.asm):00183                 .db 17
3379 01               (verbTable6809.asm):00184                 .db 1
337A 4C00             (verbTable6809.asm):00185                 .strz "L"
337C 12               (verbTable6809.asm):00186                 .db 18
337D 07               (verbTable6809.asm):00187                 .db 7
337E 4558414D494E4500 (verbTable6809.asm):00188                 .strz "EXAMINE"
3386 12               (verbTable6809.asm):00189                 .db 18
3387 01               (verbTable6809.asm):00190                 .db 1
3388 5800             (verbTable6809.asm):00191                 .strz "X"
338A 12               (verbTable6809.asm):00192                 .db 18
338B 07               (verbTable6809.asm):00193                 .db 7
338C 4C4F4F4B20415400 (verbTable6809.asm):00194                 .strz "LOOK AT"
3394 13               (verbTable6809.asm):00195                 .db 19
3395 07               (verbTable6809.asm):00196                 .db 7
3396 4C4F4F4B20494E00 (verbTable6809.asm):00197                 .strz "LOOK IN"
339E 13               (verbTable6809.asm):00198                 .db 19
339F 07               (verbTable6809.asm):00199                 .db 7
33A0 494E535045435400 (verbTable6809.asm):00200                 .strz "INSPECT"
33A8 13               (verbTable6809.asm):00201                 .db 19
33A9 06               (verbTable6809.asm):00202                 .db 6
33AA 53454152434800   (verbTable6809.asm):00203                 .strz "SEARCH"
33B1 14               (verbTable6809.asm):00204                 .db 20
33B2 04               (verbTable6809.asm):00205                 .db 4
33B3 4F50454E00       (verbTable6809.asm):00206                 .strz "OPEN"
33B8 15               (verbTable6809.asm):00207                 .db 21
33B9 04               (verbTable6809.asm):00208                 .db 4
33BA 4C4F434B00       (verbTable6809.asm):00209                 .strz "LOCK"
33BF 16               (verbTable6809.asm):00210                 .db 22
33C0 06               (verbTable6809.asm):00211                 .db 6
33C1 554E4C4F434B00   (verbTable6809.asm):00212                 .strz "UNLOCK"
33C8 17               (verbTable6809.asm):00213                 .db 23
33C9 05               (verbTable6809.asm):00214                 .db 5
33CA 434C4F534500     (verbTable6809.asm):00215                 .strz "CLOSE"
33D0 17               (verbTable6809.asm):00216                 .db 23
33D1 04               (verbTable6809.asm):00217                 .db 4
33D2 5348555400       (verbTable6809.asm):00218                 .strz "SHUT"
33D7 18               (verbTable6809.asm):00219                 .db 24
33D8 03               (verbTable6809.asm):00220                 .db 3
33D9 45415400         (verbTable6809.asm):00221                 .strz "EAT"
33DD 19               (verbTable6809.asm):00222                 .db 25
33DE 05               (verbTable6809.asm):00223                 .db 5
33DF 4452494E4B00     (verbTable6809.asm):00224                 .strz "DRINK"
33E5 1A               (verbTable6809.asm):00225                 .db 26
33E6 03               (verbTable6809.asm):00226                 .db 3
33E7 50555400         (verbTable6809.asm):00227                 .strz "PUT"
33EB 1A               (verbTable6809.asm):00228                 .db 26
33EC 05               (verbTable6809.asm):00229                 .db 5
33ED 504C41434500     (verbTable6809.asm):00230                 .strz "PLACE"
33F3 1B               (verbTable6809.asm):00231                 .db 27
33F4 04               (verbTable6809.asm):00232                 .db 4
33F5 5155495400       (verbTable6809.asm):00233                 .strz "QUIT"
33FA 1C               (verbTable6809.asm):00234                 .db 28
33FB 05               (verbTable6809.asm):00235                 .db 5
33FC 534D454C4C00     (verbTable6809.asm):00236                 .strz "SMELL"
3402 1C               (verbTable6809.asm):00237                 .db 28
3403 05               (verbTable6809.asm):00238                 .db 5
3404 534E49464600     (verbTable6809.asm):00239                 .strz "SNIFF"
340A 1D               (verbTable6809.asm):00240                 .db 29
340B 06               (verbTable6809.asm):00241                 .db 6
340C 4C495354454E00   (verbTable6809.asm):00242                 .strz "LISTEN"
3413 1E               (verbTable6809.asm):00243                 .db 30
3414 04               (verbTable6809.asm):00244                 .db 4
3415 5741495400       (verbTable6809.asm):00245                 .strz "WAIT"
341A 1F               (verbTable6809.asm):00246                 .db 31
341B 05               (verbTable6809.asm):00247                 .db 5
341C 434C494D4200     (verbTable6809.asm):00248                 .strz "CLIMB"
3422 20               (verbTable6809.asm):00249                 .db 32
3423 04               (verbTable6809.asm):00250                 .db 4
3424 59454C4C00       (verbTable6809.asm):00251                 .strz "YELL"
3429 20               (verbTable6809.asm):00252                 .db 32
342A 06               (verbTable6809.asm):00253                 .db 6
342B 53435245414D00   (verbTable6809.asm):00254                 .strz "SCREAM"
3432 20               (verbTable6809.asm):00255                 .db 32
3433 05               (verbTable6809.asm):00256                 .db 5
3434 53484F555400     (verbTable6809.asm):00257                 .strz "SHOUT"
343A 21               (verbTable6809.asm):00258                 .db 33
343B 04               (verbTable6809.asm):00259                 .db 4
343C 4A554D5000       (verbTable6809.asm):00260                 .strz "JUMP"
3441 22               (verbTable6809.asm):00261                 .db 34
3442 07               (verbTable6809.asm):00262                 .db 7
3443 54414C4B20544F00 (verbTable6809.asm):00263                 .strz "TALK TO"
344B 23               (verbTable6809.asm):00264                 .db 35
344C 03               (verbTable6809.asm):00265                 .db 3
344D 48495400         (verbTable6809.asm):00266                 .strz "HIT"
3451 23               (verbTable6809.asm):00267                 .db 35
3452 06               (verbTable6809.asm):00268                 .db 6
3453 535452494B4500   (verbTable6809.asm):00269                 .strz "STRIKE"
345A 24               (verbTable6809.asm):00270                 .db 36
345B 04               (verbTable6809.asm):00271                 .db 4
345C 5245414400       (verbTable6809.asm):00272                 .strz "READ"
3461 25               (verbTable6809.asm):00273                 .db 37
3462 04               (verbTable6809.asm):00274                 .db 4
3463 5745415200       (verbTable6809.asm):00275                 .strz "WEAR"
3468 26               (verbTable6809.asm):00276                 .db 38
3469 04               (verbTable6809.asm):00277                 .db 4
346A 5055534800       (verbTable6809.asm):00278                 .strz "PUSH"
346F 26               (verbTable6809.asm):00279                 .db 38
3470 05               (verbTable6809.asm):00280                 .db 5
3471 505245535300     (verbTable6809.asm):00281                 .strz "PRESS"
3477 0000             (verbTable6809.asm):00282                 .db 0,0
                      (         main.asm):00068                 include PrepTable6809.asm
                      (PrepTable6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (PrepTable6809.asm):00002         ; PrepTable6809.asm
                      (PrepTable6809.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (PrepTable6809.asm):00004         
3479                  (PrepTable6809.asm):00005         prep_table
3479 02               (PrepTable6809.asm):00006                 .db 2
347A 494E00           (PrepTable6809.asm):00007                 .strz "IN" ; 0
347D 02               (PrepTable6809.asm):00008                 .db 2
347E 415400           (PrepTable6809.asm):00009                 .strz "AT" ; 1
3481 02               (PrepTable6809.asm):00010                 .db 2
3482 544F00           (PrepTable6809.asm):00011                 .strz "TO" ; 2
3485 06               (PrepTable6809.asm):00012                 .db 6
3486 494E5349444500   (PrepTable6809.asm):00013                 .strz "INSIDE" ; 3
348D 03               (PrepTable6809.asm):00014                 .db 3
348E 4F555400         (PrepTable6809.asm):00015                 .strz "OUT" ; 4
3492 05               (PrepTable6809.asm):00016                 .db 5
3493 554E44455200     (PrepTable6809.asm):00017                 .strz "UNDER" ; 5
3499 02               (PrepTable6809.asm):00018                 .db 2
349A 4F4E00           (PrepTable6809.asm):00019                 .strz "ON" ; 6
349D 03               (PrepTable6809.asm):00020                 .db 3
349E 4F464600         (PrepTable6809.asm):00021                 .strz "OFF" ; 7
34A2 04               (PrepTable6809.asm):00022                 .db 4
34A3 494E544F00       (PrepTable6809.asm):00023                 .strz "INTO" ; 8
34A8 02               (PrepTable6809.asm):00024                 .db 2
34A9 555000           (PrepTable6809.asm):00025                 .strz "UP" ; 9
34AC 04               (PrepTable6809.asm):00026                 .db 4
34AD 5749544800       (PrepTable6809.asm):00027                 .strz "WITH" ; 10
34B2 00               (PrepTable6809.asm):00028                 .db 0
                      (         main.asm):00069                 include checks.asm
                      (       checks.asm):00001         
                      (       checks.asm):00002         ;checks
     0006             (       checks.asm):00003         MAX_BACKDROP_ROOMS equ 6 ; (5 actually)
                      (       checks.asm):00004         
                      (       checks.asm):00005         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       checks.asm):00006         ;loop over table
                      (       checks.asm):00007         ;if verb matches, run the check
                      (       checks.asm):00008         ;if the check returns 0, pop the stack (unwind it one level)
                      (       checks.asm):00009         ;then rts to complete bail from 
                      (       checks.asm):00010         ;sentence processing
                      (       checks.asm):00011         ;returns 1 or 0 on user stack
                      (       checks.asm):00012         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       checks.asm):00013         
34B3                  (       checks.asm):00014         check_see_dobj
34B3 3436             (       checks.asm):00015                 pshs d,x,y
34B5 8601             (       checks.asm):00016                 lda #1  ; push return val
34B7 3602             (       checks.asm):00017                 pshu a
34B9 12               (       checks.asm):00018                 nop #is it a backdrop?
34BA B611C8           (       checks.asm):00019                 lda sentence+1  
34BD C613             (       checks.asm):00020                 ldb #OBJ_ENTRY_SIZE
34BF 3D               (       checks.asm):00021                 mul
34C0 1F01             (       checks.asm):00022                 tfr d,x
34C2 30891EF4         (       checks.asm):00023                 leax obj_table,x
34C6 308812           (       checks.asm):00024                 leax PROPERTY_BYTE_2,x
34C9 A684             (       checks.asm):00025                 lda ,x
34CB 8402             (       checks.asm):00026                 anda #BACKDROP_MASK
34CD 8102             (       checks.asm):00027                 cmpa #BACKDROP_MASK
34CF 260A             (       checks.asm):00028                 bne @n
34D1 12               (       checks.asm):00029                 nop ; it was a backdrop - is it visible in the rooms?
34D2 BD34FF           (       checks.asm):00030                 jsr is_visible_backdrop
34D5 3702             (       checks.asm):00031                 pulu a
34D7 8101             (       checks.asm):00032                 cmpa #1
34D9 2721             (       checks.asm):00033                 beq @x
34DB 12               (       checks.asm):00034         @n      nop #do normal check
34DC BD1BAC           (       checks.asm):00035                 jsr get_player_room ; leave it on stack
34DF B611C8           (       checks.asm):00036                 lda sentence+1  
34E2 3602             (       checks.asm):00037                 pshu a
34E4 BD181A           (       checks.asm):00038                 jsr is_visible_child_of  ; leave result on stack
34E7 3702             (       checks.asm):00039                 pulu a
34E9 8100             (       checks.asm):00040                 cmpa #0
34EB 1026000D         (       checks.asm):00041                 lbne @x
34EF 8E18F7           (       checks.asm):00042                 ldx #nosee 
34F2 BD1914           (       checks.asm):00043                 jsr PRINT
34F5 BDB958           (       checks.asm):00044                 jsr PRINTCR
34F8 8600             (       checks.asm):00045                 lda #0          ; change return code to 0
34FA A7C4             (       checks.asm):00046                 sta ,u
34FC 3536             (       checks.asm):00047         @x      puls y,x,d
34FE 39               (       checks.asm):00048                 rts
                      (       checks.asm):00049         
                      (       checks.asm):00050         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       checks.asm):00051         ;
                      (       checks.asm):00052         ;puts ret var, dobj, player room on stack
                      (       checks.asm):00053         ;then pops off top two params
                      (       checks.asm):00054         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       checks.asm):00055         
34FF                  (       checks.asm):00056         is_visible_backdrop
34FF 3436             (       checks.asm):00057                 pshs d,x,y
3501 8600             (       checks.asm):00058                 lda #0  ; push return var
3503 3602             (       checks.asm):00059                 pshu a 
3505 B611C8           (       checks.asm):00060                 lda sentence+1
3508 3602             (       checks.asm):00061                 pshu a
350A BD1BAC           (       checks.asm):00062                 jsr get_player_room     ; get and leave on stack
350D 8E31B3           (       checks.asm):00063                 ldx #backdrop_table
3510 A684             (       checks.asm):00064         @lp     lda ,x ; load obj id
3512 81FF             (       checks.asm):00065                 cmpa #$ff ; hit end?
3514 271D             (       checks.asm):00066                 beq @x
3516 A141             (       checks.asm):00067                 cmpa 1,u ; is this the object?
3518 2615             (       checks.asm):00068                 bne @c 
351A C601             (       checks.asm):00069                 ldb #1  ; found object in table...check for room matches
351C C106             (       checks.asm):00070         @il     cmpb #MAX_BACKDROP_ROOMS ; six entries for an object 
351E 270F             (       checks.asm):00071                 beq #@c
3520 A685             (       checks.asm):00072                 lda b,x  ; get a room it's visible in
3522 A1C4             (       checks.asm):00073                 cmpa ,u  ; is it one of the rooms?
3524 2606             (       checks.asm):00074                 bne @n   ; no - continue
3526 8601             (       checks.asm):00075                 lda #1    ; put 1 in return var and return
3528 A742             (       checks.asm):00076                 sta     2,u                      
352A 2007             (       checks.asm):00077                 bra @x
352C 5C               (       checks.asm):00078         @n      incb    ; continue inner loop
352D 20ED             (       checks.asm):00079                 bra @il
352F 3006             (       checks.asm):00080         @c      leax 6,x ; skip over entry
3531 20DD             (       checks.asm):00081                 bra @lp
3533 3342             (       checks.asm):00082         @x      leau 2,u  ; pop param + local off stack (leaving return on top)
3535 3536             (       checks.asm):00083                 puls y,x,d
3537 39               (       checks.asm):00084                 rts
                      (       checks.asm):00085                 
                      (       checks.asm):00086         ;return a 1 or 0 on user stack
3538                  (       checks.asm):00087         check_dobj_supplied
3538 3436             (       checks.asm):00088                         pshs d,x,y
353A 8601             (       checks.asm):00089                         lda #1          ;put a 1 on stack
353C 3602             (       checks.asm):00090                         pshu a
353E B611C8           (       checks.asm):00091                         lda sentence+1  ; dobj
3541 81FF             (       checks.asm):00092                         cmpa #NO_OBJECT
3543 2619             (       checks.asm):00093                         bne @x
3545 8E3561           (       checks.asm):00094                         ldx #nodobj     ; print "YOU NEED TO SAY ..."
3548 BD1914           (       checks.asm):00095                         jsr PRINT
354B 8E416D           (       checks.asm):00096                         ldx #word1
354E BD1914           (       checks.asm):00097                         jsr PRINT
3551 8E15BD           (       checks.asm):00098                         ldx #period             ; print remainder
3554 BD1914           (       checks.asm):00099                         jsr PRINT
3557 BDB958           (       checks.asm):00100                         jsr PRINTCR
355A 8600             (       checks.asm):00101                         lda #0          ; return a 0
355C A7C4             (       checks.asm):00102                         sta ,u
355E 3536             (       checks.asm):00103         @x              puls y,x,d
3560 39               (       checks.asm):00104                         rts
3561 594F55204E454544 (       checks.asm):00105         nodobj  .strz "YOU NEED TO SAY WHAT YOU WANT TO "       
     20544F2053415920
     5748415420594F55
     2057414E5420544F
     2000
                      (       checks.asm):00106         
                      (       checks.asm):00107         ;return a 1 or 0 on user stack
3583                  (       checks.asm):00108         check_prep_supplied
3583 3436             (       checks.asm):00109                         pshs d,x,y
3585 8601             (       checks.asm):00110                         lda #1          ;put a 1 on stack
3587 3602             (       checks.asm):00111                         pshu a
3589 B611C9           (       checks.asm):00112                         lda sentence+2  ; prep
358C 81FF             (       checks.asm):00113                         cmpa #NO_OBJECT
358E 260D             (       checks.asm):00114                         bne @x
3590 8E3561           (       checks.asm):00115                         ldx #nodobj     ; print "TRY FORMAT ...."
3593 BD1914           (       checks.asm):00116                         jsr PRINT
3596 BDB958           (       checks.asm):00117                         jsr PRINTCR
3599 8600             (       checks.asm):00118                         lda #0          ; return a 0
359B A7C4             (       checks.asm):00119                         sta ,u
359D 3536             (       checks.asm):00120         @x              puls y,x,d
359F 39               (       checks.asm):00121                         rts
                      (       checks.asm):00122         
                      (       checks.asm):00123                         
35A0 5452592054484520 (       checks.asm):00124         noprep  .strz "TRY THE FORMAT: VERB NOUN PREPOSITION NOUN"
     464F524D41543A20
     56455242204E4F55
     4E20505245504F53
     4954494F4E204E4F
     554E00
                      (       checks.asm):00125         
                      (       checks.asm):00126         
35CB                  (       checks.asm):00127         check_iobj_supplied
35CB 3436             (       checks.asm):00128                         pshs d,x,y
35CD 8601             (       checks.asm):00129                         lda #1          ;put a 1 on stack
35CF 3602             (       checks.asm):00130                         pshu a
35D1 B611CA           (       checks.asm):00131                         lda sentence+3  ; iobj
35D4 81FF             (       checks.asm):00132                         cmpa #NO_OBJECT
35D6 2631             (       checks.asm):00133                         bne @x
35D8 8E3561           (       checks.asm):00134                         ldx #nodobj     ; print "YOU NEED TO SAY ..."
35DB BD1914           (       checks.asm):00135                         jsr PRINT
35DE 8E416D           (       checks.asm):00136                         ldx #word1 ;verb
35E1 BD1914           (       checks.asm):00137                         jsr PRINT
35E4 8E171B           (       checks.asm):00138                         ldx #the
35E7 BD1914           (       checks.asm):00139                         jsr PRINT
35EA 8E418D           (       checks.asm):00140                         ldx #word2 ; "d.o."
35ED BD1914           (       checks.asm):00141                         jsr PRINT
35F0 8E1A8C           (       checks.asm):00142                         ldx #space
35F3 BD1914           (       checks.asm):00143                         jsr PRINT
35F6 8E41AD           (       checks.asm):00144                         ldx #word3  ; prep
35F9 BD1914           (       checks.asm):00145                         jsr PRINT
35FC 8E15BD           (       checks.asm):00146                         ldx #period             
35FF BD1914           (       checks.asm):00147                         jsr PRINT
3602 BDB958           (       checks.asm):00148                         jsr PRINTCR
3605 8600             (       checks.asm):00149                         lda #0          ; return a 0
3607 A7C4             (       checks.asm):00150                         sta ,u
3609 3536             (       checks.asm):00151         @x              puls y,x,d
360B 39               (       checks.asm):00152                         rts
                      (       checks.asm):00153                         
360C 594F55204E454544 (       checks.asm):00154         noiobj  .strz "YOU NEED TO SAY WHAT YOU WANT TO "       
     20544F2053415920
     5748415420594F55
     2057414E5420544F
     2000
                      (       checks.asm):00155         
                      (       checks.asm):00156         ;used by 'get'
                      (       checks.asm):00157         ;makes sure the player doesn't have an object
362E                  (       checks.asm):00158         check_dont_have_dobj
362E 3436             (       checks.asm):00159                 pshs d,x,y
3630 8600             (       checks.asm):00160                 lda #0
3632 3602             (       checks.asm):00161                 pshu a ; push return code
3634 B611C8           (       checks.asm):00162                 lda sentence+1
3637 3602             (       checks.asm):00163                 pshu a
3639 8601             (       checks.asm):00164                 lda #PLAYER
363B 3602             (       checks.asm):00165                 pshu a
363D BD368E           (       checks.asm):00166                 jsr is_child_of ; leave code on stack
3640 8601             (       checks.asm):00167                 lda #1
3642 A1C4             (       checks.asm):00168                 cmpa ,u
3644 260F             (       checks.asm):00169                 bne @r   ; ne = don't have
3646 8E365C           (       checks.asm):00170                 ldx #alreadyhave ; 
3649 BD1914           (       checks.asm):00171                 jsr PRINT
364C BDB958           (       checks.asm):00172                 jsr PRINTCR
364F 8600             (       checks.asm):00173                 lda #0          ; return  0
3651 A7C4             (       checks.asm):00174                 sta ,u  
3653 2004             (       checks.asm):00175                 bra @x
3655 8601             (       checks.asm):00176         @r      lda #1
3657 A7C4             (       checks.asm):00177             sta ,u
3659 3536             (       checks.asm):00178         @x      puls y,x,d
365B 39               (       checks.asm):00179                 rts
365C 594F5520414C5245 (       checks.asm):00180         alreadyhave     .strz "YOU ALREADY HAVE IT."    
     4144592048415645
     2049542E00
                      (       checks.asm):00181         
                      (       checks.asm):00182         ;check player has obj.  used by drop
3671                  (       checks.asm):00183         check_have_dobj 
3671 3436             (       checks.asm):00184                 pshs d,x,y
3673 8600             (       checks.asm):00185                 lda #0
3675 3602             (       checks.asm):00186                 pshu a ; push return code
3677 B611C8           (       checks.asm):00187                 lda sentence+1  ; push dobj
367A 3602             (       checks.asm):00188                 pshu a
367C 8601             (       checks.asm):00189                 lda #PLAYER ; push parent
367E 3602             (       checks.asm):00190                 pshu a
3680 BD368E           (       checks.asm):00191                 jsr is_child_of ; leave code on stack for caller
3683 8601             (       checks.asm):00192                 lda #1
3685 A1C4             (       checks.asm):00193                 cmpa ,u
3687 1026DD8E         (       checks.asm):00194                 lbne print_ret_no_have   ; and leave the 0 on stack
368B 3536             (       checks.asm):00195         @x      puls y,x,d
368D 39               (       checks.asm):00196                 rts
                      (       checks.asm):00197                 
                      (       checks.asm):00198         ;top of stack is player (holder)
                      (       checks.asm):00199         ;under that is object (child)
                      (       checks.asm):00200         ;under that is space for return var
368E                  (       checks.asm):00201         is_child_of
368E 3436             (       checks.asm):00202                 pshs d,x,y
3690 8601             (       checks.asm):00203                 lda #1   ; set return val to 1
3692 A742             (       checks.asm):00204                 sta 2,u
3694 12               (       checks.asm):00205         @lp     nop ; is the parent of this object equal to under the stack
3695 A641             (       checks.asm):00206                 lda 1,u  
3697 C613             (       checks.asm):00207                 ldb #OBJ_ENTRY_SIZE
3699 3D               (       checks.asm):00208                 mul
369A 1F01             (       checks.asm):00209                 tfr d,x
369C 30891EF4         (       checks.asm):00210                 leax obj_table,x
36A0 3001             (       checks.asm):00211                 leax HOLDER_ID,x
36A2 A684             (       checks.asm):00212                 lda ,x ; get parent
36A4 A1C4             (       checks.asm):00213                 cmpa ,u  ; if holder's parent  equal to parent yes, return (leaving 1 on stack)
36A6 270E             (       checks.asm):00214                 beq @x
36A8 8100             (       checks.asm):00215                 cmpa #0 ; did we hit the top?
36AA 2606             (       checks.asm):00216                 bne @s  ; return 0
36AC 8600             (       checks.asm):00217                 lda #0  
36AE A742             (       checks.asm):00218                 sta 2,u ; put 0 under the params
36B0 2004             (       checks.asm):00219                 bra @x
36B2 A741             (       checks.asm):00220         @s      sta 1,u ; put the child's parent on the stack
36B4 20DE             (       checks.asm):00221                 bra @lp 
36B6 3704             (       checks.asm):00222         @x      pulu b ; pop params, leaving return val on stack
36B8 3704             (       checks.asm):00223                 pulu b ;
36BA 3536             (       checks.asm):00224                 puls y,x,d
36BC 39               (       checks.asm):00225                 rts
                      (       checks.asm):00226         
                      (       checks.asm):00227         ;check_self_or_child    
                      (       checks.asm):00228         ; put box in table (make sure box isn't a child of table)
                      (       checks.asm):00229         ; used for making sure you can't put an object in iteself or a child 
                      (       checks.asm):00230         ; return is #0 for true (don't proceed)
                      (       checks.asm):00231         ; return is #1 for no (ok to proceed)
36BD                  (       checks.asm):00232         check_not_self_or_child
36BD 3436             (       checks.asm):00233                 pshs d,x,y
36BF 8601             (       checks.asm):00234                 lda #1  ; set return code to 1
36C1 3602             (       checks.asm):00235                 pshu a
36C3 B611C8           (       checks.asm):00236                 lda sentence+1  ; 
36C6 B111CA           (       checks.asm):00237                 cmpa sentence+3 
36C9 2717             (       checks.asm):00238                 beq @n  ; objects are the same
36CB 8600             (       checks.asm):00239                 lda #0  ; push space for return var (could just subtract 1, too)
36CD 3602             (       checks.asm):00240                 pshu a 
36CF B611CA           (       checks.asm):00241                 lda sentence+3 ; child
36D2 3602             (       checks.asm):00242                 pshu a
36D4 B611C8           (       checks.asm):00243                 lda sentence+1 ; holder 
36D7 3602             (       checks.asm):00244                 pshu a  
36D9 BD368E           (       checks.asm):00245                 jsr is_child_of  ; params are already on stack
36DC 3702             (       checks.asm):00246                 pulu a
36DE 8100             (       checks.asm):00247                 cmpa #0  ; no means ok to proceed
36E0 270D             (       checks.asm):00248                 beq     @x
36E2 8600             (       checks.asm):00249         @n      lda #0
36E4 A7C4             (       checks.asm):00250                 sta ,u
36E6 8E36F2           (       checks.asm):00251                 ldx #impossible
36E9 BD1914           (       checks.asm):00252                 jsr PRINT
36EC BDB958           (       checks.asm):00253                 jsr PRINTCR
36EF 3536             (       checks.asm):00254         @x      puls y,x,d
36F1 39               (       checks.asm):00255                 rts
                      (       checks.asm):00256                 
36F2 5448415427532050 (       checks.asm):00257         impossible .strz "THAT'S PHYSICALLY IMPOSSIBLE."        
     4859534943414C4C
     5920494D504F5353
     49424C452E00
                      (         main.asm):00070                 include before_table_6809.asm
                      (before_table_6809):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (before_table_6809):00002         ; SentenceTable6809.asm 
                      (before_table_6809):00003         ; Machine Generated Sentence Table
                      (before_table_6809):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (before_table_6809):00005         
3710                  (before_table_6809):00006         preactions_table
3710 2405FFFF         (before_table_6809):00007                 .db 36,5,255,255        ;read NOTE  
3714 3DF1             (before_table_6809):00008                 .dw before_read_sub
3716 FF               (before_table_6809):00009                 .db 255
                      (before_table_6809):00010         
                      (         main.asm):00071                 include instead_table_6809.asm
                      (instead_table_680):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (instead_table_680):00002         ; SentenceTable6809.asm 
                      (instead_table_680):00003         ; Machine Generated Sentence Table
                      (instead_table_680):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (instead_table_680):00005         
3717                  (instead_table_680):00006         actions_table
3717 0E01FFFF         (instead_table_680):00007                 .db 14,1,255,255        ;kill PLAYER  
371B 3BC4             (instead_table_680):00008                 .dw kill_self_sub
371D 2201FFFF         (instead_table_680):00009                 .db 34,1,255,255        ;talk to PLAYER  
3721 3C00             (instead_table_680):00010                 .dw talk_to_self_sub
3723 1DFFFFFF         (instead_table_680):00011                 .db 29,255,255,255      ;listen   
3727 3C13             (instead_table_680):00012                 .dw listen_sub
3729 1CFFFFFF         (instead_table_680):00013                 .db 28,255,255,255      ;smell   
372D 3C26             (instead_table_680):00014                 .dw smell_sub
372F 1EFFFFFF         (instead_table_680):00015                 .db 30,255,255,255      ;wait   
3733 3C39             (instead_table_680):00016                 .dw wait_sub
3735 20FFFFFF         (instead_table_680):00017                 .db 32,255,255,255      ;yell   
3739 3C4C             (instead_table_680):00018                 .dw yell_sub
373B 21FFFFFF         (instead_table_680):00019                 .db 33,255,255,255      ;jump   
373F 3C5F             (instead_table_680):00020                 .dw jump_sub
3741 2405FFFF         (instead_table_680):00021                 .db 36,5,255,255        ;read NOTE  
3745 3CE2             (instead_table_680):00022                 .dw read_note_sub
3747 24FEFFFF         (instead_table_680):00023                 .db 36,254,255,255      ;read *  
374B 3DDE             (instead_table_680):00024                 .dw read_anything_sub
374D 23130A14         (instead_table_680):00025                 .db 35,19,10,20 ;hit MANNEQUIN with CRICKET BAT
3751 3D3F             (instead_table_680):00026                 .dw hit_mannequin_with_bat_sub
3753 0A03FFFF         (instead_table_680):00027                 .db 10,3,255,255        ;enter TARDIS  
3757 3E61             (instead_table_680):00028                 .dw enter_tardis_sub
3759 2610FFFF         (instead_table_680):00029                 .db 38,16,255,255       ;push BUTTON  
375D 3EBA             (instead_table_680):00030                 .dw push_button_sub
375F 16030A1A         (instead_table_680):00031                 .db 22,3,10,26  ;unlock TARDIS with SONIC SCREWDRIVER
3763 3F47             (instead_table_680):00032                 .dw unlock_tardis_with_sonicscrewdriver_sub
3765 14030A1A         (instead_table_680):00033                 .db 20,3,10,26  ;open TARDIS with SONIC SCREWDRIVER
3769 3F47             (instead_table_680):00034                 .dw unlock_tardis_with_sonicscrewdriver_sub
376B 1A17061B         (instead_table_680):00035                 .db 26,23,6,27  ;put HAT on EYESTALK
376F 403A             (instead_table_680):00036                 .dw cover_eye_sub
3771 FF               (instead_table_680):00037                 .db 255
                      (instead_table_680):00038         
                      (         main.asm):00072                 include after_table_6809.asm
                      (after_table_6809.):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (after_table_6809.):00002         ; SentenceTable6809.asm 
                      (after_table_6809.):00003         ; Machine Generated Sentence Table
                      (after_table_6809.):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (after_table_6809.):00005         
3772                  (after_table_6809.):00006         postactions_table
3772 FF               (after_table_6809.):00007                 .db 255
                      (after_table_6809.):00008         
                      (         main.asm):00073                 include events.asm
                      (       events.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       events.asm):00002         ;events to run every turn
                      (       events.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3773                  (       events.asm):00004         do_events
3773 3436             (       events.asm):00005                 pshs d,x,y
                      (       events.asm):00006                 ;if player can't see, inc turns without light
3775 BD1BAC           (       events.asm):00007                 jsr get_player_room ; get room and leave it on stack
3778 BD1BC0           (       events.asm):00008                 jsr ambient_light 
377B 3702             (       events.asm):00009                 pulu a
377D 8100             (       events.asm):00010                 cmpa #0
377F 2611             (       events.asm):00011                 bne @l
3781 B64158           (       events.asm):00012                 lda turns_without_light
3784 4C               (       events.asm):00013                 inca 
3785 B74158           (       events.asm):00014                 sta turns_without_light
3788 8105             (       events.asm):00015                 cmpa #5
378A 8105             (       events.asm):00016                 cmpa #5
378C 1027001A         (       events.asm):00017                 lbeq no_light_death  ; will return
3790 2005             (       events.asm):00018                 bra @d
3792 8600             (       events.asm):00019         @l  lda #0                                              ;set turns w/o light back to 0
3794 B74158           (       events.asm):00020                 sta turns_without_light
3797 12               (       events.asm):00021         @d  nop ; end else      
                      (       events.asm):00022         
                      (       events.asm):00023         ;       jsr disolve_salt_sub
                      (       events.asm):00024                 include event_jumps_6809.asm
                      (event_jumps_6809.):00001         ; jump to machine generated subroutines
3798 BD3887           (event_jumps_6809.):00002                 jsr move_mannequin_event
379B BD39C4           (event_jumps_6809.):00003                 jsr countdown_event
379E BD3A88           (event_jumps_6809.):00004                 jsr follow_player_event
37A1 BD3AF4           (event_jumps_6809.):00005                 jsr judoon_rule_event
37A4 BD3B5F           (event_jumps_6809.):00006                 jsr game_won_event
                      (       events.asm):00025         
37A7 3536             (       events.asm):00026                 puls y,d,x
37A9 39               (       events.asm):00027                 rts
                      (       events.asm):00028         
                      (       events.asm):00029                 
                      (       events.asm):00030                 
37AA                  (       events.asm):00031         no_light_death
37AA 8E37B9           (       events.asm):00032                 ldx #nld
37AD BD1914           (       events.asm):00033                 jsr PRINT
37B0 BDB958           (       events.asm):00034                 jsr PRINTCR
37B3 BD3BD7           (       events.asm):00035                 jsr kill_player_sub
37B6 3536             (       events.asm):00036                 puls y,d,x
37B8 39               (       events.asm):00037                 rts
                      (       events.asm):00038                 
37B9 415320594F552046 (       events.asm):00039         nld .strz "AS YOU FUMBLE AROUND IN THE DARKNESS, THE UNSTABLE CANVERN COLLAPSES, KILLING YOU INSTANTLY.  OF LITTLE SOLACE IS THE THOUGHT THAT YOUR INVENTORY MIGHT BE OF USE TO FUTURE ADVENTURES EXPLORING THE CAVERNS."       
     554D424C45204152
     4F554E4420494E20
     544845204441524B
     4E4553532C205448
     4520554E53544142
     4C452043414E5645
     524E20434F4C4C41
     505345532C204B49
     4C4C494E4720594F
     5520494E5354414E
     544C592E20204F46
     204C4954544C4520
     534F4C4143452049
     5320544845205448
     4F55474854205448
     415420594F555220
     494E56454E544F52
     59204D4947485420
     4245204F46205553
     4520544F20465554
     5552452041445645
     4E54555245532045
     58504C4F52494E47
     2054484520434156
     45524E532E00
                      (         main.asm):00074                 include events6809.asm ; machine generated
                      (   events6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (   events6809.asm):00002         ; Machine generated include file
                      (   events6809.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (   events6809.asm):00004                 include move_mannequin_event_6809.asm
                      (move_mannequin_ev):00001         
                      (move_mannequin_ev):00002         ; machine generate routine from XML file
3887                  (move_mannequin_ev):00003         move_mannequin_event
3887 3436             (move_mannequin_ev):00004                 pshs d,x,y
3889 12               (move_mannequin_ev):00005                 nop ; test ((player.holder == 2nd floor))
388A 860A             (move_mannequin_ev):00006                 lda #10 ; 2nd floor
388C 3402             (move_mannequin_ev):00007                 pshs a    ; push right side
388E 8601             (move_mannequin_ev):00008                 lda #1 ; player
3890 C613             (move_mannequin_ev):00009                 ldb #OBJ_ENTRY_SIZE
3892 3D               (move_mannequin_ev):00010                 mul
3893 1F01             (move_mannequin_ev):00011                 tfr d,x
3895 30891EF4         (move_mannequin_ev):00012                 leax obj_table,x
3899 3001             (move_mannequin_ev):00013                 leax 1,x  ; holder
389B A684             (move_mannequin_ev):00014                 lda ,x
389D A1E4             (move_mannequin_ev):00015                 cmpa ,s ; compare to right side
389F 3601             (move_mannequin_ev):00016                 pshu cc ; save flags
38A1 3261             (move_mannequin_ev):00017                 leas 1,s ; pop right side
38A3 3701             (move_mannequin_ev):00018                 pulu cc ; restore flags
38A5 10260117         (move_mannequin_ev):00019                 lbne @a
38A9 12               (move_mannequin_ev):00020                 nop ; test ((mannequinMoved == 0))
38AA B64159           (move_mannequin_ev):00021                 lda mannequinMoved ; mannequinMoved
38AD 3402             (move_mannequin_ev):00022                 pshs a    ; push right left
38AF 8600             (move_mannequin_ev):00023                 lda #0 ; 0
38B1 A1E4             (move_mannequin_ev):00024                 cmpa ,s ; compare to right side
38B3 3601             (move_mannequin_ev):00025                 pshu cc ; save flags
38B5 3261             (move_mannequin_ev):00026                 leas 1,s ; pop right side
38B7 3701             (move_mannequin_ev):00027                 pulu cc ; restore flags
38B9 10260102         (move_mannequin_ev):00028                 lbne @b
38BD 12               (move_mannequin_ev):00029                 nop ; dalek.holder = inside tardis
38BE 8604             (move_mannequin_ev):00030                 lda #4 ; inside tardis
38C0 3402             (move_mannequin_ev):00031                 pshs a ; save value to put in attr
38C2 8616             (move_mannequin_ev):00032                 lda #22 ; dalek
38C4 C613             (move_mannequin_ev):00033                 ldb #OBJ_ENTRY_SIZE
38C6 3D               (move_mannequin_ev):00034                 mul
38C7 1F01             (move_mannequin_ev):00035                 tfr d,x
38C9 30891EF4         (move_mannequin_ev):00036                 leax obj_table,x
38CD 3001             (move_mannequin_ev):00037                 leax 1,x   ;holder
38CF 3502             (move_mannequin_ev):00038                 puls a ; restore rhs
38D1 A784             (move_mannequin_ev):00039                 sta ,x
38D3 12               (move_mannequin_ev):00040                 nop ; tardis.locked=1
38D4 12               (move_mannequin_ev):00041                 nop ; set tardis.locked=1
38D5 8603             (move_mannequin_ev):00042                 lda #3 ; tardis
38D7 C613             (move_mannequin_ev):00043                 ldb #OBJ_ENTRY_SIZE
38D9 3D               (move_mannequin_ev):00044                 mul
38DA 1F01             (move_mannequin_ev):00045                 tfr d,x
38DC 30891EF4         (move_mannequin_ev):00046                 leax obj_table,x
38E0 308811           (move_mannequin_ev):00047                 leax PROPERTY_BYTE_1,x
38E3 A684             (move_mannequin_ev):00048                 lda ,x  ; get property byte
38E5 C680             (move_mannequin_ev):00049                 ldb #128 ; get the mask for locked
38E7 53               (move_mannequin_ev):00050                 comb 128 ; invert it
38E8 3404             (move_mannequin_ev):00051                 pshs b
38EA A4E4             (move_mannequin_ev):00052                 anda ,s   ; clear the bit
38EC 3261             (move_mannequin_ev):00053                 leas 1,s ; pop stack
38EE 8A80             (move_mannequin_ev):00054                 ora #128   ; set the locked bit
38F0 A784             (move_mannequin_ev):00055                 sta ,x  ; store it
38F2 12               (move_mannequin_ev):00056                 nop ; tardis.open=0
38F3 12               (move_mannequin_ev):00057                 nop ; set tardis.open=0
38F4 8603             (move_mannequin_ev):00058                 lda #3 ; tardis
38F6 C613             (move_mannequin_ev):00059                 ldb #OBJ_ENTRY_SIZE
38F8 3D               (move_mannequin_ev):00060                 mul
38F9 1F01             (move_mannequin_ev):00061                 tfr d,x
38FB 30891EF4         (move_mannequin_ev):00062                 leax obj_table,x
38FF 308811           (move_mannequin_ev):00063                 leax PROPERTY_BYTE_1,x
3902 A684             (move_mannequin_ev):00064                 lda ,x  ; get property byte
3904 C620             (move_mannequin_ev):00065                 ldb #32 ; get the mask for open
3906 53               (move_mannequin_ev):00066                 comb 32 ; invert it
3907 3404             (move_mannequin_ev):00067                 pshs b
3909 A4E4             (move_mannequin_ev):00068                 anda ,s   ; clear the bit
390B 3261             (move_mannequin_ev):00069                 leas 1,s ; pop stack
390D A784             (move_mannequin_ev):00070                 sta ,x  ; store it
390F 12               (move_mannequin_ev):00071                 nop ; tardis.lockable=0
3910 12               (move_mannequin_ev):00072                 nop ; set tardis.lockable=0
3911 8603             (move_mannequin_ev):00073                 lda #3 ; tardis
3913 C613             (move_mannequin_ev):00074                 ldb #OBJ_ENTRY_SIZE
3915 3D               (move_mannequin_ev):00075                 mul
3916 1F01             (move_mannequin_ev):00076                 tfr d,x
3918 30891EF4         (move_mannequin_ev):00077                 leax obj_table,x
391C 308811           (move_mannequin_ev):00078                 leax PROPERTY_BYTE_1,x
391F A684             (move_mannequin_ev):00079                 lda ,x  ; get property byte
3921 C640             (move_mannequin_ev):00080                 ldb #64 ; get the mask for lockable
3923 53               (move_mannequin_ev):00081                 comb 64 ; invert it
3924 3404             (move_mannequin_ev):00082                 pshs b
3926 A4E4             (move_mannequin_ev):00083                 anda ,s   ; clear the bit
3928 3261             (move_mannequin_ev):00084                 leas 1,s ; pop stack
392A A784             (move_mannequin_ev):00085                 sta ,x  ; store it
392C 12               (move_mannequin_ev):00086                 nop ; mannequinMoved=1
392D 12               (move_mannequin_ev):00087                 nop ; mannequin.holder=inventory room
392E 860C             (move_mannequin_ev):00088                 lda #12 ; inventory room
3930 3402             (move_mannequin_ev):00089                 pshs a ; save value to put in attr
3932 8613             (move_mannequin_ev):00090                 lda #19 ; mannequin
3934 C613             (move_mannequin_ev):00091                 ldb #OBJ_ENTRY_SIZE
3936 3D               (move_mannequin_ev):00092                 mul
3937 1F01             (move_mannequin_ev):00093                 tfr d,x
3939 30891EF4         (move_mannequin_ev):00094                 leax obj_table,x
393D 3001             (move_mannequin_ev):00095                 leax 1,x   ;holder
393F 3502             (move_mannequin_ev):00096                 puls a ; restore rhs
3941 A784             (move_mannequin_ev):00097                 sta ,x
3943 12               (move_mannequin_ev):00098                 nop ; inventory room.locked = 0
3944 12               (move_mannequin_ev):00099                 nop ; set inventory room.locked=0
3945 860C             (move_mannequin_ev):00100                 lda #12 ; inventory room
3947 C613             (move_mannequin_ev):00101                 ldb #OBJ_ENTRY_SIZE
3949 3D               (move_mannequin_ev):00102                 mul
394A 1F01             (move_mannequin_ev):00103                 tfr d,x
394C 30891EF4         (move_mannequin_ev):00104                 leax obj_table,x
3950 308811           (move_mannequin_ev):00105                 leax PROPERTY_BYTE_1,x
3953 A684             (move_mannequin_ev):00106                 lda ,x  ; get property byte
3955 C680             (move_mannequin_ev):00107                 ldb #128 ; get the mask for locked
3957 53               (move_mannequin_ev):00108                 comb 128 ; invert it
3958 3404             (move_mannequin_ev):00109                 pshs b
395A A4E4             (move_mannequin_ev):00110                 anda ,s   ; clear the bit
395C 3261             (move_mannequin_ev):00111                 leas 1,s ; pop stack
395E A784             (move_mannequin_ev):00112                 sta ,x  ; store it
3960 12               (move_mannequin_ev):00113                 nop ; inventory room.lockable = 0
3961 12               (move_mannequin_ev):00114                 nop ; set inventory room.lockable=0
3962 860C             (move_mannequin_ev):00115                 lda #12 ; inventory room
3964 C613             (move_mannequin_ev):00116                 ldb #OBJ_ENTRY_SIZE
3966 3D               (move_mannequin_ev):00117                 mul
3967 1F01             (move_mannequin_ev):00118                 tfr d,x
3969 30891EF4         (move_mannequin_ev):00119                 leax obj_table,x
396D 308811           (move_mannequin_ev):00120                 leax PROPERTY_BYTE_1,x
3970 A684             (move_mannequin_ev):00121                 lda ,x  ; get property byte
3972 C640             (move_mannequin_ev):00122                 ldb #64 ; get the mask for lockable
3974 53               (move_mannequin_ev):00123                 comb 64 ; invert it
3975 3404             (move_mannequin_ev):00124                 pshs b
3977 A4E4             (move_mannequin_ev):00125                 anda ,s   ; clear the bit
3979 3261             (move_mannequin_ev):00126                 leas 1,s ; pop stack
397B A784             (move_mannequin_ev):00127                 sta ,x  ; store it
397D 12               (move_mannequin_ev):00128                 nop ; mannequin.description = "THE MANNEQUIN IS OBVIOUSLY ALIVE AND VERY DANGEROUS."
397E 8623             (move_mannequin_ev):00129                 lda #35 ; "THE MANNEQUIN IS OBVIOUSLY ALIVE AND VERY DANGEROUS."
3980 3402             (move_mannequin_ev):00130                 pshs a ; save value to put in attr
3982 8613             (move_mannequin_ev):00131                 lda #19 ; mannequin
3984 C613             (move_mannequin_ev):00132                 ldb #OBJ_ENTRY_SIZE
3986 3D               (move_mannequin_ev):00133                 mul
3987 1F01             (move_mannequin_ev):00134                 tfr d,x
3989 30891EF4         (move_mannequin_ev):00135                 leax obj_table,x
398D 3003             (move_mannequin_ev):00136                 leax 3,x   ;description
398F 3502             (move_mannequin_ev):00137                 puls a ; restore rhs
3991 A784             (move_mannequin_ev):00138                 sta ,x
3993 12               (move_mannequin_ev):00139                 nop ; mannequin.initial_description = "THE MANNEQUIN IS STANDING OVER ROSE'S BODY."
3994 8624             (move_mannequin_ev):00140                 lda #36 ; "THE MANNEQUIN IS STANDING OVER ROSE'S BODY."
3996 3402             (move_mannequin_ev):00141                 pshs a ; save value to put in attr
3998 8613             (move_mannequin_ev):00142                 lda #19 ; mannequin
399A C613             (move_mannequin_ev):00143                 ldb #OBJ_ENTRY_SIZE
399C 3D               (move_mannequin_ev):00144                 mul
399D 1F01             (move_mannequin_ev):00145                 tfr d,x
399F 30891EF4         (move_mannequin_ev):00146                 leax obj_table,x
39A3 3002             (move_mannequin_ev):00147                 leax 2,x   ;initial_description
39A5 3502             (move_mannequin_ev):00148                 puls a ; restore rhs
39A7 A784             (move_mannequin_ev):00149                 sta ,x
39A9 12               (move_mannequin_ev):00150                 nop ; hat.initial_description = "A STYLISH HAT LIES ON THE FLOOR."
39AA 8625             (move_mannequin_ev):00151                 lda #37 ; "A STYLISH HAT LIES ON THE FLOOR."
39AC 3402             (move_mannequin_ev):00152                 pshs a ; save value to put in attr
39AE 8617             (move_mannequin_ev):00153                 lda #23 ; hat
39B0 C613             (move_mannequin_ev):00154                 ldb #OBJ_ENTRY_SIZE
39B2 3D               (move_mannequin_ev):00155                 mul
39B3 1F01             (move_mannequin_ev):00156                 tfr d,x
39B5 30891EF4         (move_mannequin_ev):00157                 leax obj_table,x
39B9 3002             (move_mannequin_ev):00158                 leax 2,x   ;initial_description
39BB 3502             (move_mannequin_ev):00159                 puls a ; restore rhs
39BD A784             (move_mannequin_ev):00160                 sta ,x
39BF 12               (move_mannequin_ev):00161         @b      nop ; close (mannequinMoved == 0)
39C0 12               (move_mannequin_ev):00162         @a      nop ; close (player.holder == 2nd floor)
39C1 3536             (move_mannequin_ev):00163                 puls y,x,d
39C3 39               (move_mannequin_ev):00164                 rts
                      (move_mannequin_ev):00165         
                      (   events6809.asm):00005                 include countdown_event_6809.asm
                      (countdown_event_6):00001         
                      (countdown_event_6):00002         ; machine generate routine from XML file
39C4                  (countdown_event_6):00003         countdown_event
39C4 3436             (countdown_event_6):00004                 pshs d,x,y
39C6 12               (countdown_event_6):00005                 nop ; test ((activated==1))
39C7 B6415E           (countdown_event_6):00006                 lda activated ; activated
39CA 3402             (countdown_event_6):00007                 pshs a    ; push right left
39CC 8601             (countdown_event_6):00008                 lda #1 ; 1
39CE A1E4             (countdown_event_6):00009                 cmpa ,s ; compare to right side
39D0 3601             (countdown_event_6):00010                 pshu cc ; save flags
39D2 3261             (countdown_event_6):00011                 leas 1,s ; pop right side
39D4 3701             (countdown_event_6):00012                 pulu cc ; restore flags
39D6 102600AA         (countdown_event_6):00013                 lbne @a
39DA 12               (countdown_event_6):00014                 nop ; test ((countDown != 3))
39DB B6415D           (countdown_event_6):00015                 lda countDown ; countDown
39DE 3402             (countdown_event_6):00016                 pshs a    ; push right left
39E0 8603             (countdown_event_6):00017                 lda #3 ; 3
39E2 A1E4             (countdown_event_6):00018                 cmpa ,s ; compare to right side
39E4 3601             (countdown_event_6):00019                 pshu cc ; save flags
39E6 3261             (countdown_event_6):00020                 leas 1,s ; pop right side
39E8 3701             (countdown_event_6):00021                 pulu cc ; restore flags
39EA 10270095         (countdown_event_6):00022                 lbeq @b
39EE 12               (countdown_event_6):00023                 nop ; add(countDown,1)
39EF 3402             (countdown_event_6):00024                 pshs a
39F1 B6415D           (countdown_event_6):00025                 lda countDown
39F4 3602             (countdown_event_6):00026                 pshu a ; push var value
39F6 8601             (countdown_event_6):00027                 lda #1 ; push val to add
39F8 ABC4             (countdown_event_6):00028                 adda ,u ; add it 
39FA B7415D           (countdown_event_6):00029                 sta countDown ; store it back
39FD 3702             (countdown_event_6):00030                 pulu a ; remove temp
39FF 3502             (countdown_event_6):00031                 puls a
3A01 12               (countdown_event_6):00032                 nop ; test ((countDown==3))
3A02 B6415D           (countdown_event_6):00033                 lda countDown ; countDown
3A05 3402             (countdown_event_6):00034                 pshs a    ; push right left
3A07 8603             (countdown_event_6):00035                 lda #3 ; 3
3A09 A1E4             (countdown_event_6):00036                 cmpa ,s ; compare to right side
3A0B 3601             (countdown_event_6):00037                 pshu cc ; save flags
3A0D 3261             (countdown_event_6):00038                 leas 1,s ; pop right side
3A0F 3701             (countdown_event_6):00039                 pulu cc ; restore flags
3A11 1026006D         (countdown_event_6):00040                 lbne @c
3A15 12               (countdown_event_6):00041                 nop ; println("AS THE SELF DESTRUCT ACTIVATES, THE DALEK IS SHATTERED BY A POWERFUL INTERNAL EXPLOSION.")
3A16 8E21B6           (countdown_event_6):00042                 ldx #description_table
3A19 8626             (countdown_event_6):00043                 lda #38 ; AS THE SELF DESTRUCT ACTIVATES, THE DALEK IS SHATTERED BY A POWERFUL INTERNAL EXPLOSION.
3A1B 3602             (countdown_event_6):00044                 pshu a
3A1D BD19FF           (countdown_event_6):00045                 jsr print_table_entry
3A20 BDB958           (countdown_event_6):00046                 jsr PRINTCR
3A23 12               (countdown_event_6):00047                 nop ; dalek.holder=0
3A24 8600             (countdown_event_6):00048                 lda #0 ; 0
3A26 3402             (countdown_event_6):00049                 pshs a ; save value to put in attr
3A28 8616             (countdown_event_6):00050                 lda #22 ; dalek
3A2A C613             (countdown_event_6):00051                 ldb #OBJ_ENTRY_SIZE
3A2C 3D               (countdown_event_6):00052                 mul
3A2D 1F01             (countdown_event_6):00053                 tfr d,x
3A2F 30891EF4         (countdown_event_6):00054                 leax obj_table,x
3A33 3001             (countdown_event_6):00055                 leax 1,x   ;holder
3A35 3502             (countdown_event_6):00056                 puls a ; restore rhs
3A37 A784             (countdown_event_6):00057                 sta ,x
3A39 12               (countdown_event_6):00058                 nop ; test ((player.holder == inside tardis))
3A3A 8604             (countdown_event_6):00059                 lda #4 ; inside tardis
3A3C 3402             (countdown_event_6):00060                 pshs a    ; push right side
3A3E 8601             (countdown_event_6):00061                 lda #1 ; player
3A40 C613             (countdown_event_6):00062                 ldb #OBJ_ENTRY_SIZE
3A42 3D               (countdown_event_6):00063                 mul
3A43 1F01             (countdown_event_6):00064                 tfr d,x
3A45 30891EF4         (countdown_event_6):00065                 leax obj_table,x
3A49 3001             (countdown_event_6):00066                 leax 1,x  ; holder
3A4B A684             (countdown_event_6):00067                 lda ,x
3A4D A1E4             (countdown_event_6):00068                 cmpa ,s ; compare to right side
3A4F 3601             (countdown_event_6):00069                 pshu cc ; save flags
3A51 3261             (countdown_event_6):00070                 leas 1,s ; pop right side
3A53 3701             (countdown_event_6):00071                 pulu cc ; restore flags
3A55 10260028         (countdown_event_6):00072                 lbne @d
3A59 12               (countdown_event_6):00073                 nop ; println("THE MASSIVE CONCUSSSION, TRAPPED INSIDE THE TARDIS, KILLS YOU INSTANTLY.")
3A5A 8E21B6           (countdown_event_6):00074                 ldx #description_table
3A5D 8627             (countdown_event_6):00075                 lda #39 ; THE MASSIVE CONCUSSSION, TRAPPED INSIDE THE TARDIS, KILLS YOU INSTANTLY.
3A5F 3602             (countdown_event_6):00076                 pshu a
3A61 BD19FF           (countdown_event_6):00077                 jsr print_table_entry
3A64 BDB958           (countdown_event_6):00078                 jsr PRINTCR
3A67 12               (countdown_event_6):00079                 nop ; player.holder=trenzalore
3A68 861C             (countdown_event_6):00080                 lda #28 ; trenzalore
3A6A 3402             (countdown_event_6):00081                 pshs a ; save value to put in attr
3A6C 8601             (countdown_event_6):00082                 lda #1 ; player
3A6E C613             (countdown_event_6):00083                 ldb #OBJ_ENTRY_SIZE
3A70 3D               (countdown_event_6):00084                 mul
3A71 1F01             (countdown_event_6):00085                 tfr d,x
3A73 30891EF4         (countdown_event_6):00086                 leax obj_table,x
3A77 3001             (countdown_event_6):00087                 leax 1,x   ;holder
3A79 3502             (countdown_event_6):00088                 puls a ; restore rhs
3A7B A784             (countdown_event_6):00089                 sta ,x
3A7D 12               (countdown_event_6):00090                 nop ; look()
3A7E BD1746           (countdown_event_6):00091                 jsr look_sub
3A81 12               (countdown_event_6):00092         @d      nop ; close (player.holder == inside tardis)
3A82 12               (countdown_event_6):00093         @c      nop ; close (countDown==3)
3A83 12               (countdown_event_6):00094         @b      nop ; close (countDown != 3)
3A84 12               (countdown_event_6):00095         @a      nop ; close (activated==1)
3A85 3536             (countdown_event_6):00096                 puls y,x,d
3A87 39               (countdown_event_6):00097                 rts
                      (countdown_event_6):00098         
                      (   events6809.asm):00006                 include follow_player_event_6809.asm
                      (follow_player_eve):00001         
                      (follow_player_eve):00002         ; machine generate routine from XML file
3A88                  (follow_player_eve):00003         follow_player_event
3A88 3436             (follow_player_eve):00004                 pshs d,x,y
3A8A 12               (follow_player_eve):00005                 nop ; test ((activated==1))
3A8B B6415E           (follow_player_eve):00006                 lda activated ; activated
3A8E 3402             (follow_player_eve):00007                 pshs a    ; push right left
3A90 8601             (follow_player_eve):00008                 lda #1 ; 1
3A92 A1E4             (follow_player_eve):00009                 cmpa ,s ; compare to right side
3A94 3601             (follow_player_eve):00010                 pshu cc ; save flags
3A96 3261             (follow_player_eve):00011                 leas 1,s ; pop right side
3A98 3701             (follow_player_eve):00012                 pulu cc ; restore flags
3A9A 10260052         (follow_player_eve):00013                 lbne @a
3A9E 12               (follow_player_eve):00014                 nop ; test ((dalek.holder != 0))
3A9F 8600             (follow_player_eve):00015                 lda #0 ; 0
3AA1 3402             (follow_player_eve):00016                 pshs a    ; push right side
3AA3 8616             (follow_player_eve):00017                 lda #22 ; dalek
3AA5 C613             (follow_player_eve):00018                 ldb #OBJ_ENTRY_SIZE
3AA7 3D               (follow_player_eve):00019                 mul
3AA8 1F01             (follow_player_eve):00020                 tfr d,x
3AAA 30891EF4         (follow_player_eve):00021                 leax obj_table,x
3AAE 3001             (follow_player_eve):00022                 leax 1,x  ; holder
3AB0 A684             (follow_player_eve):00023                 lda ,x
3AB2 A1E4             (follow_player_eve):00024                 cmpa ,s ; compare to right side
3AB4 3601             (follow_player_eve):00025                 pshu cc ; save flags
3AB6 3261             (follow_player_eve):00026                 leas 1,s ; pop right side
3AB8 3701             (follow_player_eve):00027                 pulu cc ; restore flags
3ABA 10270031         (follow_player_eve):00028                 lbeq @b
3ABE 12               (follow_player_eve):00029                 nop ; println("THE DALEK IS FOLLOWING YOU.")
3ABF 8E21B6           (follow_player_eve):00030                 ldx #description_table
3AC2 8628             (follow_player_eve):00031                 lda #40 ; THE DALEK IS FOLLOWING YOU.
3AC4 3602             (follow_player_eve):00032                 pshu a
3AC6 BD19FF           (follow_player_eve):00033                 jsr print_table_entry
3AC9 BDB958           (follow_player_eve):00034                 jsr PRINTCR
3ACC 12               (follow_player_eve):00035                 nop ; dalek.holder = player.holder
3ACD                  (follow_player_eve):00036         nop ; setting up rhs attribute
3ACD 8601             (follow_player_eve):00037                 lda #1 ; player
3ACF C613             (follow_player_eve):00038                 ldb #OBJ_ENTRY_SIZE
3AD1 3D               (follow_player_eve):00039                 mul
3AD2 1F01             (follow_player_eve):00040                 tfr d,x
3AD4 30891EF4         (follow_player_eve):00041                 leax obj_table,x
3AD8 3001             (follow_player_eve):00042                 leax 1,x  ; holder
3ADA A684             (follow_player_eve):00043                 lda ,x
3ADC 3402             (follow_player_eve):00044                 pshs a ; save value to put in attr
3ADE 8616             (follow_player_eve):00045                 lda #22 ; dalek
3AE0 C613             (follow_player_eve):00046                 ldb #OBJ_ENTRY_SIZE
3AE2 3D               (follow_player_eve):00047                 mul
3AE3 1F01             (follow_player_eve):00048                 tfr d,x
3AE5 30891EF4         (follow_player_eve):00049                 leax obj_table,x
3AE9 3001             (follow_player_eve):00050                 leax 1,x   ;holder
3AEB 3502             (follow_player_eve):00051                 puls a ; restore rhs
3AED A784             (follow_player_eve):00052                 sta ,x
3AEF 12               (follow_player_eve):00053         @b      nop ; close (dalek.holder != 0)
3AF0 12               (follow_player_eve):00054         @a      nop ; close (activated==1)
3AF1 3536             (follow_player_eve):00055                 puls y,x,d
3AF3 39               (follow_player_eve):00056                 rts
                      (follow_player_eve):00057         
                      (   events6809.asm):00007                 include judoon_rule_event_6809.asm
                      (judoon_rule_event):00001         
                      (judoon_rule_event):00002         ; machine generate routine from XML file
3AF4                  (judoon_rule_event):00003         judoon_rule_event
3AF4 3436             (judoon_rule_event):00004                 pshs d,x,y
3AF6 12               (judoon_rule_event):00005                 nop ; test ((player.holder == lobby))
3AF7 860E             (judoon_rule_event):00006                 lda #14 ; lobby
3AF9 3402             (judoon_rule_event):00007                 pshs a    ; push right side
3AFB 8601             (judoon_rule_event):00008                 lda #1 ; player
3AFD C613             (judoon_rule_event):00009                 ldb #OBJ_ENTRY_SIZE
3AFF 3D               (judoon_rule_event):00010                 mul
3B00 1F01             (judoon_rule_event):00011                 tfr d,x
3B02 30891EF4         (judoon_rule_event):00012                 leax obj_table,x
3B06 3001             (judoon_rule_event):00013                 leax 1,x  ; holder
3B08 A684             (judoon_rule_event):00014                 lda ,x
3B0A A1E4             (judoon_rule_event):00015                 cmpa ,s ; compare to right side
3B0C 3601             (judoon_rule_event):00016                 pshu cc ; save flags
3B0E 3261             (judoon_rule_event):00017                 leas 1,s ; pop right side
3B10 3701             (judoon_rule_event):00018                 pulu cc ; restore flags
3B12 10260045         (judoon_rule_event):00019                 lbne @a
3B16 12               (judoon_rule_event):00020                 nop ; test ((mannequin.holder != 0))
3B17 8600             (judoon_rule_event):00021                 lda #0 ; 0
3B19 3402             (judoon_rule_event):00022                 pshs a    ; push right side
3B1B 8613             (judoon_rule_event):00023                 lda #19 ; mannequin
3B1D C613             (judoon_rule_event):00024                 ldb #OBJ_ENTRY_SIZE
3B1F 3D               (judoon_rule_event):00025                 mul
3B20 1F01             (judoon_rule_event):00026                 tfr d,x
3B22 30891EF4         (judoon_rule_event):00027                 leax obj_table,x
3B26 3001             (judoon_rule_event):00028                 leax 1,x  ; holder
3B28 A684             (judoon_rule_event):00029                 lda ,x
3B2A A1E4             (judoon_rule_event):00030                 cmpa ,s ; compare to right side
3B2C 3601             (judoon_rule_event):00031                 pshu cc ; save flags
3B2E 3261             (judoon_rule_event):00032                 leas 1,s ; pop right side
3B30 3701             (judoon_rule_event):00033                 pulu cc ; restore flags
3B32 10270024         (judoon_rule_event):00034                 lbeq @b
3B36 12               (judoon_rule_event):00035                 nop ; println("AS YOU ENTER THE LOBBY, A HULKING JUDOON WALKS BY, KNOCKING YOU BACK OUTSIDE."
3B37 8E21B6           (judoon_rule_event):00036                 ldx #description_table
3B3A 8629             (judoon_rule_event):00037                 lda #41 ; AS YOU ENTER THE LOBBY, A HULKING JUDOON WALKS BY, KNOCKING YOU BACK OUTSIDE.
3B3C 3602             (judoon_rule_event):00038                 pshu a
3B3E BD19FF           (judoon_rule_event):00039                 jsr print_table_entry
3B41 BDB958           (judoon_rule_event):00040                 jsr PRINTCR
3B44 12               (judoon_rule_event):00041                 nop ; player.holder = north street
3B45 8607             (judoon_rule_event):00042                 lda #7 ; north street
3B47 3402             (judoon_rule_event):00043                 pshs a ; save value to put in attr
3B49 8601             (judoon_rule_event):00044                 lda #1 ; player
3B4B C613             (judoon_rule_event):00045                 ldb #OBJ_ENTRY_SIZE
3B4D 3D               (judoon_rule_event):00046                 mul
3B4E 1F01             (judoon_rule_event):00047                 tfr d,x
3B50 30891EF4         (judoon_rule_event):00048                 leax obj_table,x
3B54 3001             (judoon_rule_event):00049                 leax 1,x   ;holder
3B56 3502             (judoon_rule_event):00050                 puls a ; restore rhs
3B58 A784             (judoon_rule_event):00051                 sta ,x
3B5A 12               (judoon_rule_event):00052         @b      nop ; close (mannequin.holder != 0)
3B5B 12               (judoon_rule_event):00053         @a      nop ; close (player.holder == lobby)
3B5C 3536             (judoon_rule_event):00054                 puls y,x,d
3B5E 39               (judoon_rule_event):00055                 rts
                      (judoon_rule_event):00056         
                      (   events6809.asm):00008                 include game_won_event_6809.asm
                      (game_won_event_68):00001         
                      (game_won_event_68):00002         ; machine generate routine from XML file
3B5F                  (game_won_event_68):00003         game_won_event
3B5F 3436             (game_won_event_68):00004                 pshs d,x,y
3B61 12               (game_won_event_68):00005                 nop ; test ((player.holder == inside tardis))
3B62 8604             (game_won_event_68):00006                 lda #4 ; inside tardis
3B64 3402             (game_won_event_68):00007                 pshs a    ; push right side
3B66 8601             (game_won_event_68):00008                 lda #1 ; player
3B68 C613             (game_won_event_68):00009                 ldb #OBJ_ENTRY_SIZE
3B6A 3D               (game_won_event_68):00010                 mul
3B6B 1F01             (game_won_event_68):00011                 tfr d,x
3B6D 30891EF4         (game_won_event_68):00012                 leax obj_table,x
3B71 3001             (game_won_event_68):00013                 leax 1,x  ; holder
3B73 A684             (game_won_event_68):00014                 lda ,x
3B75 A1E4             (game_won_event_68):00015                 cmpa ,s ; compare to right side
3B77 3601             (game_won_event_68):00016                 pshu cc ; save flags
3B79 3261             (game_won_event_68):00017                 leas 1,s ; pop right side
3B7B 3701             (game_won_event_68):00018                 pulu cc ; restore flags
3B7D 1026003F         (game_won_event_68):00019                 lbne @a
3B81 12               (game_won_event_68):00020                 nop ; test ((countDown == 3))
3B82 B6415D           (game_won_event_68):00021                 lda countDown ; countDown
3B85 3402             (game_won_event_68):00022                 pshs a    ; push right left
3B87 8603             (game_won_event_68):00023                 lda #3 ; 3
3B89 A1E4             (game_won_event_68):00024                 cmpa ,s ; compare to right side
3B8B 3601             (game_won_event_68):00025                 pshu cc ; save flags
3B8D 3261             (game_won_event_68):00026                 leas 1,s ; pop right side
3B8F 3701             (game_won_event_68):00027                 pulu cc ; restore flags
3B91 1026002A         (game_won_event_68):00028                 lbne @b
3B95 12               (game_won_event_68):00029                 nop ; println("CONGRATULATIONS!  WITH THE DALEK DESTROYED, YOU AND THE TARDIS ARE NOW READY FOR YOUR FURTHER ADVENTURES.")
3B96 8E21B6           (game_won_event_68):00030                 ldx #description_table
3B99 862A             (game_won_event_68):00031                 lda #42 ; CONGRATULATIONS!  WITH THE DALEK DESTROYED, YOU AND THE TARDIS ARE NOW READY FOR YOUR FURTHER ADVENTURES.
3B9B 3602             (game_won_event_68):00032                 pshu a
3B9D BD19FF           (game_won_event_68):00033                 jsr print_table_entry
3BA0 BDB958           (game_won_event_68):00034                 jsr PRINTCR
3BA3 12               (game_won_event_68):00035                 nop ; println("STORY COMPLETE.")
3BA4 8E21B6           (game_won_event_68):00036                 ldx #description_table
3BA7 862B             (game_won_event_68):00037                 lda #43 ; STORY COMPLETE.
3BA9 3602             (game_won_event_68):00038                 pshu a
3BAB BD19FF           (game_won_event_68):00039                 jsr print_table_entry
3BAE BDB958           (game_won_event_68):00040                 jsr PRINTCR
3BB1 12               (game_won_event_68):00041                 nop ; println("TYPE 'QUIT' TO EXIT GAME.")
3BB2 8E21B6           (game_won_event_68):00042                 ldx #description_table
3BB5 862C             (game_won_event_68):00043                 lda #44 ; TYPE 'QUIT' TO EXIT GAME.
3BB7 3602             (game_won_event_68):00044                 pshu a
3BB9 BD19FF           (game_won_event_68):00045                 jsr print_table_entry
3BBC BDB958           (game_won_event_68):00046                 jsr PRINTCR
3BBF 12               (game_won_event_68):00047         @b      nop ; close (countDown == 3)
3BC0 12               (game_won_event_68):00048         @a      nop ; close (player.holder == inside tardis)
3BC1 3536             (game_won_event_68):00049                 puls y,x,d
3BC3 39               (game_won_event_68):00050                 rts
                      (game_won_event_68):00051         
                      (   events6809.asm):00009                 include kill_self_sub_6809.asm
                      (kill_self_sub_680):00001         
                      (kill_self_sub_680):00002         ; machine generate routine from XML file
3BC4                  (kill_self_sub_680):00003         kill_self_sub
3BC4 3436             (kill_self_sub_680):00004                 pshs d,x,y
3BC6 12               (kill_self_sub_680):00005                 nop ; println("IF YOU ARE EXPERIENCING SUICIDAL THOUGHTS, YOU SHOULD SEEK PHSYCIATRIC HELP.")
3BC7 8E21B6           (kill_self_sub_680):00006                 ldx #description_table
3BCA 862D             (kill_self_sub_680):00007                 lda #45 ; IF YOU ARE EXPERIENCING SUICIDAL THOUGHTS, YOU SHOULD SEEK PHSYCIATRIC HELP.
3BCC 3602             (kill_self_sub_680):00008                 pshu a
3BCE BD19FF           (kill_self_sub_680):00009                 jsr print_table_entry
3BD1 BDB958           (kill_self_sub_680):00010                 jsr PRINTCR
3BD4 3536             (kill_self_sub_680):00011                 puls y,x,d
3BD6 39               (kill_self_sub_680):00012                 rts
                      (kill_self_sub_680):00013         
                      (   events6809.asm):00010                 include kill_player_sub_6809.asm
                      (kill_player_sub_6):00001         
                      (kill_player_sub_6):00002         ; machine generate routine from XML file
3BD7                  (kill_player_sub_6):00003         kill_player_sub
3BD7 3436             (kill_player_sub_6):00004                 pshs d,x,y
3BD9 12               (kill_player_sub_6):00005                 nop ; println("***YOU HAVE DIED***.")
3BDA 8E21B6           (kill_player_sub_6):00006                 ldx #description_table
3BDD 862E             (kill_player_sub_6):00007                 lda #46 ; ***YOU HAVE DIED***.
3BDF 3602             (kill_player_sub_6):00008                 pshu a
3BE1 BD19FF           (kill_player_sub_6):00009                 jsr print_table_entry
3BE4 BDB958           (kill_player_sub_6):00010                 jsr PRINTCR
3BE7 12               (kill_player_sub_6):00011                 nop ; player.holder=1
3BE8 8601             (kill_player_sub_6):00012                 lda #1 ; 1
3BEA 3402             (kill_player_sub_6):00013                 pshs a ; save value to put in attr
3BEC 8601             (kill_player_sub_6):00014                 lda #1 ; player
3BEE C613             (kill_player_sub_6):00015                 ldb #OBJ_ENTRY_SIZE
3BF0 3D               (kill_player_sub_6):00016                 mul
3BF1 1F01             (kill_player_sub_6):00017                 tfr d,x
3BF3 30891EF4         (kill_player_sub_6):00018                 leax obj_table,x
3BF7 3001             (kill_player_sub_6):00019                 leax 1,x   ;holder
3BF9 3502             (kill_player_sub_6):00020                 puls a ; restore rhs
3BFB A784             (kill_player_sub_6):00021                 sta ,x
3BFD 3536             (kill_player_sub_6):00022                 puls y,x,d
3BFF 39               (kill_player_sub_6):00023                 rts
                      (kill_player_sub_6):00024         
                      (   events6809.asm):00011                 include talk_to_self_sub_6809.asm
                      (talk_to_self_sub_):00001         
                      (talk_to_self_sub_):00002         ; machine generate routine from XML file
3C00                  (talk_to_self_sub_):00003         talk_to_self_sub
3C00 3436             (talk_to_self_sub_):00004                 pshs d,x,y
3C02 12               (talk_to_self_sub_):00005                 nop ; println("TALKING TO YOURSELF IS A SIGN OF IMPENDING MENTAL COLLAPSE.")
3C03 8E21B6           (talk_to_self_sub_):00006                 ldx #description_table
3C06 862F             (talk_to_self_sub_):00007                 lda #47 ; TALKING TO YOURSELF IS A SIGN OF IMPENDING MENTAL COLLAPSE.
3C08 3602             (talk_to_self_sub_):00008                 pshu a
3C0A BD19FF           (talk_to_self_sub_):00009                 jsr print_table_entry
3C0D BDB958           (talk_to_self_sub_):00010                 jsr PRINTCR
3C10 3536             (talk_to_self_sub_):00011                 puls y,x,d
3C12 39               (talk_to_self_sub_):00012                 rts
                      (talk_to_self_sub_):00013         
                      (   events6809.asm):00012                 include listen_sub_6809.asm
                      (listen_sub_6809.a):00001         
                      (listen_sub_6809.a):00002         ; machine generate routine from XML file
3C13                  (listen_sub_6809.a):00003         listen_sub
3C13 3436             (listen_sub_6809.a):00004                 pshs d,x,y
3C15 12               (listen_sub_6809.a):00005                 nop ; println("YOU HEAR NOTHING UNEXPECTED.")
3C16 8E21B6           (listen_sub_6809.a):00006                 ldx #description_table
3C19 8630             (listen_sub_6809.a):00007                 lda #48 ; YOU HEAR NOTHING UNEXPECTED.
3C1B 3602             (listen_sub_6809.a):00008                 pshu a
3C1D BD19FF           (listen_sub_6809.a):00009                 jsr print_table_entry
3C20 BDB958           (listen_sub_6809.a):00010                 jsr PRINTCR
3C23 3536             (listen_sub_6809.a):00011                 puls y,x,d
3C25 39               (listen_sub_6809.a):00012                 rts
                      (listen_sub_6809.a):00013         
                      (   events6809.asm):00013                 include smell_sub_6809.asm
                      (smell_sub_6809.as):00001         
                      (smell_sub_6809.as):00002         ; machine generate routine from XML file
3C26                  (smell_sub_6809.as):00003         smell_sub
3C26 3436             (smell_sub_6809.as):00004                 pshs d,x,y
3C28 12               (smell_sub_6809.as):00005                 nop ; println("YOU SMELL NOTHING UNEXPECTED.")
3C29 8E21B6           (smell_sub_6809.as):00006                 ldx #description_table
3C2C 8631             (smell_sub_6809.as):00007                 lda #49 ; YOU SMELL NOTHING UNEXPECTED.
3C2E 3602             (smell_sub_6809.as):00008                 pshu a
3C30 BD19FF           (smell_sub_6809.as):00009                 jsr print_table_entry
3C33 BDB958           (smell_sub_6809.as):00010                 jsr PRINTCR
3C36 3536             (smell_sub_6809.as):00011                 puls y,x,d
3C38 39               (smell_sub_6809.as):00012                 rts
                      (smell_sub_6809.as):00013         
                      (   events6809.asm):00014                 include wait_sub_6809.asm
                      (wait_sub_6809.asm):00001         
                      (wait_sub_6809.asm):00002         ; machine generate routine from XML file
3C39                  (wait_sub_6809.asm):00003         wait_sub
3C39 3436             (wait_sub_6809.asm):00004                 pshs d,x,y
3C3B 12               (wait_sub_6809.asm):00005                 nop ; println("TIME PASSES...")
3C3C 8E21B6           (wait_sub_6809.asm):00006                 ldx #description_table
3C3F 8632             (wait_sub_6809.asm):00007                 lda #50 ; TIME PASSES...
3C41 3602             (wait_sub_6809.asm):00008                 pshu a
3C43 BD19FF           (wait_sub_6809.asm):00009                 jsr print_table_entry
3C46 BDB958           (wait_sub_6809.asm):00010                 jsr PRINTCR
3C49 3536             (wait_sub_6809.asm):00011                 puls y,x,d
3C4B 39               (wait_sub_6809.asm):00012                 rts
                      (wait_sub_6809.asm):00013         
                      (   events6809.asm):00015                 include yell_sub_6809.asm
                      (yell_sub_6809.asm):00001         
                      (yell_sub_6809.asm):00002         ; machine generate routine from XML file
3C4C                  (yell_sub_6809.asm):00003         yell_sub
3C4C 3436             (yell_sub_6809.asm):00004                 pshs d,x,y
3C4E 12               (yell_sub_6809.asm):00005                 nop ; println("AAAAAAAAAAAAARRRRGGGGGG!")
3C4F 8E21B6           (yell_sub_6809.asm):00006                 ldx #description_table
3C52 8633             (yell_sub_6809.asm):00007                 lda #51 ; AAAAAAAAAAAAARRRRGGGGGG!
3C54 3602             (yell_sub_6809.asm):00008                 pshu a
3C56 BD19FF           (yell_sub_6809.asm):00009                 jsr print_table_entry
3C59 BDB958           (yell_sub_6809.asm):00010                 jsr PRINTCR
3C5C 3536             (yell_sub_6809.asm):00011                 puls y,x,d
3C5E 39               (yell_sub_6809.asm):00012                 rts
                      (yell_sub_6809.asm):00013         
                      (   events6809.asm):00016                 include jump_sub_6809.asm
                      (jump_sub_6809.asm):00001         
                      (jump_sub_6809.asm):00002         ; machine generate routine from XML file
3C5F                  (jump_sub_6809.asm):00003         jump_sub
3C5F 3436             (jump_sub_6809.asm):00004                 pshs d,x,y
3C61 12               (jump_sub_6809.asm):00005                 nop ; println("WHEEE!")
3C62 8E21B6           (jump_sub_6809.asm):00006                 ldx #description_table
3C65 8634             (jump_sub_6809.asm):00007                 lda #52 ; WHEEE!
3C67 3602             (jump_sub_6809.asm):00008                 pshu a
3C69 BD19FF           (jump_sub_6809.asm):00009                 jsr print_table_entry
3C6C BDB958           (jump_sub_6809.asm):00010                 jsr PRINTCR
3C6F 3536             (jump_sub_6809.asm):00011                 puls y,x,d
3C71 39               (jump_sub_6809.asm):00012                 rts
                      (jump_sub_6809.asm):00013         
                      (   events6809.asm):00017                 include take_portable_sub_6809.asm
                      (take_portable_sub):00001         
                      (take_portable_sub):00002         ; machine generate routine from XML file
3C72                  (take_portable_sub):00003         take_portable_sub
3C72 3436             (take_portable_sub):00004                 pshs d,x,y
3C74 12               (take_portable_sub):00005                 nop ; test (($dobj.portable==1))
3C75 8601             (take_portable_sub):00006                 lda #1
3C77 3402             (take_portable_sub):00007                 pshs a    ; push right side
3C79 B611C8           (take_portable_sub):00008                 lda sentence+1
3C7C C613             (take_portable_sub):00009                 ldb #OBJ_ENTRY_SIZE
3C7E 3D               (take_portable_sub):00010                 mul
3C7F 1F01             (take_portable_sub):00011                 tfr d,x
3C81 30891EF4         (take_portable_sub):00012                 leax obj_table,x
3C85 308812           (take_portable_sub):00013                 leax PROPERTY_BYTE_2,x  ; 
3C88 A684             (take_portable_sub):00014                 lda ,x  ; get property byte
3C8A 8401             (take_portable_sub):00015                 anda #1 ; isolate portable  bit 
3C8C A1E4             (take_portable_sub):00016                 cmpa ,s ; compare to right side
3C8E 3601             (take_portable_sub):00017                 pshu cc ; save flags
3C90 3261             (take_portable_sub):00018                 leas 1,s ; pop right side
3C92 3701             (take_portable_sub):00019                 pulu cc ; restore flags
3C94 10260046         (take_portable_sub):00020                 lbne @a
3C98 12               (take_portable_sub):00021                 nop ; test (($dobj.holder != player))
3C99 8601             (take_portable_sub):00022                 lda #1 ; player
3C9B 3402             (take_portable_sub):00023                 pshs a    ; push right side
3C9D B611C8           (take_portable_sub):00024                 lda sentence+1 ; $dobj
3CA0 C613             (take_portable_sub):00025                 ldb #OBJ_ENTRY_SIZE
3CA2 3D               (take_portable_sub):00026                 mul
3CA3 1F01             (take_portable_sub):00027                 tfr d,x
3CA5 30891EF4         (take_portable_sub):00028                 leax obj_table,x
3CA9 3001             (take_portable_sub):00029                 leax 1,x  ; holder
3CAB A684             (take_portable_sub):00030                 lda ,x
3CAD A1E4             (take_portable_sub):00031                 cmpa ,s ; compare to right side
3CAF 3601             (take_portable_sub):00032                 pshu cc ; save flags
3CB1 3261             (take_portable_sub):00033                 leas 1,s ; pop right side
3CB3 3701             (take_portable_sub):00034                 pulu cc ; restore flags
3CB5 10270024         (take_portable_sub):00035                 lbeq @b
3CB9 12               (take_portable_sub):00036                 nop ; println("(TAKEN)")
3CBA 8E21B6           (take_portable_sub):00037                 ldx #description_table
3CBD 8635             (take_portable_sub):00038                 lda #53 ; (TAKEN)
3CBF 3602             (take_portable_sub):00039                 pshu a
3CC1 BD19FF           (take_portable_sub):00040                 jsr print_table_entry
3CC4 BDB958           (take_portable_sub):00041                 jsr PRINTCR
3CC7 12               (take_portable_sub):00042                 nop ; $dobj.holder = player
3CC8 8601             (take_portable_sub):00043                 lda #1 ; player
3CCA 3402             (take_portable_sub):00044                 pshs a ; save value to put in attr
3CCC 86FF             (take_portable_sub):00045                 lda #-1 ; $dobj
3CCE C613             (take_portable_sub):00046                 ldb #OBJ_ENTRY_SIZE
3CD0 3D               (take_portable_sub):00047                 mul
3CD1 1F01             (take_portable_sub):00048                 tfr d,x
3CD3 30891EF4         (take_portable_sub):00049                 leax obj_table,x
3CD7 3001             (take_portable_sub):00050                 leax 1,x   ;holder
3CD9 3502             (take_portable_sub):00051                 puls a ; restore rhs
3CDB A784             (take_portable_sub):00052                 sta ,x
3CDD 12               (take_portable_sub):00053         @b      nop ; close ($dobj.holder != player)
3CDE 12               (take_portable_sub):00054         @a      nop ; close ($dobj.portable==1)
3CDF 3536             (take_portable_sub):00055                 puls y,x,d
3CE1 39               (take_portable_sub):00056                 rts
                      (take_portable_sub):00057         
                      (   events6809.asm):00018                 include read_note_sub_6809.asm
                      (read_note_sub_680):00001         
                      (read_note_sub_680):00002         ; machine generate routine from XML file
3CE2                  (read_note_sub_680):00003         read_note_sub
3CE2 3436             (read_note_sub_680):00004                 pshs d,x,y
3CE4 12               (read_note_sub_680):00005                 nop ; println("THE NOTE READS...")
3CE5 8E21B6           (read_note_sub_680):00006                 ldx #description_table
3CE8 8636             (read_note_sub_680):00007                 lda #54 ; THE NOTE READS...
3CEA 3602             (read_note_sub_680):00008                 pshu a
3CEC BD19FF           (read_note_sub_680):00009                 jsr print_table_entry
3CEF BDB958           (read_note_sub_680):00010                 jsr PRINTCR
3CF2 12               (read_note_sub_680):00011                 nop ; println("'DEAR DR., I STILL HAVE YOUR SONIC SCREWDRIVER. SERIOUSLY, YOU CAN BE SO FORGETFUL SOMETIMES.'")
3CF3 8E21B6           (read_note_sub_680):00012                 ldx #description_table
3CF6 8637             (read_note_sub_680):00013                 lda #55 ; 'DEAR DR., I STILL HAVE YOUR SONIC SCREWDRIVER. SERIOUSLY, YOU CAN BE SO FORGETFUL SOMETIMES.'
3CF8 3602             (read_note_sub_680):00014                 pshu a
3CFA BD19FF           (read_note_sub_680):00015                 jsr print_table_entry
3CFD BDB958           (read_note_sub_680):00016                 jsr PRINTCR
3D00 12               (read_note_sub_680):00017                 nop ; test ((readNote == 0))
3D01 B6415A           (read_note_sub_680):00018                 lda readNote ; readNote
3D04 3402             (read_note_sub_680):00019                 pshs a    ; push right left
3D06 8600             (read_note_sub_680):00020                 lda #0 ; 0
3D08 A1E4             (read_note_sub_680):00021                 cmpa ,s ; compare to right side
3D0A 3601             (read_note_sub_680):00022                 pshu cc ; save flags
3D0C 3261             (read_note_sub_680):00023                 leas 1,s ; pop right side
3D0E 3701             (read_note_sub_680):00024                 pulu cc ; restore flags
3D10 10260014         (read_note_sub_680):00025                 lbne @a
3D14 12               (read_note_sub_680):00026                 nop ; readNote = 1
3D15 12               (read_note_sub_680):00027                 nop ; add(score, 5)
3D16 3402             (read_note_sub_680):00028                 pshs a
3D18 B61D0C           (read_note_sub_680):00029                 lda score
3D1B 3602             (read_note_sub_680):00030                 pshu a ; push var value
3D1D 8605             (read_note_sub_680):00031                 lda #5 ; push val to add
3D1F ABC4             (read_note_sub_680):00032                 adda ,u ; add it 
3D21 B71D0C           (read_note_sub_680):00033                 sta score ; store it back
3D24 3702             (read_note_sub_680):00034                 pulu a ; remove temp
3D26 3502             (read_note_sub_680):00035                 puls a
3D28 12               (read_note_sub_680):00036         @a      nop ; close (readNote == 0)
3D29 3536             (read_note_sub_680):00037                 puls y,x,d
3D2B 39               (read_note_sub_680):00038                 rts
                      (read_note_sub_680):00039         
                      (   events6809.asm):00019                 include hit_anything_sub_6809.asm
                      (hit_anything_sub_):00001         
                      (hit_anything_sub_):00002         ; machine generate routine from XML file
3D2C                  (hit_anything_sub_):00003         hit_anything_sub
3D2C 3436             (hit_anything_sub_):00004                 pshs d,x,y
3D2E 12               (hit_anything_sub_):00005                 nop ; println("YOUR HANDS DON'T DO MUCH DAMAGE.")
3D2F 8E21B6           (hit_anything_sub_):00006                 ldx #description_table
3D32 8638             (hit_anything_sub_):00007                 lda #56 ; YOUR HANDS DON'T DO MUCH DAMAGE.
3D34 3602             (hit_anything_sub_):00008                 pshu a
3D36 BD19FF           (hit_anything_sub_):00009                 jsr print_table_entry
3D39 BDB958           (hit_anything_sub_):00010                 jsr PRINTCR
3D3C 3536             (hit_anything_sub_):00011                 puls y,x,d
3D3E 39               (hit_anything_sub_):00012                 rts
                      (hit_anything_sub_):00013         
                      (   events6809.asm):00020                 include hit_mannequin_with_bat_sub_6809.asm
                      (hit_mannequin_wit):00001         
                      (hit_mannequin_wit):00002         ; machine generate routine from XML file
3D3F                  (hit_mannequin_wit):00003         hit_mannequin_with_bat_sub
3D3F 3436             (hit_mannequin_wit):00004                 pshs d,x,y
3D41 12               (hit_mannequin_wit):00005                 nop ; println("WITH A PRECISE BLOW, YOU NEATLY DECAPITATE THE MANNEQUIN.")
3D42 8E21B6           (hit_mannequin_wit):00006                 ldx #description_table
3D45 8639             (hit_mannequin_wit):00007                 lda #57 ; WITH A PRECISE BLOW, YOU NEATLY DECAPITATE THE MANNEQUIN.
3D47 3602             (hit_mannequin_wit):00008                 pshu a
3D49 BD19FF           (hit_mannequin_wit):00009                 jsr print_table_entry
3D4C BDB958           (hit_mannequin_wit):00010                 jsr PRINTCR
3D4F 12               (hit_mannequin_wit):00011                 nop ; println("ROSE STAGGERS TO HER FEET.")
3D50 8E21B6           (hit_mannequin_wit):00012                 ldx #description_table
3D53 863A             (hit_mannequin_wit):00013                 lda #58 ; ROSE STAGGERS TO HER FEET.
3D55 3602             (hit_mannequin_wit):00014                 pshu a
3D57 BD19FF           (hit_mannequin_wit):00015                 jsr print_table_entry
3D5A BDB958           (hit_mannequin_wit):00016                 jsr PRINTCR
3D5D 12               (hit_mannequin_wit):00017                 nop ; mannequin.holder = 0
3D5E 8600             (hit_mannequin_wit):00018                 lda #0 ; 0
3D60 3402             (hit_mannequin_wit):00019                 pshs a ; save value to put in attr
3D62 8613             (hit_mannequin_wit):00020                 lda #19 ; mannequin
3D64 C613             (hit_mannequin_wit):00021                 ldb #OBJ_ENTRY_SIZE
3D66 3D               (hit_mannequin_wit):00022                 mul
3D67 1F01             (hit_mannequin_wit):00023                 tfr d,x
3D69 30891EF4         (hit_mannequin_wit):00024                 leax obj_table,x
3D6D 3001             (hit_mannequin_wit):00025                 leax 1,x   ;holder
3D6F 3502             (hit_mannequin_wit):00026                 puls a ; restore rhs
3D71 A784             (hit_mannequin_wit):00027                 sta ,x
3D73 12               (hit_mannequin_wit):00028                 nop ; torso.holder=inventory room
3D74 860C             (hit_mannequin_wit):00029                 lda #12 ; inventory room
3D76 3402             (hit_mannequin_wit):00030                 pshs a ; save value to put in attr
3D78 8619             (hit_mannequin_wit):00031                 lda #25 ; torso
3D7A C613             (hit_mannequin_wit):00032                 ldb #OBJ_ENTRY_SIZE
3D7C 3D               (hit_mannequin_wit):00033                 mul
3D7D 1F01             (hit_mannequin_wit):00034                 tfr d,x
3D7F 30891EF4         (hit_mannequin_wit):00035                 leax obj_table,x
3D83 3001             (hit_mannequin_wit):00036                 leax 1,x   ;holder
3D85 3502             (hit_mannequin_wit):00037                 puls a ; restore rhs
3D87 A784             (hit_mannequin_wit):00038                 sta ,x
3D89 12               (hit_mannequin_wit):00039                 nop ; plastic head.holder=inventory room
3D8A 860C             (hit_mannequin_wit):00040                 lda #12 ; inventory room
3D8C 3402             (hit_mannequin_wit):00041                 pshs a ; save value to put in attr
3D8E 8618             (hit_mannequin_wit):00042                 lda #24 ; plastic head
3D90 C613             (hit_mannequin_wit):00043                 ldb #OBJ_ENTRY_SIZE
3D92 3D               (hit_mannequin_wit):00044                 mul
3D93 1F01             (hit_mannequin_wit):00045                 tfr d,x
3D95 30891EF4         (hit_mannequin_wit):00046                 leax obj_table,x
3D99 3001             (hit_mannequin_wit):00047                 leax 1,x   ;holder
3D9B 3502             (hit_mannequin_wit):00048                 puls a ; restore rhs
3D9D A784             (hit_mannequin_wit):00049                 sta ,x
3D9F 12               (hit_mannequin_wit):00050                 nop ; rose.initial_description = "ROSE IS HERE CHECKING THE INVENTORY."
3DA0 863B             (hit_mannequin_wit):00051                 lda #59 ; "ROSE IS HERE CHECKING THE INVENTORY."
3DA2 3402             (hit_mannequin_wit):00052                 pshs a ; save value to put in attr
3DA4 8615             (hit_mannequin_wit):00053                 lda #21 ; rose
3DA6 C613             (hit_mannequin_wit):00054                 ldb #OBJ_ENTRY_SIZE
3DA8 3D               (hit_mannequin_wit):00055                 mul
3DA9 1F01             (hit_mannequin_wit):00056                 tfr d,x
3DAB 30891EF4         (hit_mannequin_wit):00057                 leax obj_table,x
3DAF 3002             (hit_mannequin_wit):00058                 leax 2,x   ;initial_description
3DB1 3502             (hit_mannequin_wit):00059                 puls a ; restore rhs
3DB3 A784             (hit_mannequin_wit):00060                 sta ,x
3DB5 12               (hit_mannequin_wit):00061                 nop ; add(score,10)
3DB6 3402             (hit_mannequin_wit):00062                 pshs a
3DB8 B61D0C           (hit_mannequin_wit):00063                 lda score
3DBB 3602             (hit_mannequin_wit):00064                 pshu a ; push var value
3DBD 860A             (hit_mannequin_wit):00065                 lda #10 ; push val to add
3DBF ABC4             (hit_mannequin_wit):00066                 adda ,u ; add it 
3DC1 B71D0C           (hit_mannequin_wit):00067                 sta score ; store it back
3DC4 3702             (hit_mannequin_wit):00068                 pulu a ; remove temp
3DC6 3502             (hit_mannequin_wit):00069                 puls a
3DC8 3536             (hit_mannequin_wit):00070                 puls y,x,d
3DCA 39               (hit_mannequin_wit):00071                 rts
                      (hit_mannequin_wit):00072         
                      (   events6809.asm):00021                 include hit_dalek_with_bat_sub_6809.asm
                      (hit_dalek_with_ba):00001         
                      (hit_dalek_with_ba):00002         ; machine generate routine from XML file
3DCB                  (hit_dalek_with_ba):00003         hit_dalek_with_bat_sub
3DCB 3436             (hit_dalek_with_ba):00004                 pshs d,x,y
3DCD 12               (hit_dalek_with_ba):00005                 nop ; println("TBD")
3DCE 8E21B6           (hit_dalek_with_ba):00006                 ldx #description_table
3DD1 863C             (hit_dalek_with_ba):00007                 lda #60 ; TBD
3DD3 3602             (hit_dalek_with_ba):00008                 pshu a
3DD5 BD19FF           (hit_dalek_with_ba):00009                 jsr print_table_entry
3DD8 BDB958           (hit_dalek_with_ba):00010                 jsr PRINTCR
3DDB 3536             (hit_dalek_with_ba):00011                 puls y,x,d
3DDD 39               (hit_dalek_with_ba):00012                 rts
                      (hit_dalek_with_ba):00013         
                      (   events6809.asm):00022                 include read_anything_sub_6809.asm
                      (read_anything_sub):00001         
                      (read_anything_sub):00002         ; machine generate routine from XML file
3DDE                  (read_anything_sub):00003         read_anything_sub
3DDE 3436             (read_anything_sub):00004                 pshs d,x,y
3DE0 12               (read_anything_sub):00005                 nop ; println("THERE IS NOTHING TO READ ON THAT.")
3DE1 8E21B6           (read_anything_sub):00006                 ldx #description_table
3DE4 863D             (read_anything_sub):00007                 lda #61 ; THERE IS NOTHING TO READ ON THAT.
3DE6 3602             (read_anything_sub):00008                 pshu a
3DE8 BD19FF           (read_anything_sub):00009                 jsr print_table_entry
3DEB BDB958           (read_anything_sub):00010                 jsr PRINTCR
3DEE 3536             (read_anything_sub):00011                 puls y,x,d
3DF0 39               (read_anything_sub):00012                 rts
                      (read_anything_sub):00013         
                      (   events6809.asm):00023                 include before_read_sub_6809.asm
                      (before_read_sub_6):00001         
                      (before_read_sub_6):00002         ; machine generate routine from XML file
3DF1                  (before_read_sub_6):00003         before_read_sub
3DF1 3436             (before_read_sub_6):00004                 pshs d,x,y
3DF3 12               (before_read_sub_6):00005                 nop ; test (($dobj.portable==1))
3DF4 8601             (before_read_sub_6):00006                 lda #1
3DF6 3402             (before_read_sub_6):00007                 pshs a    ; push right side
3DF8 B611C8           (before_read_sub_6):00008                 lda sentence+1
3DFB C613             (before_read_sub_6):00009                 ldb #OBJ_ENTRY_SIZE
3DFD 3D               (before_read_sub_6):00010                 mul
3DFE 1F01             (before_read_sub_6):00011                 tfr d,x
3E00 30891EF4         (before_read_sub_6):00012                 leax obj_table,x
3E04 308812           (before_read_sub_6):00013                 leax PROPERTY_BYTE_2,x  ; 
3E07 A684             (before_read_sub_6):00014                 lda ,x  ; get property byte
3E09 8401             (before_read_sub_6):00015                 anda #1 ; isolate portable  bit 
3E0B A1E4             (before_read_sub_6):00016                 cmpa ,s ; compare to right side
3E0D 3601             (before_read_sub_6):00017                 pshu cc ; save flags
3E0F 3261             (before_read_sub_6):00018                 leas 1,s ; pop right side
3E11 3701             (before_read_sub_6):00019                 pulu cc ; restore flags
3E13 10260046         (before_read_sub_6):00020                 lbne @a
3E17 12               (before_read_sub_6):00021                 nop ; test (($dobj.holder != player))
3E18 8601             (before_read_sub_6):00022                 lda #1 ; player
3E1A 3402             (before_read_sub_6):00023                 pshs a    ; push right side
3E1C B611C8           (before_read_sub_6):00024                 lda sentence+1 ; $dobj
3E1F C613             (before_read_sub_6):00025                 ldb #OBJ_ENTRY_SIZE
3E21 3D               (before_read_sub_6):00026                 mul
3E22 1F01             (before_read_sub_6):00027                 tfr d,x
3E24 30891EF4         (before_read_sub_6):00028                 leax obj_table,x
3E28 3001             (before_read_sub_6):00029                 leax 1,x  ; holder
3E2A A684             (before_read_sub_6):00030                 lda ,x
3E2C A1E4             (before_read_sub_6):00031                 cmpa ,s ; compare to right side
3E2E 3601             (before_read_sub_6):00032                 pshu cc ; save flags
3E30 3261             (before_read_sub_6):00033                 leas 1,s ; pop right side
3E32 3701             (before_read_sub_6):00034                 pulu cc ; restore flags
3E34 10270024         (before_read_sub_6):00035                 lbeq @b
3E38 12               (before_read_sub_6):00036                 nop ; println("(TAKEN)")
3E39 8E21B6           (before_read_sub_6):00037                 ldx #description_table
3E3C 8635             (before_read_sub_6):00038                 lda #53 ; (TAKEN)
3E3E 3602             (before_read_sub_6):00039                 pshu a
3E40 BD19FF           (before_read_sub_6):00040                 jsr print_table_entry
3E43 BDB958           (before_read_sub_6):00041                 jsr PRINTCR
3E46 12               (before_read_sub_6):00042                 nop ; $dobj.holder = player
3E47 8601             (before_read_sub_6):00043                 lda #1 ; player
3E49 3402             (before_read_sub_6):00044                 pshs a ; save value to put in attr
3E4B 86FF             (before_read_sub_6):00045                 lda #-1 ; $dobj
3E4D C613             (before_read_sub_6):00046                 ldb #OBJ_ENTRY_SIZE
3E4F 3D               (before_read_sub_6):00047                 mul
3E50 1F01             (before_read_sub_6):00048                 tfr d,x
3E52 30891EF4         (before_read_sub_6):00049                 leax obj_table,x
3E56 3001             (before_read_sub_6):00050                 leax 1,x   ;holder
3E58 3502             (before_read_sub_6):00051                 puls a ; restore rhs
3E5A A784             (before_read_sub_6):00052                 sta ,x
3E5C 12               (before_read_sub_6):00053         @b      nop ; close ($dobj.holder != player)
3E5D 12               (before_read_sub_6):00054         @a      nop ; close ($dobj.portable==1)
3E5E 3536             (before_read_sub_6):00055                 puls y,x,d
3E60 39               (before_read_sub_6):00056                 rts
                      (before_read_sub_6):00057         
                      (   events6809.asm):00024                 include enter_tardis_sub_6809.asm
                      (enter_tardis_sub_):00001         
                      (enter_tardis_sub_):00002         ; machine generate routine from XML file
3E61                  (enter_tardis_sub_):00003         enter_tardis_sub
3E61 3436             (enter_tardis_sub_):00004                 pshs d,x,y
3E63 12               (enter_tardis_sub_):00005                 nop ; test ((tardis.open == 1))
3E64 8601             (enter_tardis_sub_):00006                 lda #1
3E66 3402             (enter_tardis_sub_):00007                 pshs a    ; push right side
3E68 8603             (enter_tardis_sub_):00008                 lda #3
3E6A C613             (enter_tardis_sub_):00009                 ldb #OBJ_ENTRY_SIZE
3E6C 3D               (enter_tardis_sub_):00010                 mul
3E6D 1F01             (enter_tardis_sub_):00011                 tfr d,x
3E6F 30891EF4         (enter_tardis_sub_):00012                 leax obj_table,x
3E73 308811           (enter_tardis_sub_):00013                 leax PROPERTY_BYTE_1,x  ; 
3E76 A684             (enter_tardis_sub_):00014                 lda ,x  ; get property byte
3E78 8420             (enter_tardis_sub_):00015                 anda #32 ; isolate open  bit 
3E7A 44               (enter_tardis_sub_):00016                 lsra ; right justify bit
3E7B 44               (enter_tardis_sub_):00017                 lsra ; right justify bit
3E7C 44               (enter_tardis_sub_):00018                 lsra ; right justify bit
3E7D 44               (enter_tardis_sub_):00019                 lsra ; right justify bit
3E7E 44               (enter_tardis_sub_):00020                 lsra ; right justify bit
3E7F A1E4             (enter_tardis_sub_):00021                 cmpa ,s ; compare to right side
3E81 3601             (enter_tardis_sub_):00022                 pshu cc ; save flags
3E83 3261             (enter_tardis_sub_):00023                 leas 1,s ; pop right side
3E85 3701             (enter_tardis_sub_):00024                 pulu cc ; restore flags
3E87 1026001C         (enter_tardis_sub_):00025                 lbne @a
3E8B 12               (enter_tardis_sub_):00026                 nop ; player.holder = inside tardis
3E8C 8604             (enter_tardis_sub_):00027                 lda #4 ; inside tardis
3E8E 3402             (enter_tardis_sub_):00028                 pshs a ; save value to put in attr
3E90 8601             (enter_tardis_sub_):00029                 lda #1 ; player
3E92 C613             (enter_tardis_sub_):00030                 ldb #OBJ_ENTRY_SIZE
3E94 3D               (enter_tardis_sub_):00031                 mul
3E95 1F01             (enter_tardis_sub_):00032                 tfr d,x
3E97 30891EF4         (enter_tardis_sub_):00033                 leax obj_table,x
3E9B 3001             (enter_tardis_sub_):00034                 leax 1,x   ;holder
3E9D 3502             (enter_tardis_sub_):00035                 puls a ; restore rhs
3E9F A784             (enter_tardis_sub_):00036                 sta ,x
3EA1 12               (enter_tardis_sub_):00037                 nop ; look()
3EA2 BD1746           (enter_tardis_sub_):00038                 jsr look_sub
3EA5 200F             (enter_tardis_sub_):00039                 bra @b ; skip else 
3EA7 12               (enter_tardis_sub_):00040         @a      nop ; close (tardis.open == 1)
3EA8 12               (enter_tardis_sub_):00041                 nop ; { println("THE TARDIS IS CLOSED.")
3EA9 8E21B6           (enter_tardis_sub_):00042                 ldx #description_table
3EAC 863E             (enter_tardis_sub_):00043                 lda #62 ; THE TARDIS IS CLOSED.
3EAE 3602             (enter_tardis_sub_):00044                 pshu a
3EB0 BD19FF           (enter_tardis_sub_):00045                 jsr print_table_entry
3EB3 BDB958           (enter_tardis_sub_):00046                 jsr PRINTCR
3EB6 12               (enter_tardis_sub_):00047         @b      nop ; end else
3EB7 3536             (enter_tardis_sub_):00048                 puls y,x,d
3EB9 39               (enter_tardis_sub_):00049                 rts
                      (enter_tardis_sub_):00050         
                      (   events6809.asm):00025                 include push_button_sub_6809.asm
                      (push_button_sub_6):00001         
                      (push_button_sub_6):00002         ; machine generate routine from XML file
3EBA                  (push_button_sub_6):00003         push_button_sub
3EBA 3436             (push_button_sub_6):00004                 pshs d,x,y
3EBC 12               (push_button_sub_6):00005                 nop ; test ((elevator.e == lobby))
3EBD 860E             (push_button_sub_6):00006                 lda #14 ; lobby
3EBF 3402             (push_button_sub_6):00007                 pshs a    ; push right side
3EC1 860F             (push_button_sub_6):00008                 lda #15 ; elevator
3EC3 C613             (push_button_sub_6):00009                 ldb #OBJ_ENTRY_SIZE
3EC5 3D               (push_button_sub_6):00010                 mul
3EC6 1F01             (push_button_sub_6):00011                 tfr d,x
3EC8 30891EF4         (push_button_sub_6):00012                 leax obj_table,x
3ECC 3006             (push_button_sub_6):00013                 leax 6,x  ; e
3ECE A684             (push_button_sub_6):00014                 lda ,x
3ED0 A1E4             (push_button_sub_6):00015                 cmpa ,s ; compare to right side
3ED2 3601             (push_button_sub_6):00016                 pshu cc ; save flags
3ED4 3261             (push_button_sub_6):00017                 leas 1,s ; pop right side
3ED6 3701             (push_button_sub_6):00018                 pulu cc ; restore flags
3ED8 10260034         (push_button_sub_6):00019                 lbne @a
3EDC 12               (push_button_sub_6):00020                 nop ; println("THE LIFT SLOWLY RISES TO THE UPPER FLOOR.")
3EDD 8E21B6           (push_button_sub_6):00021                 ldx #description_table
3EE0 863F             (push_button_sub_6):00022                 lda #63 ; THE LIFT SLOWLY RISES TO THE UPPER FLOOR.
3EE2 3602             (push_button_sub_6):00023                 pshu a
3EE4 BD19FF           (push_button_sub_6):00024                 jsr print_table_entry
3EE7 BDB958           (push_button_sub_6):00025                 jsr PRINTCR
3EEA 12               (push_button_sub_6):00026                 nop ; println("THE DOOR OPENS, LEADING EAST TO A HALLWAY.")
3EEB 8E21B6           (push_button_sub_6):00027                 ldx #description_table
3EEE 8640             (push_button_sub_6):00028                 lda #64 ; THE DOOR OPENS, LEADING EAST TO A HALLWAY.
3EF0 3602             (push_button_sub_6):00029                 pshu a
3EF2 BD19FF           (push_button_sub_6):00030                 jsr print_table_entry
3EF5 BDB958           (push_button_sub_6):00031                 jsr PRINTCR
3EF8 12               (push_button_sub_6):00032                 nop ; elevator.e = hallway
3EF9 8611             (push_button_sub_6):00033                 lda #17 ; hallway
3EFB 3402             (push_button_sub_6):00034                 pshs a ; save value to put in attr
3EFD 860F             (push_button_sub_6):00035                 lda #15 ; elevator
3EFF C613             (push_button_sub_6):00036                 ldb #OBJ_ENTRY_SIZE
3F01 3D               (push_button_sub_6):00037                 mul
3F02 1F01             (push_button_sub_6):00038                 tfr d,x
3F04 30891EF4         (push_button_sub_6):00039                 leax obj_table,x
3F08 3006             (push_button_sub_6):00040                 leax 6,x   ;e
3F0A 3502             (push_button_sub_6):00041                 puls a ; restore rhs
3F0C A784             (push_button_sub_6):00042                 sta ,x
3F0E 2033             (push_button_sub_6):00043                 bra @b ; skip else 
3F10 12               (push_button_sub_6):00044         @a      nop ; close (elevator.e == lobby)
3F11 12               (push_button_sub_6):00045                 nop ; println("THE LIFT SLOWLY DESCENDS FLOOR.")
3F12 8E21B6           (push_button_sub_6):00046                 ldx #description_table
3F15 8641             (push_button_sub_6):00047                 lda #65 ; THE LIFT SLOWLY DESCENDS FLOOR.
3F17 3602             (push_button_sub_6):00048                 pshu a
3F19 BD19FF           (push_button_sub_6):00049                 jsr print_table_entry
3F1C BDB958           (push_button_sub_6):00050                 jsr PRINTCR
3F1F 12               (push_button_sub_6):00051                 nop ; println("THE DOOR OPENS, LEADING EAST TO THE LOBBY.")
3F20 8E21B6           (push_button_sub_6):00052                 ldx #description_table
3F23 8642             (push_button_sub_6):00053                 lda #66 ; THE DOOR OPENS, LEADING EAST TO THE LOBBY.
3F25 3602             (push_button_sub_6):00054                 pshu a
3F27 BD19FF           (push_button_sub_6):00055                 jsr print_table_entry
3F2A BDB958           (push_button_sub_6):00056                 jsr PRINTCR
3F2D 12               (push_button_sub_6):00057                 nop ; elevator.e = lobby
3F2E 860E             (push_button_sub_6):00058                 lda #14 ; lobby
3F30 3402             (push_button_sub_6):00059                 pshs a ; save value to put in attr
3F32 860F             (push_button_sub_6):00060                 lda #15 ; elevator
3F34 C613             (push_button_sub_6):00061                 ldb #OBJ_ENTRY_SIZE
3F36 3D               (push_button_sub_6):00062                 mul
3F37 1F01             (push_button_sub_6):00063                 tfr d,x
3F39 30891EF4         (push_button_sub_6):00064                 leax obj_table,x
3F3D 3006             (push_button_sub_6):00065                 leax 6,x   ;e
3F3F 3502             (push_button_sub_6):00066                 puls a ; restore rhs
3F41 A784             (push_button_sub_6):00067                 sta ,x
3F43 12               (push_button_sub_6):00068         @b      nop ; end else
3F44 3536             (push_button_sub_6):00069                 puls y,x,d
3F46 39               (push_button_sub_6):00070                 rts
                      (push_button_sub_6):00071         
                      (   events6809.asm):00026                 include unlock_tardis_with_sonicscrewdriver_sub_6809.asm
                      (unlock_tardis_wit):00001         
                      (unlock_tardis_wit):00002         ; machine generate routine from XML file
3F47                  (unlock_tardis_wit):00003         unlock_tardis_with_sonicscrewdriver_sub
3F47 3436             (unlock_tardis_wit):00004                 pshs d,x,y
3F49 12               (unlock_tardis_wit):00005                 nop ; test ((tardis.locked==1))
3F4A 8601             (unlock_tardis_wit):00006                 lda #1
3F4C 3402             (unlock_tardis_wit):00007                 pshs a    ; push right side
3F4E 8603             (unlock_tardis_wit):00008                 lda #3
3F50 C613             (unlock_tardis_wit):00009                 ldb #OBJ_ENTRY_SIZE
3F52 3D               (unlock_tardis_wit):00010                 mul
3F53 1F01             (unlock_tardis_wit):00011                 tfr d,x
3F55 30891EF4         (unlock_tardis_wit):00012                 leax obj_table,x
3F59 308811           (unlock_tardis_wit):00013                 leax PROPERTY_BYTE_1,x  ; 
3F5C A684             (unlock_tardis_wit):00014                 lda ,x  ; get property byte
3F5E 8480             (unlock_tardis_wit):00015                 anda #128 ; isolate locked  bit 
3F60 44               (unlock_tardis_wit):00016                 lsra ; right justify bit
3F61 44               (unlock_tardis_wit):00017                 lsra ; right justify bit
3F62 44               (unlock_tardis_wit):00018                 lsra ; right justify bit
3F63 44               (unlock_tardis_wit):00019                 lsra ; right justify bit
3F64 44               (unlock_tardis_wit):00020                 lsra ; right justify bit
3F65 44               (unlock_tardis_wit):00021                 lsra ; right justify bit
3F66 44               (unlock_tardis_wit):00022                 lsra ; right justify bit
3F67 A1E4             (unlock_tardis_wit):00023                 cmpa ,s ; compare to right side
3F69 3601             (unlock_tardis_wit):00024                 pshu cc ; save flags
3F6B 3261             (unlock_tardis_wit):00025                 leas 1,s ; pop right side
3F6D 3701             (unlock_tardis_wit):00026                 pulu cc ; restore flags
3F6F 10260069         (unlock_tardis_wit):00027                 lbne @a
3F73 12               (unlock_tardis_wit):00028                 nop ; println("AFTER SOME CLICKS AND BUZZES, THE TARDIS POPS OPEN.")
3F74 8E21B6           (unlock_tardis_wit):00029                 ldx #description_table
3F77 8643             (unlock_tardis_wit):00030                 lda #67 ; AFTER SOME CLICKS AND BUZZES, THE TARDIS POPS OPEN.
3F79 3602             (unlock_tardis_wit):00031                 pshu a
3F7B BD19FF           (unlock_tardis_wit):00032                 jsr print_table_entry
3F7E BDB958           (unlock_tardis_wit):00033                 jsr PRINTCR
3F81 12               (unlock_tardis_wit):00034                 nop ; tardis.open = 1
3F82 12               (unlock_tardis_wit):00035                 nop ; set tardis.open=1
3F83 8603             (unlock_tardis_wit):00036                 lda #3 ; tardis
3F85 C613             (unlock_tardis_wit):00037                 ldb #OBJ_ENTRY_SIZE
3F87 3D               (unlock_tardis_wit):00038                 mul
3F88 1F01             (unlock_tardis_wit):00039                 tfr d,x
3F8A 30891EF4         (unlock_tardis_wit):00040                 leax obj_table,x
3F8E 308811           (unlock_tardis_wit):00041                 leax PROPERTY_BYTE_1,x
3F91 A684             (unlock_tardis_wit):00042                 lda ,x  ; get property byte
3F93 C620             (unlock_tardis_wit):00043                 ldb #32 ; get the mask for open
3F95 53               (unlock_tardis_wit):00044                 comb 32 ; invert it
3F96 3404             (unlock_tardis_wit):00045                 pshs b
3F98 A4E4             (unlock_tardis_wit):00046                 anda ,s   ; clear the bit
3F9A 3261             (unlock_tardis_wit):00047                 leas 1,s ; pop stack
3F9C 8A20             (unlock_tardis_wit):00048                 ora #32   ; set the open bit
3F9E A784             (unlock_tardis_wit):00049                 sta ,x  ; store it
3FA0 12               (unlock_tardis_wit):00050                 nop ; tardis.locked=0
3FA1 12               (unlock_tardis_wit):00051                 nop ; set tardis.locked=0
3FA2 8603             (unlock_tardis_wit):00052                 lda #3 ; tardis
3FA4 C613             (unlock_tardis_wit):00053                 ldb #OBJ_ENTRY_SIZE
3FA6 3D               (unlock_tardis_wit):00054                 mul
3FA7 1F01             (unlock_tardis_wit):00055                 tfr d,x
3FA9 30891EF4         (unlock_tardis_wit):00056                 leax obj_table,x
3FAD 308811           (unlock_tardis_wit):00057                 leax PROPERTY_BYTE_1,x
3FB0 A684             (unlock_tardis_wit):00058                 lda ,x  ; get property byte
3FB2 C680             (unlock_tardis_wit):00059                 ldb #128 ; get the mask for locked
3FB4 53               (unlock_tardis_wit):00060                 comb 128 ; invert it
3FB5 3404             (unlock_tardis_wit):00061                 pshs b
3FB7 A4E4             (unlock_tardis_wit):00062                 anda ,s   ; clear the bit
3FB9 3261             (unlock_tardis_wit):00063                 leas 1,s ; pop stack
3FBB A784             (unlock_tardis_wit):00064                 sta ,x  ; store it
3FBD 12               (unlock_tardis_wit):00065                 nop ; tardis.lockable=0
3FBE 12               (unlock_tardis_wit):00066                 nop ; set tardis.lockable=0
3FBF 8603             (unlock_tardis_wit):00067                 lda #3 ; tardis
3FC1 C613             (unlock_tardis_wit):00068                 ldb #OBJ_ENTRY_SIZE
3FC3 3D               (unlock_tardis_wit):00069                 mul
3FC4 1F01             (unlock_tardis_wit):00070                 tfr d,x
3FC6 30891EF4         (unlock_tardis_wit):00071                 leax obj_table,x
3FCA 308811           (unlock_tardis_wit):00072                 leax PROPERTY_BYTE_1,x
3FCD A684             (unlock_tardis_wit):00073                 lda ,x  ; get property byte
3FCF C640             (unlock_tardis_wit):00074                 ldb #64 ; get the mask for lockable
3FD1 53               (unlock_tardis_wit):00075                 comb 64 ; invert it
3FD2 3404             (unlock_tardis_wit):00076                 pshs b
3FD4 A4E4             (unlock_tardis_wit):00077                 anda ,s   ; clear the bit
3FD6 3261             (unlock_tardis_wit):00078                 leas 1,s ; pop stack
3FD8 A784             (unlock_tardis_wit):00079                 sta ,x  ; store it
3FDA 200F             (unlock_tardis_wit):00080                 bra @b ; skip else 
3FDC 12               (unlock_tardis_wit):00081         @a      nop ; close (tardis.locked==1)
3FDD 12               (unlock_tardis_wit):00082                 nop ; println("THE TARDIS IS ALREADY OPEN.")
3FDE 8E21B6           (unlock_tardis_wit):00083                 ldx #description_table
3FE1 8644             (unlock_tardis_wit):00084                 lda #68 ; THE TARDIS IS ALREADY OPEN.
3FE3 3602             (unlock_tardis_wit):00085                 pshu a
3FE5 BD19FF           (unlock_tardis_wit):00086                 jsr print_table_entry
3FE8 BDB958           (unlock_tardis_wit):00087                 jsr PRINTCR
3FEB 12               (unlock_tardis_wit):00088         @b      nop ; end else
3FEC 3536             (unlock_tardis_wit):00089                 puls y,x,d
3FEE 39               (unlock_tardis_wit):00090                 rts
                      (unlock_tardis_wit):00091         
                      (   events6809.asm):00027                 include unlock_tardis_sub_6809.asm
                      (unlock_tardis_sub):00001         
                      (unlock_tardis_sub):00002         ; machine generate routine from XML file
3FEF                  (unlock_tardis_sub):00003         unlock_tardis_sub
3FEF 3436             (unlock_tardis_sub):00004                 pshs d,x,y
3FF1 12               (unlock_tardis_sub):00005                 nop ; test ((sonic screwdriver.holder==player))
3FF2 8601             (unlock_tardis_sub):00006                 lda #1 ;player
3FF4 3402             (unlock_tardis_sub):00007                 pshs a    ; push right side
3FF6 861A             (unlock_tardis_sub):00008                 lda #26 ; sonic screwdriver
3FF8 C613             (unlock_tardis_sub):00009                 ldb #OBJ_ENTRY_SIZE
3FFA 3D               (unlock_tardis_sub):00010                 mul
3FFB 1F01             (unlock_tardis_sub):00011                 tfr d,x
3FFD 30891EF4         (unlock_tardis_sub):00012                 leax obj_table,x
4001 3001             (unlock_tardis_sub):00013                 leax 1,x  ; holder
4003 A684             (unlock_tardis_sub):00014                 lda ,x
4005 A1E4             (unlock_tardis_sub):00015                 cmpa ,s ; compare to right side
4007 3601             (unlock_tardis_sub):00016                 pshu cc ; save flags
4009 3261             (unlock_tardis_sub):00017                 leas 1,s ; pop right side
400B 3701             (unlock_tardis_sub):00018                 pulu cc ; restore flags
400D 10260011         (unlock_tardis_sub):00019                 lbne @a
4011 12               (unlock_tardis_sub):00020                 nop ; println("(WITH SONIC SCREWDRIVER)")
4012 8E21B6           (unlock_tardis_sub):00021                 ldx #description_table
4015 8645             (unlock_tardis_sub):00022                 lda #69 ; (WITH SONIC SCREWDRIVER)
4017 3602             (unlock_tardis_sub):00023                 pshu a
4019 BD19FF           (unlock_tardis_sub):00024                 jsr print_table_entry
401C BDB958           (unlock_tardis_sub):00025                 jsr PRINTCR
401F 12               (unlock_tardis_sub):00026                 nop ; call unlock_tardis_with_sonicscrewdriver()
4020 200F             (unlock_tardis_sub):00027                 bra @b ; skip else 
4022 12               (unlock_tardis_sub):00028         @a      nop ; close (sonic screwdriver.holder==player)
4023 12               (unlock_tardis_sub):00029                 nop ; println("YOU HAVE NOTHING TO UNLOCK IT WITH.")
4024 8E21B6           (unlock_tardis_sub):00030                 ldx #description_table
4027 8646             (unlock_tardis_sub):00031                 lda #70 ; YOU HAVE NOTHING TO UNLOCK IT WITH.
4029 3602             (unlock_tardis_sub):00032                 pshu a
402B BD19FF           (unlock_tardis_sub):00033                 jsr print_table_entry
402E BDB958           (unlock_tardis_sub):00034                 jsr PRINTCR
4031 12               (unlock_tardis_sub):00035         @b      nop ; end else
4032 3536             (unlock_tardis_sub):00036                 puls y,x,d
4034 39               (unlock_tardis_sub):00037                 rts
                      (unlock_tardis_sub):00038         
                      (   events6809.asm):00028                 include throw_hat_at_dalek_sub_6809.asm
                      (throw_hat_at_dale):00001         
                      (throw_hat_at_dale):00002         ; machine generate routine from XML file
4035                  (throw_hat_at_dale):00003         throw_hat_at_dalek_sub
4035 3436             (throw_hat_at_dale):00004                 pshs d,x,y
4037 3536             (throw_hat_at_dale):00005                 puls y,x,d
4039 39               (throw_hat_at_dale):00006                 rts
                      (throw_hat_at_dale):00007         
                      (   events6809.asm):00029                 include cover_eye_sub_6809.asm
                      (cover_eye_sub_680):00001         
                      (cover_eye_sub_680):00002         ; machine generate routine from XML file
403A                  (cover_eye_sub_680):00003         cover_eye_sub
403A 3436             (cover_eye_sub_680):00004                 pshs d,x,y
403C 12               (cover_eye_sub_680):00005                 nop ; println("YOU DEFTLY TOSS THE FEDORA ONTO THE DALEK'S EYESTALK.")
403D 8E21B6           (cover_eye_sub_680):00006                 ldx #description_table
4040 8647             (cover_eye_sub_680):00007                 lda #71 ; YOU DEFTLY TOSS THE FEDORA ONTO THE DALEK'S EYESTALK.
4042 3602             (cover_eye_sub_680):00008                 pshu a
4044 BD19FF           (cover_eye_sub_680):00009                 jsr print_table_entry
4047 BDB958           (cover_eye_sub_680):00010                 jsr PRINTCR
404A 12               (cover_eye_sub_680):00011                 nop ; println("IN AN ATTEMPT TO DESTROY THE HAT, THE DALEK FIRES A LASER AT IT,  ACCIDENTALLY VAPORIZING ITS OWN EYE.")
404B 8E21B6           (cover_eye_sub_680):00012                 ldx #description_table
404E 8648             (cover_eye_sub_680):00013                 lda #72 ; IN AN ATTEMPT TO DESTROY THE HAT, THE DALEK FIRES A LASER AT IT,  ACCIDENTALLY VAPORIZING ITS OWN EYE.
4050 3602             (cover_eye_sub_680):00014                 pshu a
4052 BD19FF           (cover_eye_sub_680):00015                 jsr print_table_entry
4055 BDB958           (cover_eye_sub_680):00016                 jsr PRINTCR
4058 12               (cover_eye_sub_680):00017                 nop ; println("'IMPOSSIBLE! IMPOSSIBLE! MUST DESTROY IMPERFECTION!'")
4059 8E21B6           (cover_eye_sub_680):00018                 ldx #description_table
405C 8649             (cover_eye_sub_680):00019                 lda #73 ; 'IMPOSSIBLE! IMPOSSIBLE! MUST DESTROY IMPERFECTION!'
405E 3602             (cover_eye_sub_680):00020                 pshu a
4060 BD19FF           (cover_eye_sub_680):00021                 jsr print_table_entry
4063 BDB958           (cover_eye_sub_680):00022                 jsr PRINTCR
4066 12               (cover_eye_sub_680):00023                 nop ; println("THE DALEK, HAVING ACTIVATED A SELF DESTRUCT MECHANISM IS NOW GLOWING BRIGHT RED.")
4067 8E21B6           (cover_eye_sub_680):00024                 ldx #description_table
406A 864A             (cover_eye_sub_680):00025                 lda #74 ; THE DALEK, HAVING ACTIVATED A SELF DESTRUCT MECHANISM IS NOW GLOWING BRIGHT RED.
406C 3602             (cover_eye_sub_680):00026                 pshu a
406E BD19FF           (cover_eye_sub_680):00027                 jsr print_table_entry
4071 BDB958           (cover_eye_sub_680):00028                 jsr PRINTCR
4074 12               (cover_eye_sub_680):00029                 nop ; eyestalk.holder=0
4075 8600             (cover_eye_sub_680):00030                 lda #0 ; 0
4077 3402             (cover_eye_sub_680):00031                 pshs a ; save value to put in attr
4079 861B             (cover_eye_sub_680):00032                 lda #27 ; eyestalk
407B C613             (cover_eye_sub_680):00033                 ldb #OBJ_ENTRY_SIZE
407D 3D               (cover_eye_sub_680):00034                 mul
407E 1F01             (cover_eye_sub_680):00035                 tfr d,x
4080 30891EF4         (cover_eye_sub_680):00036                 leax obj_table,x
4084 3001             (cover_eye_sub_680):00037                 leax 1,x   ;holder
4086 3502             (cover_eye_sub_680):00038                 puls a ; restore rhs
4088 A784             (cover_eye_sub_680):00039                 sta ,x
408A 12               (cover_eye_sub_680):00040                 nop ; add(score,25)
408B 3402             (cover_eye_sub_680):00041                 pshs a
408D B61D0C           (cover_eye_sub_680):00042                 lda score
4090 3602             (cover_eye_sub_680):00043                 pshu a ; push var value
4092 8619             (cover_eye_sub_680):00044                 lda #25 ; push val to add
4094 ABC4             (cover_eye_sub_680):00045                 adda ,u ; add it 
4096 B71D0C           (cover_eye_sub_680):00046                 sta score ; store it back
4099 3702             (cover_eye_sub_680):00047                 pulu a ; remove temp
409B 3502             (cover_eye_sub_680):00048                 puls a
409D 12               (cover_eye_sub_680):00049                 nop ; set(activated,1)
409E 3402             (cover_eye_sub_680):00050                 pshs a
40A0 8601             (cover_eye_sub_680):00051                 lda #1 ; load new val
40A2 B7415E           (cover_eye_sub_680):00052                 sta activated ; store it back
40A5 3502             (cover_eye_sub_680):00053                 puls a
40A7 3536             (cover_eye_sub_680):00054                 puls y,x,d
40A9 39               (cover_eye_sub_680):00055                 rts
                      (cover_eye_sub_680):00056         
                      (         main.asm):00075                 include CheckRules6809.asm
                      (CheckRules6809.as):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (CheckRules6809.as):00002         ; check rules table
                      (CheckRules6809.as):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (CheckRules6809.as):00004         
40AA                  (CheckRules6809.as):00005         check_table
40AA 17               (CheckRules6809.as):00006                 .db 23 ; close
40AB 3538             (CheckRules6809.as):00007                 .dw check_dobj_supplied
40AD 17               (CheckRules6809.as):00008                 .db 23 ; close
40AE 34B3             (CheckRules6809.as):00009                 .dw check_see_dobj
40B0 19               (CheckRules6809.as):00010                 .db 25 ; drink
40B1 3538             (CheckRules6809.as):00011                 .dw check_dobj_supplied
40B3 19               (CheckRules6809.as):00012                 .db 25 ; drink
40B4 34B3             (CheckRules6809.as):00013                 .dw check_see_dobj
40B6 19               (CheckRules6809.as):00014                 .db 25 ; drink
40B7 3671             (CheckRules6809.as):00015                 .dw check_have_dobj
40B9 0F               (CheckRules6809.as):00016                 .db 15 ; drop
40BA 3538             (CheckRules6809.as):00017                 .dw check_dobj_supplied
40BC 0F               (CheckRules6809.as):00018                 .db 15 ; drop
40BD 34B3             (CheckRules6809.as):00019                 .dw check_see_dobj
40BF 0F               (CheckRules6809.as):00020                 .db 15 ; drop
40C0 3671             (CheckRules6809.as):00021                 .dw check_have_dobj
40C2 18               (CheckRules6809.as):00022                 .db 24 ; eat
40C3 3538             (CheckRules6809.as):00023                 .dw check_dobj_supplied
40C5 18               (CheckRules6809.as):00024                 .db 24 ; eat
40C6 34B3             (CheckRules6809.as):00025                 .dw check_see_dobj
40C8 0A               (CheckRules6809.as):00026                 .db 10 ; enter
40C9 3538             (CheckRules6809.as):00027                 .dw check_dobj_supplied
40CB 0A               (CheckRules6809.as):00028                 .db 10 ; enter
40CC 34B3             (CheckRules6809.as):00029                 .dw check_see_dobj
40CE 12               (CheckRules6809.as):00030                 .db 18 ; examine
40CF 3538             (CheckRules6809.as):00031                 .dw check_dobj_supplied
40D1 12               (CheckRules6809.as):00032                 .db 18 ; examine
40D2 34B3             (CheckRules6809.as):00033                 .dw check_see_dobj
40D4 0C               (CheckRules6809.as):00034                 .db 12 ; get
40D5 3538             (CheckRules6809.as):00035                 .dw check_dobj_supplied
40D7 0C               (CheckRules6809.as):00036                 .db 12 ; get
40D8 34B3             (CheckRules6809.as):00037                 .dw check_see_dobj
40DA 0C               (CheckRules6809.as):00038                 .db 12 ; get
40DB 362E             (CheckRules6809.as):00039                 .dw check_dont_have_dobj
40DD 0E               (CheckRules6809.as):00040                 .db 14 ; kill
40DE 3538             (CheckRules6809.as):00041                 .dw check_dobj_supplied
40E0 0E               (CheckRules6809.as):00042                 .db 14 ; kill
40E1 34B3             (CheckRules6809.as):00043                 .dw check_see_dobj
40E3 10               (CheckRules6809.as):00044                 .db 16 ; light
40E4 3538             (CheckRules6809.as):00045                 .dw check_dobj_supplied
40E6 10               (CheckRules6809.as):00046                 .db 16 ; light
40E7 34B3             (CheckRules6809.as):00047                 .dw check_see_dobj
40E9 10               (CheckRules6809.as):00048                 .db 16 ; light
40EA 3671             (CheckRules6809.as):00049                 .dw check_have_dobj
40EC 14               (CheckRules6809.as):00050                 .db 20 ; open
40ED 3538             (CheckRules6809.as):00051                 .dw check_dobj_supplied
40EF 14               (CheckRules6809.as):00052                 .db 20 ; open
40F0 34B3             (CheckRules6809.as):00053                 .dw check_see_dobj
40F2 1A               (CheckRules6809.as):00054                 .db 26 ; put
40F3 3538             (CheckRules6809.as):00055                 .dw check_dobj_supplied
40F5 1A               (CheckRules6809.as):00056                 .db 26 ; put
40F6 34B3             (CheckRules6809.as):00057                 .dw check_see_dobj
40F8 1A               (CheckRules6809.as):00058                 .db 26 ; put
40F9 3583             (CheckRules6809.as):00059                 .dw check_prep_supplied
40FB 1A               (CheckRules6809.as):00060                 .db 26 ; put
40FC 35CB             (CheckRules6809.as):00061                 .dw check_iobj_supplied
40FE 1A               (CheckRules6809.as):00062                 .db 26 ; put
40FF 36BD             (CheckRules6809.as):00063                 .dw check_not_self_or_child
4101 22               (CheckRules6809.as):00064                 .db 34 ; talk to
4102 3538             (CheckRules6809.as):00065                 .dw check_dobj_supplied
4104 22               (CheckRules6809.as):00066                 .db 34 ; talk to
4105 34B3             (CheckRules6809.as):00067                 .dw check_see_dobj
4107 FF               (CheckRules6809.as):00068                 .db -1 ; turn on
4108 3538             (CheckRules6809.as):00069                 .dw check_dobj_supplied
410A FF               (CheckRules6809.as):00070                 .db -1 ; turn on
410B 34B3             (CheckRules6809.as):00071                 .dw check_see_dobj
410D FF               (CheckRules6809.as):00072                 .db -1 ; turn on
410E 3671             (CheckRules6809.as):00073                 .dw check_have_dobj
4110 16               (CheckRules6809.as):00074                 .db 22 ; unlock
4111 3538             (CheckRules6809.as):00075                 .dw check_dobj_supplied
4113 16               (CheckRules6809.as):00076                 .db 22 ; unlock
4114 34B3             (CheckRules6809.as):00077                 .dw check_see_dobj
4116 FF               (CheckRules6809.as):00078                 .db -1 ; push,press
4117 34B3             (CheckRules6809.as):00079                 .dw check_see_dobj
4119 FF               (CheckRules6809.as):00080                 .db -1 ; hit,strike
411A 34B3             (CheckRules6809.as):00081                 .dw check_see_dobj
411C 25               (CheckRules6809.as):00082                 .db 37 ; wear
411D 3671             (CheckRules6809.as):00083                 .dw check_have_dobj
411F 24               (CheckRules6809.as):00084                 .db 36 ; read
4120 34B3             (CheckRules6809.as):00085                 .dw check_see_dobj
4122 FF               (CheckRules6809.as):00086                 .db 255
                      (         main.asm):00076                 include vars.asm
                      (         vars.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         vars.asm):00002         ;vars.asm
                      (         vars.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         vars.asm):00004         
                      (         vars.asm):00005          
                      (         vars.asm):00006         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         vars.asm):00007         ;
                      (         vars.asm):00008         ;
                      (         vars.asm):00009         ;user stack contains return var (1 byte)
                      (         vars.asm):00010         ;user stack contains addr   (2 bytes)
                      (         vars.asm):00011         ;user stack contains value  (1 byte)
                      (         vars.asm):00012         ;0 or 1 is returned on the stack
                      (         vars.asm):00013         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4123                  (         vars.asm):00014         testvar
4123 3436             (         vars.asm):00015                 pshs d,x,y
4125 C600             (         vars.asm):00016                 ldb #0
4127 A743             (         vars.asm):00017                 sta 3,u ; set return code
4129 AE41             (         vars.asm):00018                 ldx 1,u ; load var address
412B A684             (         vars.asm):00019                 lda ,x  ; load var value
412D A1C4             (         vars.asm):00020                 cmpa ,u ; compare it to val on stack
412F 2702             (         vars.asm):00021                 beq @x
4131 C601             (         vars.asm):00022                 ldb #1
4133 3343             (         vars.asm):00023         @x      leau 3,u ; pop 2 params (3 bytes total)
4135 E7C4             (         vars.asm):00024                 stb ,u   ; store ret val
4137 3536             (         vars.asm):00025                 puls y,x,d
4139 39               (         vars.asm):00026                 rts
                      (         vars.asm):00027         
                      (         vars.asm):00028         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
                      (         vars.asm):00029         ;set var
                      (         vars.asm):00030         ;stack contains addr of var (2 bytes)
                      (         vars.asm):00031         ;stack contains addr of val (1 byte)  on top
                      (         vars.asm):00032         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
413A                  (         vars.asm):00033         setvar
413A 3436             (         vars.asm):00034                 pshs d,x,y
413C 3702             (         vars.asm):00035                 pulu a
413E 3710             (         vars.asm):00036                 pulu x
4140 A784             (         vars.asm):00037                 sta ,x
4142 3536             (         vars.asm):00038                 puls y,x,d
4144 39               (         vars.asm):00039                 rts     
                      (         vars.asm):00040         
                      (         vars.asm):00041         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
                      (         vars.asm):00042         ;stack contains addr of var (2 bytes)
                      (         vars.asm):00043         ;stack contains addr of val (1 byte)  on top
                      (         vars.asm):00044         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
4145                  (         vars.asm):00045         addtovar
4145 3436             (         vars.asm):00046                 pshs d,x,y
4147 3702             (         vars.asm):00047                 pulu a
4149 3710             (         vars.asm):00048                 pulu x
414B AB84             (         vars.asm):00049                 adda ,x
414D A784             (         vars.asm):00050                 sta ,x
414F 3536             (         vars.asm):00051                 puls y,x,d
4151 39               (         vars.asm):00052                 rts     
                      (         vars.asm):00053                 
                      (         vars.asm):00054         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         vars.asm):00055         ;built-in vars
                      (         vars.asm):00056         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4152 0000             (         vars.asm):00057         var_moves .dw 0
4154 0064             (         vars.asm):00058         var_health .dw 100
4156 0000             (         vars.asm):00059         var_prev_room .dw 0
4158 00               (         vars.asm):00060         turns_without_light .db 0 
                      (         main.asm):00077                 include UserVars6809.asm
                      ( UserVars6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      ( UserVars6809.asm):00002         ; User variables
                      ( UserVars6809.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      ( UserVars6809.asm):00004         
4159 00               ( UserVars6809.asm):00005         mannequinMoved  .db 0
415A 00               ( UserVars6809.asm):00006         readNote        .db 0
415B 00               ( UserVars6809.asm):00007         mannequinDead   .db 0
415C 00               ( UserVars6809.asm):00008         hatFound        .db 0
415D 00               ( UserVars6809.asm):00009         countDown       .db 0
415E 00               ( UserVars6809.asm):00010         activated       .db 0
415F 00               ( UserVars6809.asm):00011         temp    .db 0
                      (         main.asm):00078                 
                      (         main.asm):00079         
                      (         main.asm):00080         ;;;;;;;;;;;;;;;;;;;;;;;
                      (         main.asm):00081         ;article table
                      (         main.asm):00082         ;1st byte is length number
                      (         main.asm):00083         ;;;;;;;;;;;;;;;;;;;;;;;
4160                  (         main.asm):00084         article_table
4160 03               (         main.asm):00085                 .db 3
4161 54484500         (         main.asm):00086                 .strz "THE"
4165 01               (         main.asm):00087                 .db 1
4166 4100             (         main.asm):00088                 .strz "A"
4168 02               (         main.asm):00089                 .db 2
4169 414E00           (         main.asm):00090                 .strz "AN"
416C 00               (         main.asm):00091                 .db 0
                      (         main.asm):00092         
416D                  (         main.asm):00093         word1 rmb 32
418D                  (         main.asm):00094         word2 rmb 32
41AD                  (         main.asm):00095         word3 rmb 32
41CD                  (         main.asm):00096         word4 rmb 32
41ED                  (         main.asm):00097         word5 rmb 32
420D                  (         main.asm):00098         word6 rmb 32
422D                  (         main.asm):00099         word7 rmb 32
424D                  (         main.asm):00100         word8 rmb 32
426D 00               (         main.asm):00101         hit_end .db 0
426E 00               (         main.asm):00102         word_count .db 0
426F 0000             (         main.asm):00103         word_start .dw 0x0000
4271 0000             (         main.asm):00104         word_end .dw 0x0000
4273 00               (         main.asm):00105         first_char .db 0
4274 00               (         main.asm):00106         last_char .db 0
4275 00               (         main.asm):00107         table_index .db 0
4276 0000             (         main.asm):00108         user_stack_save .dw 0x0000
4278 0000             (         main.asm):00109         sys_stack_save .dw 0x0000
                      (         main.asm):00110         
                      (         main.asm):00111                 include Welcome6809.asm
                      (  Welcome6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (  Welcome6809.asm):00002         ; welcome message include file
                      (  Welcome6809.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (  Welcome6809.asm):00004         
427A 57454C434F4D4520 (  Welcome6809.asm):00005         welcome .strz  "WELCOME TO LONDON ADVENTURE."
     544F204C4F4E444F
     4E20414456454E54
     5552452E00
4297 454C4C494F542041 (  Welcome6809.asm):00006         author .strz  "ELLIOT AND EVAN WRIGHT"
     4E44204556414E20
     57524947485400
42AE 56455253494F4E20 (  Welcome6809.asm):00007         version .strz  "VERSION 1.0, 2017"
     312E302C20323031
     3700
                      (         main.asm):00112                 
                      (         main.asm):00113                 end start
