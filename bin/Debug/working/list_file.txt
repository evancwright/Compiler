                      (         main.asm):00001         ;romtest.asm
                      (         main.asm):00002         ;test program to see if coco ROM routines
                      (         main.asm):00003         ;can be used to read/write text
                      (         main.asm):00004         ; answer is yes!
     006F             (         main.asm):00005         DEVNUM equ 0x006f       ;       addr of dev
     B99C             (         main.asm):00006         SYSPRINT equ $b99c      ;       Out String: Prints ASCIIZ string ptd to by X to DEVNUM
     B958             (         main.asm):00007         PRINTCR equ $b958 ; print cr/nl
     A390             (         main.asm):00008         GETLINE equ $a390 ;
     02DD             (         main.asm):00009         KBBUF   equ $02dd       ; keyboard buffer 
                      (         main.asm):00010                 org 0xE00
0E00                  (         main.asm):00011         start
                      (         main.asm):00012         
                      (         main.asm):00013         ;       include verb_ids.asm
                      (         main.asm):00014                 include objdefs.asm
     00FF             (      objdefs.asm):00001         NO_OBJECT equ 255
     00FE             (      objdefs.asm):00002         ANY_OBJECT equ 254
                      (      objdefs.asm):00003         
                      (      objdefs.asm):00004         ; byte 2
     0001             (      objdefs.asm):00005         PORTABLE_MASK equ 1
                      (      objdefs.asm):00006         ;EDIBLE_MASK equ 2
     0002             (      objdefs.asm):00007         BACKDROP_MASK equ 2
     0004             (      objdefs.asm):00008         DRINKABLE_MASK equ 4
     0008             (      objdefs.asm):00009         FLAMMABLE_MASK equ 8
     0010             (      objdefs.asm):00010         LIGHTABLE_MASK equ 16
     0020             (      objdefs.asm):00011         LIT_MASK equ 32 
     0020             (      objdefs.asm):00012         EMITTING_LIGHT_MASK equ 32
     0040             (      objdefs.asm):00013         DOOR_MASK equ 64
     0080             (      objdefs.asm):00014         UNUSED_MASK equ 128
                      (      objdefs.asm):00015         ;DRINKABLE_MASK equ 128
                      (      objdefs.asm):00016         
                      (      objdefs.asm):00017         
                      (      objdefs.asm):00018         ; byte 1 (PROPERTY_BYTE_1)
     0001             (      objdefs.asm):00019         SCENERY_MASK equ 1
     0002             (      objdefs.asm):00020         SUPPORTER_MASK equ 2
     0004             (      objdefs.asm):00021         CONTAINER_MASK equ 4
     0008             (      objdefs.asm):00022         TRANSPARENT_MASK equ 8
     0010             (      objdefs.asm):00023         OPENABLE_MASK equ 16
     0020             (      objdefs.asm):00024         OPEN_MASK equ 32
     0040             (      objdefs.asm):00025         LOCKABLE_MASK equ 64
     0080             (      objdefs.asm):00026         LOCKED_MASK equ 128
     0024             (      objdefs.asm):00027         OPEN_CONTAINER_MASK equ (OPEN_MASK|CONTAINER_MASK) ;
                      (      objdefs.asm):00028         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (      objdefs.asm):00029         ; objdefs.asm
                      (      objdefs.asm):00030         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (      objdefs.asm):00031         
     0000             (      objdefs.asm):00032         OBJ_ID equ 0
     0001             (      objdefs.asm):00033         HOLDER_ID equ 1
     0002             (      objdefs.asm):00034         INITIAL_DESC_ID equ  2
     0003             (      objdefs.asm):00035         DESC_ID equ 3
     0004             (      objdefs.asm):00036         NORTH equ 4
     0005             (      objdefs.asm):00037         SOUTH equ 5
     0006             (      objdefs.asm):00038         EAST equ 6
     0007             (      objdefs.asm):00039         WEST equ 7
     0008             (      objdefs.asm):00040         NORTHEAST equ 8
     0009             (      objdefs.asm):00041         SOUTHEAST equ 9
     000A             (      objdefs.asm):00042         SOUTHWEST equ 10
     000B             (      objdefs.asm):00043         NORTHWEST equ 11
     000C             (      objdefs.asm):00044         UP equ 12
     000D             (      objdefs.asm):00045         DOWN equ 13
     000E             (      objdefs.asm):00046         ENTER equ 14
     000F             (      objdefs.asm):00047         OUT equ 15
     0010             (      objdefs.asm):00048         MASS equ 16
                      (      objdefs.asm):00049         
                      (      objdefs.asm):00050         
                      (      objdefs.asm):00051         ;OBJ_ENTRY_SIZE equ 18
                      (      objdefs.asm):00052         ;PROPERTY_BYTE_1 equ 16
                      (      objdefs.asm):00053         ;PROPERTY_BYTE_2 equ 17
                      (      objdefs.asm):00054         
     0013             (      objdefs.asm):00055         OBJ_ENTRY_SIZE equ 19
     0011             (      objdefs.asm):00056         PROPERTY_BYTE_1 equ 17
     0012             (      objdefs.asm):00057         PROPERTY_BYTE_2 equ 18
0E00                  (         main.asm):00015         main
0E00 CE7FFF           (         main.asm):00016                 ldu #0x7FFF ; setup user stack
0E03 0F6F             (         main.asm):00017                 clr DEVNUM      ; set device to screen (not needed? ) 
0E05 10FF2866         (         main.asm):00018                 sts sys_stack_save
0E09 BD1D4B           (         main.asm):00019                 jsr cls
0E0C 8E2868           (         main.asm):00020                 ldx #welcome
0E0F BD1914           (         main.asm):00021                 jsr PRINT
0E12 BDB958           (         main.asm):00022                 jsr PRINTCR
0E15 8E287F           (         main.asm):00023                 ldx #author
0E18 BD1914           (         main.asm):00024                 jsr PRINT
0E1B BDB958           (         main.asm):00025                 jsr PRINTCR
0E1E 8E2889           (         main.asm):00026                 ldx #version
0E21 BD1914           (         main.asm):00027                 jsr PRINT
0E24 BDB958           (         main.asm):00028                 jsr PRINTCR
0E27 BDB958           (         main.asm):00029                 jsr PRINTCR
0E2A BD1746           (         main.asm):00030                 jsr look_sub 
0E2D BD1C6C           (         main.asm):00031                 jsr draw_bar
0E30 BDA390           (         main.asm):00032         @lp     jsr GETLINE             ; get user command
0E33 BD0E46           (         main.asm):00033                 jsr parse
0E36 BDB958           (         main.asm):00034                 jsr PRINTCR
0E39 BD107F           (         main.asm):00035                 jsr encode_sentence
0E3C BD1C6C           (         main.asm):00036                 jsr draw_bar
0E3F 20EF             (         main.asm):00037                 bra @lp
0E41 10FE2866         (         main.asm):00038         quit lds sys_stack_save
0E45 39               (         main.asm):00039         @x      rts
                      (         main.asm):00040         
                      (         main.asm):00041                 include parser.asm      
                      (       parser.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00002         ;PARSER SUBROUTINES
                      (       parser.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00004         
     0005             (       parser.asm):00005         WORD_SPACES EQU 5
     0020             (       parser.asm):00006         WORD_SIZE EQU 32
     0020             (       parser.asm):00007         SPACE EQU 0x20 
     0001             (       parser.asm):00008         PLAYER EQU 1
     0000             (       parser.asm):00009         OFFSCREEN EQU 0
                      (       parser.asm):00010         
0E46                  (       parser.asm):00011         parse
                      (       parser.asm):00012         ;       jsr copy_data ; just for testing
0E46 BD0F81           (       parser.asm):00013                 jsr tokenize
0E49 BD0E99           (       parser.asm):00014                 jsr compress_verb
0E4C 39               (       parser.asm):00015                 rts
                      (       parser.asm):00016         
                      (       parser.asm):00017          
                      (       parser.asm):00018         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00019         ;nulls out the 50 characters in the
                      (       parser.asm):00020         ;5x10 buffer for the words in the
                      (       parser.asm):00021         ;sentence entered by the user
                      (       parser.asm):00022         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0E4D                  (       parser.asm):00023         clear_buffers
0E4D 8E0000           (       parser.asm):00024                 ldx #0
0E50 8600             (       parser.asm):00025                 lda #0
0E52 108E275B         (       parser.asm):00026                 ldy #word1
0E56 A7A0             (       parser.asm):00027         @lp     sta ,y+
0E58 108C285A         (       parser.asm):00028                 cmpy #(hit_end-1) ; hit end of buffer?
0E5C 26F8             (       parser.asm):00029                 bne @lp
0E5E 39               (       parser.asm):00030                 rts
                      (       parser.asm):00031         
                      (       parser.asm):00032         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00033         ; scans until a non-space or null is found
                      (       parser.asm):00034         ; sets hit_end if null is found
                      (       parser.asm):00035         ; search starts at addr stored in x
                      (       parser.asm):00036         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0E5F                  (       parser.asm):00037         find_start
0E5F 7F285B           (       parser.asm):00038                 clr hit_end
0E62 A680             (       parser.asm):00039         @lp lda ,x+
0E64 B72861           (       parser.asm):00040                 sta first_char
0E67 8120             (       parser.asm):00041                 cmpa #0x20      ; space?
0E69 27F7             (       parser.asm):00042                 beq @lp
0E6B 8100             (       parser.asm):00043                 cmpa #0 ; null?
0E6D 2605             (       parser.asm):00044                 bne @x  ; not null, we're done 
0E6F 8601             (       parser.asm):00045                 lda #1  ; hit null
0E71 B7285B           (       parser.asm):00046                 sta hit_end
0E74 301F             (       parser.asm):00047         @x      leax -1,x ; back up one byte (to count for x+)
0E76 BF285D           (       parser.asm):00048                 stx word_start
0E79 39               (       parser.asm):00049                 rts
                      (       parser.asm):00050                 
                      (       parser.asm):00051         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00052         ; scans until a space or null is found
                      (       parser.asm):00053         ; sets the hit_end byte to 1 if a null is hit
                      (       parser.asm):00054         ; search starts at word_start.
                      (       parser.asm):00055         ; end is replaced a null
                      (       parser.asm):00056         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0E7A                  (       parser.asm):00057         find_end
0E7A 8600             (       parser.asm):00058                 lda #0  ;assume we won't hit null
0E7C B7285B           (       parser.asm):00059                 sta hit_end 
0E7F BE285D           (       parser.asm):00060                 ldx word_start
0E82 A680             (       parser.asm):00061         @lp     lda ,x+
0E84 8120             (       parser.asm):00062                 cmpa #0x20 ; space
0E86 2709             (       parser.asm):00063                 beq @x  ; hit a space, done
0E88 8100             (       parser.asm):00064                 cmpa #0 ; null?
0E8A 26F6             (       parser.asm):00065                 bne @lp ; no keep, scanning 
0E8C 8601             (       parser.asm):00066                 lda #1  ; hit null, set flag
0E8E B7285B           (       parser.asm):00067                 sta hit_end
0E91 BF285F           (       parser.asm):00068         @x      stx word_end
0E94 8600             (       parser.asm):00069                 lda #0          ; replace end with null terminator
0E96 A71F             (       parser.asm):00070                 sta -1,x
0E98 39               (       parser.asm):00071                 rts
                      (       parser.asm):00072         
                      (       parser.asm):00073         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00074         ; compress_verb
                      (       parser.asm):00075         ; checks to see if the 2nd word is a prep
                      (       parser.asm):00076         ; if it is, that word is concatenated onto 
                      (       parser.asm):00077         ; the first work.  This accomodates verbs 
                      (       parser.asm):00078         ; like "look at"
                      (       parser.asm):00079         ; registers an unaffected
                      (       parser.asm):00080         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0E99                  (       parser.asm):00081         compress_verb
0E99 3436             (       parser.asm):00082                 pshs d,x,y
0E9B 8E277B           (       parser.asm):00083                 ldx #word2
0E9E 108E22A1         (       parser.asm):00084                 ldy #prep_table
0EA2 BD0F2D           (       parser.asm):00085                 jsr word_in_table
0EA5 3702             (       parser.asm):00086                 pulu a
0EA7 8101             (       parser.asm):00087                 cmpa #1 
0EA9 2642             (       parser.asm):00088                 bne @x                  ; not a prep, we're done
0EAB 8E275B           (       parser.asm):00089                 ldx #word1              
0EAE BF285D           (       parser.asm):00090                 stx word_start
0EB1 BD0E7A           (       parser.asm):00091                 jsr find_end    ; find end (sets word_end)
0EB4 10BE285F         (       parser.asm):00092                 ldy word_end
0EB8 313F             (       parser.asm):00093                 leay -1,y
0EBA 10BF285F         (       parser.asm):00094                 sty word_end
0EBE A69F285F         (       parser.asm):00095                 lda [word_end]  ; test - make sure its a null
0EC2 8620             (       parser.asm):00096                 lda #0x20               ; replace null with space
0EC4 A79F285F         (       parser.asm):00097                 sta [word_end]
0EC8 10BE285F         (       parser.asm):00098                 ldy word_end    ; set location to copy from
0ECC 3121             (       parser.asm):00099                 leay 1,y                ; move past the space
0ECE 8E277B           (       parser.asm):00100                 ldx #word2              ; set location to copy to (y)
0ED1 BD0F01           (       parser.asm):00101                 jsr strcpy              ; copy word 2 to end of word 1
0ED4 8E0000           (       parser.asm):00102                 ldx     #0                      ; shift all words down (move each byte 32 down)
0ED7 A689279B         (       parser.asm):00103         @lp     lda word3,x             ; grab a byte 
0EDB A789277B         (       parser.asm):00104                 sta word2,x     ; store it
0EDF 3001             (       parser.asm):00105                 leax 1,x                ; go to next byte
0EE1 8C0080           (       parser.asm):00106                 cmpx #(WORD_SIZE*(WORD_SPACES-1))
0EE4 26F1             (       parser.asm):00107                 bne @lp                 
0EE6 B6285C           (       parser.asm):00108                 lda word_count                          ;dec word_count
0EE9 4A               (       parser.asm):00109                 deca 
0EEA B7285C           (       parser.asm):00110                 sta word_count
0EED 3536             (       parser.asm):00111         @x      puls d,y,x
0EEF 39               (       parser.asm):00112                 rts
                      (       parser.asm):00113                 
                      (       parser.asm):00114         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00115         ; strcpy
                      (       parser.asm):00116         ; moves the string from wrd_start to wrd_end
                      (       parser.asm):00117         ; to the buffer stored in y
                      (       parser.asm):00118         ; tbd: limit the number of chars copied
                      (       parser.asm):00119         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0EF0                  (       parser.asm):00120         strcpy_old
0EF0 3420             (       parser.asm):00121                 pshs y
0EF2 BE285D           (       parser.asm):00122                 ldx word_start
0EF5 A680             (       parser.asm):00123         @lp     lda ,x+
0EF7 A7A0             (       parser.asm):00124                 sta ,y+
0EF9 BC285F           (       parser.asm):00125                 cmpx word_end
0EFC 26F7             (       parser.asm):00126                 bne @lp
0EFE 3520             (       parser.asm):00127                 puls y
0F00 39               (       parser.asm):00128                 rts
                      (       parser.asm):00129         
                      (       parser.asm):00130         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00131         ; strcpy
                      (       parser.asm):00132         ; copies string from x to y
                      (       parser.asm):00133         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F01                  (       parser.asm):00134         strcpy
0F01 3430             (       parser.asm):00135                 pshs x,y
0F03 A680             (       parser.asm):00136         @lp     lda ,x+
0F05 A7A0             (       parser.asm):00137                 sta ,y+
0F07 8100             (       parser.asm):00138                 cmpa #0 ; was last char a null
0F09 2702             (       parser.asm):00139                 beq @x
0F0B 20F6             (       parser.asm):00140                 bra @lp
0F0D 3530             (       parser.asm):00141         @x      puls y,x
0F0F 39               (       parser.asm):00142                 rts
                      (       parser.asm):00143         
                      (       parser.asm):00144         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00145         ;streq - test two strings for equality
                      (       parser.asm):00146         ;
                      (       parser.asm):00147         ;       x,y contain strings to compare
                      (       parser.asm):00148         ;       assumes strings are is null terminated
                      (       parser.asm):00149         ;       registers are clobbered
                      (       parser.asm):00150         ;       1 or 0 is put on user stack
                      (       parser.asm):00151         ;
                      (       parser.asm):00152         ;   cmpare two chars.
                      (       parser.asm):00153         ;   are they equal?
                      (       parser.asm):00154         ;       if no - return 0
                      (       parser.asm):00155         ;       if null - return 1
                      (       parser.asm):00156         ;   if not null loop 
                      (       parser.asm):00157         ;   
                      (       parser.asm):00158         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F10                  (       parser.asm):00159         streq
0F10 3430             (       parser.asm):00160                 pshs x,y
0F12 A684             (       parser.asm):00161         @lp     lda ,x                  ; get char
0F14 A1A4             (       parser.asm):00162                 cmpa ,y         ; are chars equal?
0F16 260E             (       parser.asm):00163                 bne @n                  ; no - return 0 
0F18 8100             (       parser.asm):00164                 cmpa #0                 ; equal. null?
0F1A 2706             (       parser.asm):00165                 beq @y                  ; yes (both nulls), push 1 and return
0F1C 3001             (       parser.asm):00166                 leax 1,x                ; go to next char
0F1E 3121             (       parser.asm):00167                 leay 1,y
0F20 20F0             (       parser.asm):00168                 bra @lp                         
0F22 8601             (       parser.asm):00169         @y  lda #1                      ; push 1 and return
0F24 2002             (       parser.asm):00170                 bra @x
0F26 8600             (       parser.asm):00171         @n      lda #0                  ; push 0 and return
0F28 3602             (       parser.asm):00172         @x      pshu a
0F2A 3530             (       parser.asm):00173                 puls y,x
0F2C 39               (       parser.asm):00174                 rts     
                      (       parser.asm):00175                 
                      (       parser.asm):00176         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00177         ;word_in_table
                      (       parser.asm):00178         ;
                      (       parser.asm):00179         ;x contains address of word
                      (       parser.asm):00180         ;y contains start of table
                      (       parser.asm):00181         ;returns 1 or 0 on the user stack
                      (       parser.asm):00182         ;the index is stored in table_index
                      (       parser.asm):00183         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F2D                  (       parser.asm):00184         word_in_table
0F2D 7F2863           (       parser.asm):00185                 clr     table_index ;set index to #ff (invalid)
0F30 3121             (       parser.asm):00186         @lp     leay 1,y                ;increment y to skip length byte
0F32 3430             (       parser.asm):00187                 pshs x,y                ; save regs
0F34 BD0F10           (       parser.asm):00188                 jsr streq               ;compare
0F37 3702             (       parser.asm):00189                 pulu a                  ; pull result into reg a
0F39 3530             (       parser.asm):00190                 puls y,x                ; restore regs
0F3B 8101             (       parser.asm):00191                 cmpa #1                 ;check result
0F3D 2713             (       parser.asm):00192                 beq @y                  ;equal! set flag and quit
0F3F 7C2863           (       parser.asm):00193                 inc table_index ;
0F42 313F             (       parser.asm):00194                 leay -1,y               ;back up to get amt to skip
0F44 A6A4             (       parser.asm):00195                 lda ,y                  ;get the length at that byte
0F46 31A6             (       parser.asm):00196                 leay a,y                ;skip ahead by that amount
0F48 3122             (       parser.asm):00197                 leay 2,y                ;account for 1st byte and null at end
0F4A A6A4             (       parser.asm):00198                 lda ,y                  ;is that byte 0 (the end of the list)
0F4C 8100             (       parser.asm):00199                 cmpa #0                 
0F4E 26E0             (       parser.asm):00200                 bne     @lp                     ;if no, keep checking
0F50 8600             (       parser.asm):00201                 lda #0                  ;not found, return 0
0F52 3602             (       parser.asm):00202         @y  pshu a                      ;push return val onto stack
                      (       parser.asm):00203                 ;sta in_tbl             ;debug
0F54 39               (       parser.asm):00204         @x      rts             
                      (       parser.asm):00205         
                      (       parser.asm):00206         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00207         ;word_in_table
                      (       parser.asm):00208         ;
                      (       parser.asm):00209         ;x contains address of word
                      (       parser.asm):00210         ;y contains start of table
                      (       parser.asm):00211         ;returns ff or the user index on the stack
                      (       parser.asm):00212         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F55                  (       parser.asm):00213         get_word_index
0F55 3436             (       parser.asm):00214                 pshs d,x,y                      ;save a
0F57 8600             (       parser.asm):00215                 lda #0                  ;assume not found
0F59 3602             (       parser.asm):00216                 pshu a                  ; push return code
0F5B 3121             (       parser.asm):00217         @lp     leay 1,y                ;increment y to skip length byte
0F5D 3430             (       parser.asm):00218                 pshs x,y                ; save regs
0F5F BD0F10           (       parser.asm):00219                 jsr streq               ;compare
0F62 3702             (       parser.asm):00220                 pulu a                  ; pull result into reg a
0F64 3530             (       parser.asm):00221                 puls y,x                ; restore regs
0F66 8101             (       parser.asm):00222                 cmpa #1                 ;check result
0F68 2714             (       parser.asm):00223                 beq @x                  ;equal! set flag and quit
0F6A 6C40             (       parser.asm):00224                 inc 0,u                 ;inc loop counter
0F6C 313F             (       parser.asm):00225                 leay -1,y               ;back up to get amt to skip
0F6E A6A4             (       parser.asm):00226                 lda ,y                  ;get the length at that byte
0F70 31A6             (       parser.asm):00227                 leay a,y                ;skip ahead by that amount
0F72 3122             (       parser.asm):00228                 leay 2,y                ;account for 1st byte and null at end
0F74 A6A4             (       parser.asm):00229                 lda ,y                  ;is that byte 0 (the end of the list)
0F76 8100             (       parser.asm):00230                 cmpa #0                 
0F78 26E1             (       parser.asm):00231                 bne     @lp                     ;if no, keep checking
0F7A 86FF             (       parser.asm):00232                 lda #$ff                        ;not found...
0F7C A740             (       parser.asm):00233                 sta 0,u                 ;put ff into our return var
0F7E 3536             (       parser.asm):00234         @x      puls y,x,d
0F80 39               (       parser.asm):00235                 rts
                      (       parser.asm):00236                         
                      (       parser.asm):00237         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00238         ;tokenize
                      (       parser.asm):00239         ;breaks up the text in "input" into words
                      (       parser.asm):00240         ;stored in the buffers
                      (       parser.asm):00241         ;y is used to hold the string storage location
                      (       parser.asm):00242         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F81                  (       parser.asm):00243         tokenize
0F81 BD0E4D           (       parser.asm):00244                 jsr clear_buffers
0F84 7F285C           (       parser.asm):00245                 clr word_count  
0F87 108E275B         (       parser.asm):00246                 ldy #word1                      ;set place to put strings
                      (       parser.asm):00247                 ;ldx #input                     ;load pos of str to scan
0F8B 8E02DD           (       parser.asm):00248                 ldx #KBBUF
0F8E BF285D           (       parser.asm):00249                 stx word_start  
0F91 BD0E5F           (       parser.asm):00250         @lp     jsr find_start
0F94 B6285B           (       parser.asm):00251                 lda hit_end
0F97 8101             (       parser.asm):00252                 cmpa #1                         ; hit end (no more wrds)
0F99 2737             (       parser.asm):00253                 beq @x
0F9B BD0E7A           (       parser.asm):00254                 jsr find_end            ; scan to end
0F9E 3630             (       parser.asm):00255                 pshu x,y
0FA0 BE285D           (       parser.asm):00256                 ldx word_start
0FA3 108E274E         (       parser.asm):00257                 ldy #article_table      ; is the word an article?
0FA7 BD0F2D           (       parser.asm):00258                 jsr word_in_table       ; 
0FAA 3702             (       parser.asm):00259                 pulu a                          ; get rslt
0FAC 3730             (       parser.asm):00260                 pulu y,x
0FAE 8101             (       parser.asm):00261                 cmpa #1                         ; was it an article?
0FB0 27DF             (       parser.asm):00262                 beq @lp                         ; yes, skip and go to next word
0FB2 3610             (       parser.asm):00263                 pshu x
0FB4 BE285D           (       parser.asm):00264                 ldx word_start
0FB7 BD0F01           (       parser.asm):00265                 jsr strcpy                      ; copies x to y
0FBA 3710             (       parser.asm):00266                 pulu x
0FBC 7C285C           (       parser.asm):00267                 inc word_count          ; inc word count
0FBF 31A820           (       parser.asm):00268                 leay 32,y                       ; move location to store str by (WORD_SIZE)
0FC2 B6285B           (       parser.asm):00269                 lda hit_end                     ; hit end?
0FC5 8101             (       parser.asm):00270                 cmpa #1
0FC7 2709             (       parser.asm):00271                 beq @x                          ; yes - done    
0FC9 8605             (       parser.asm):00272                 lda #WORD_SPACES        ; have we used all the storage locations
0FCB B1285C           (       parser.asm):00273                 cmpa word_count
0FCE 2702             (       parser.asm):00274                 beq @x                          ;out of spaces for words 
0FD0 20BF             (       parser.asm):00275                 bra @lp
0FD2 39               (       parser.asm):00276         @x      rts
                      (       parser.asm):00277         
                      (       parser.asm):00278         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00279         
                      (       parser.asm):00280         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00281         ;get_verbs_id
                      (       parser.asm):00282         ;
                      (       parser.asm):00283         ;return id# of verb in word1 or -1 (ff)
                      (       parser.asm):00284         ;
                      (       parser.asm):00285         ;table format
                      (       parser.asm):00286         ;id,lenght,text+null
                      (       parser.asm):00287         ;0
                      (       parser.asm):00288         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0FD3                  (       parser.asm):00289         get_verbs_id
0FD3 3432             (       parser.asm):00290                 pshs a,x,y
0FD5 8E2080           (       parser.asm):00291                 ldx #verb_table
0FD8 108E275B         (       parser.asm):00292                 ldy #word1
0FDC 3001             (       parser.asm):00293         @lp     leax 1,x        ;skip id byte
0FDE A600             (       parser.asm):00294                 lda 0,x         ;get length
0FE0 8100             (       parser.asm):00295                 cmpa #0         ;hit end of table?
0FE2 2719             (       parser.asm):00296                 beq @nf         ; not found
0FE4 3001             (       parser.asm):00297                 leax 1,x        ;skip length byte
0FE6 BD0F10           (       parser.asm):00298                 jsr streq       ;equal?
0FE9 3702             (       parser.asm):00299                 pulu a          
0FEB 8101             (       parser.asm):00300                 cmpa #1
0FED 2606             (       parser.asm):00301                 bne @sk         
0FEF 301E             (       parser.asm):00302                 leax -2,x       ;back up to id byte
0FF1 A600             (       parser.asm):00303                 lda 0,x         ;get it and return it
0FF3 200A             (       parser.asm):00304                 bra @x
0FF5 A61F             (       parser.asm):00305         @sk     lda -1,x        ;back up to length byte
0FF7 3086             (       parser.asm):00306                 leax a,x        ;skip text
0FF9 3001             (       parser.asm):00307                 leax 1,x        ;skip null byte
0FFB 20DF             (       parser.asm):00308                 bra @lp
0FFD 86FF             (       parser.asm):00309         @nf     lda #$ff                ;put -1 on stack and return
0FFF 3602             (       parser.asm):00310         @x      pshu a
1001 3532             (       parser.asm):00311                 puls y,x,a
1003 39               (       parser.asm):00312                 rts
                      (       parser.asm):00313                 
                      (       parser.asm):00314         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00315         ; b contains the id of the word to find the object for. 
                      (       parser.asm):00316         ; The object id is returned on the user stack.  
                      (       parser.asm):00317         ; ff is returned if the object is not found.
                      (       parser.asm):00318         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1004                  (       parser.asm):00319         get_obj_id
1004 3432             (       parser.asm):00320                 pshs a,x,y
1006 108E1DEE         (       parser.asm):00321                 ldy #obj_word_table
100A 86FF             (       parser.asm):00322                 lda #$ff                ; ff is 'not found'
100C 3602             (       parser.asm):00323                 pshu a          ; push return value onto stack
100E 3604             (       parser.asm):00324                 pshu b          ; save id param onto stack (local var)
                      (       parser.asm):00325         ;       lda #0
                      (       parser.asm):00326         ;@ol    pshs a          ; push outer loop counter
1010 8601             (       parser.asm):00327         @ol     lda #1          ; inner loop counter (1 to skip id byte)
1012 E6A6             (       parser.asm):00328         @il     ldb a,y         ; get word #
                      (       parser.asm):00329         ;       cmpb #$ff       ; is it empty?
                      (       parser.asm):00330         ;       beq @sk         ; skip if yes
1014 E140             (       parser.asm):00331                 cmpb 0,u        ; is b equal to param?
1016 2606             (       parser.asm):00332                 bne @sk                 
1018 E6A4             (       parser.asm):00333             ldb ,y              ; get the id
101A E741             (       parser.asm):00334                 stb 1,u ; store id of word in return var 
                      (       parser.asm):00335         ;       puls a          ; pop outer loop counter
101C 200F             (       parser.asm):00336                 bra @x
101E 4C               (       parser.asm):00337         @sk inca 
101F 8104             (       parser.asm):00338                 cmpa #4         ; (id byte + 3 cells) 
1021 26EF             (       parser.asm):00339                 bne @il
1023 3124             (       parser.asm):00340                 leay 4,y        ; advance to next row
1025 A6A4             (       parser.asm):00341                 lda ,y
1027 81FF             (       parser.asm):00342                 cmpa #$ff
1029 2702             (       parser.asm):00343                 beq @x
                      (       parser.asm):00344         ;       puls a          ; pop outer loop counter
                      (       parser.asm):00345         ;       inca            ; inc outer loop counter        
                      (       parser.asm):00346         ;       cmpa obj_table_size     ; see if we hit end of table
                      (       parser.asm):00347         ;       bne @ol
102B 20E3             (       parser.asm):00348                 bra @ol
102D 3702             (       parser.asm):00349         @x  pulu a              ; user param on stack
102F 3532             (       parser.asm):00350                 puls y,x,a
1031 39               (       parser.asm):00351                 rts
                      (       parser.asm):00352         
                      (       parser.asm):00353         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00354         ;find_prep_index
                      (       parser.asm):00355         ;
                      (       parser.asm):00356         ;this function returns the index of the preposition on
                      (       parser.asm):00357         ;the user stack.  If the
                      (       parser.asm):00358         ;sentence doesn't contain one, then 0 is returned.  This
                      (       parser.asm):00359         ;is used to figure out what type of sentence the player 
                      (       parser.asm):00360         ;has entered
                      (       parser.asm):00361         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1032                  (       parser.asm):00362         find_prep_index
1032 3432             (       parser.asm):00363                 pshs a,x,y
1034 8600             (       parser.asm):00364                 lda #0
1036 3602             (       parser.asm):00365                 pshu a  ;assume not found
1038 8602             (       parser.asm):00366                 lda #2
103A 8E279B           (       parser.asm):00367                 ldx #word3  ;prep can't be in word 1 or 2
103D 3432             (       parser.asm):00368         @lp     pshs y,x,a
103F 108E22A1         (       parser.asm):00369                 ldy #prep_table
1043 BD0F55           (       parser.asm):00370                 jsr get_word_index
1046 3532             (       parser.asm):00371                 puls a,x,y
1048 3704             (       parser.asm):00372                 pulu b          ;get return code        
104A C1FF             (       parser.asm):00373                 cmpb #$ff               ;found?
104C 270A             (       parser.asm):00374                 beq @sk
104E F711C5           (       parser.asm):00375                 stb prep_id             ;store prep id in sentence data
1051 F711C9           (       parser.asm):00376                 stb sentence+2
1054 A740             (       parser.asm):00377                 sta 0,u         ;store index in local var
1056 2008             (       parser.asm):00378                 bra @x
1058 308820           (       parser.asm):00379         @sk leax 32,x   ;skip word
105B 4C               (       parser.asm):00380                 inca 
105C 8105             (       parser.asm):00381                 cmpa #5         ;number of word slots
105E 26DD             (       parser.asm):00382                 bne @lp
1060 3532             (       parser.asm):00383         @x      puls y,x,a
1062 39               (       parser.asm):00384                 rts
                      (       parser.asm):00385         
                      (       parser.asm):00386         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00387         ;Sets all sentence data bytes to #ff
                      (       parser.asm):00388         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1063                  (       parser.asm):00389         clear_sentence
1063 3432             (       parser.asm):00390                 pshs a,x,y
1065 8E11C7           (       parser.asm):00391                 ldx #sentence
1068 86FF             (       parser.asm):00392                 lda #$ff
106A A780             (       parser.asm):00393                 sta ,x+
106C A780             (       parser.asm):00394                 sta ,x+
106E A780             (       parser.asm):00395                 sta ,x+
1070 A780             (       parser.asm):00396                 sta ,x+
1072 3532             (       parser.asm):00397                 puls y,x,a      
1074 39               (       parser.asm):00398                 rts
                      (       parser.asm):00399                 
                      (       parser.asm):00400         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00401         ;validate do
                      (       parser.asm):00402         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1075                  (       parser.asm):00403         validate_do     
1075 39               (       parser.asm):00404                 rts
                      (       parser.asm):00405         
                      (       parser.asm):00406         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00407         ;sets x to word#1 + a *32
                      (       parser.asm):00408         ;used to set the print position
                      (       parser.asm):00409         ;before called a printret error
                      (       parser.asm):00410         ;message
                      (       parser.asm):00411         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   
1076                  (       parser.asm):00412         set_word_addr
1076 8E275B           (       parser.asm):00413                 ldx #word1
1079 BD1159           (       parser.asm):00414                 jsr a_times_32
107C 3086             (       parser.asm):00415                 leax a,x 
107E 39               (       parser.asm):00416                 rts
                      (       parser.asm):00417                 
                      (       parser.asm):00418         ;assumes sentence has already been parsed
                      (       parser.asm):00419         ;and verb has been compressed
                      (       parser.asm):00420         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     
                      (       parser.asm):00421         ;if (prep found) {
                      (       parser.asm):00422         ;       find do and io
                      (       parser.asm):00423         ;} else {
                      (       parser.asm):00424         ;       if (wordcount > 1)
                      (       parser.asm):00425         ;               find # of do
                      (       parser.asm):00426         ;}
                      (       parser.asm):00427         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
107F                  (       parser.asm):00428         encode_sentence 
107F 3436             (       parser.asm):00429                 pshs d,x,y
1081 B6275B           (       parser.asm):00430                 lda word1
1084 8100             (       parser.asm):00431                 cmpa #0
1086 10270456         (       parser.asm):00432                 lbeq print_ret_pardon
108A BD1063           (       parser.asm):00433                 jsr clear_sentence
108D BD0FD3           (       parser.asm):00434                 jsr get_verbs_id                ;
1090 3702             (       parser.asm):00435                 pulu a                          ; clear return val
1092 81FF             (       parser.asm):00436                 cmpa #$ff
1094 102703A6         (       parser.asm):00437                 lbeq print_ret_bad_verb ;
1098 B711C7           (       parser.asm):00438                 sta sentence            ; store verb id
109B BD1032           (       parser.asm):00439                 jsr find_prep_index     ; is there a prep in this sentence?
109E 3702             (       parser.asm):00440                 pulu a                          ;pull and store result
10A0 8100             (       parser.asm):00441                 cmpa #0         ;was there a prep?
                      (       parser.asm):00442                 ;sta prep_index         
10A2 273C             (       parser.asm):00443                 beq @np
                      (       parser.asm):00444                 ;lda table_index        ;store prep id (was set by find_prep_index)
                      (       parser.asm):00445                 ;sta sentence+2         ;put prep# in sentence
                      (       parser.asm):00446                 ;lda prep_index         ;get prep index so we can 
10A4 4A               (       parser.asm):00447                 deca                            ;isolate nouns
10A5 3402             (       parser.asm):00448                 pshs a                          ;save word index
10A7 BD1149           (       parser.asm):00449                 jsr lookup_word
10AA 3502             (       parser.asm):00450                 puls a                          ;restore it
10AC 12               (       parser.asm):00451                 nop                                     ;need to load address of word
10AD 3704             (       parser.asm):00452                 pulu b                          ;get return from loopup word
10AF BD1076           (       parser.asm):00453                 jsr set_word_addr   ;print word at word#1 * 32
10B2 C1FF             (       parser.asm):00454                 cmpb #$ff                       ;was it found in dictionary?
10B4 1027036D         (       parser.asm):00455                 lbeq print_ret_bad_noun ;
                      (       parser.asm):00456                 ;tfr a,b                                ;lookup routine uses b as its param
10B8 BD1004           (       parser.asm):00457                 jsr get_obj_id          ;get the object it belongs to
10BB 3702             (       parser.asm):00458                 pulu a
10BD B711C8           (       parser.asm):00459                 sta sentence+1          ;store direct object
10C0 12               (       parser.asm):00460                 nop     ; now validate io
10C1 B6285C           (       parser.asm):00461                 lda word_count          ;io will be in wc-1
10C4 4A               (       parser.asm):00462                 deca
10C5 BD1149           (       parser.asm):00463                 jsr lookup_word
10C8 BD1076           (       parser.asm):00464                 jsr set_word_addr   ;set address of noun to print
10CB 3704             (       parser.asm):00465                 pulu b                          ;get return code from lookup
10CD 8E27BB           (       parser.asm):00466                 ldx #word4                      ;load verb to print if not matched
10D0 C1FF             (       parser.asm):00467                 cmpb #$ff                       ;was it found
10D2 1027034F         (       parser.asm):00468                 lbeq print_ret_bad_noun ;
                      (       parser.asm):00469                 ;tfr a,b                                ;lookup routine uses b as its param
                      (       parser.asm):00470                 ;pulu a                 ; what was this for??????? HIGHLY SUSPICIOUS
10D6 BD1004           (       parser.asm):00471                 jsr get_obj_id          ;get the object it belongs to
10D9 3702             (       parser.asm):00472                 pulu a
10DB B711CA           (       parser.asm):00473                 sta sentence+3          ;store io
10DE 2023             (       parser.asm):00474                 bra @dn
10E0 B6285C           (       parser.asm):00475         @np     lda word_count          ;sentence is either verb or verb + obj
10E3 8101             (       parser.asm):00476                 cmpa #1
10E5 271C             (       parser.asm):00477                 beq @dn         ;noe 
10E7 B6285C           (       parser.asm):00478                 lda word_count          ; get pos of of d.o.
10EA 4A               (       parser.asm):00479                 deca
10EB BD1149           (       parser.asm):00480                 jsr lookup_word
10EE 3702             (       parser.asm):00481                 pulu a  
10F0 8E277B           (       parser.asm):00482             ldx #word2
10F3 81FF             (       parser.asm):00483                 cmpa #$ff                       ;was it found?
10F5 1027032C         (       parser.asm):00484                 lbeq print_ret_bad_noun ;
10F9 1F89             (       parser.asm):00485                 tfr a,b                         ;lookup routine uses b as its param
10FB BD1004           (       parser.asm):00486                 jsr get_obj_id          ;get the object it belongs to
10FE 3702             (       parser.asm):00487                 pulu a
1100 B711C8           (       parser.asm):00488                 sta sentence+1          ;store id of d.o.
1103 12               (       parser.asm):00489         @dn     nop ; run check rules
1104 8E26AE           (       parser.asm):00490                 ldx #check_table
1107 A684             (       parser.asm):00491         @lp     lda ,x
1109 81FF             (       parser.asm):00492                 cmpa #255
110B 2715             (       parser.asm):00493                 beq @bf
110D B111C7           (       parser.asm):00494                 cmpa sentence  ; get verb
1110 260B             (       parser.asm):00495                 bne @c
1112 AD9801           (       parser.asm):00496                 jsr [1,x] ; jump to the subroutine
1115 3704             (       parser.asm):00497                 pulu b    ;check status
1117 C100             (       parser.asm):00498                 cmpb #0
1119 2602             (       parser.asm):00499                 bne @c
111B 2029             (       parser.asm):00500                 bra @x
111D 3003             (       parser.asm):00501         @c      leax 3,x        ;skip 3 bytes (the size of an entry)
111F 20E6             (       parser.asm):00502                 bra @lp
1121 12               (       parser.asm):00503                 nop ; run 'before' rules
1122 8E2538           (       parser.asm):00504         @bf     ldx #preactions_table
1125 BD13E5           (       parser.asm):00505                 jsr run_actions
1128 3702             (       parser.asm):00506                 pulu a
112A 12               (       parser.asm):00507                 nop ; check the return code?
112B 8E2539           (       parser.asm):00508                 ldx #actions_table
112E BD13E5           (       parser.asm):00509                 jsr run_actions
1131 3702             (       parser.asm):00510                 pulu a
1133 8101             (       parser.asm):00511                 cmpa #1 ; if handled skip default handling
1135 2703             (       parser.asm):00512                 beq @s
1137 BD11AA           (       parser.asm):00513                 jsr run_sentence ; run the sentence
113A 12               (       parser.asm):00514         @s      nop ; run 'after' rules
113B 8E2546           (       parser.asm):00515                 ldx #postactions_table
113E BD13E5           (       parser.asm):00516                 jsr run_actions ;
1141 3702             (       parser.asm):00517                 pulu a
1143 BD2547           (       parser.asm):00518                 jsr do_events
1146 3536             (       parser.asm):00519         @x      puls y,x,d
1148 39               (       parser.asm):00520                 rts     
                      (       parser.asm):00521         
                      (       parser.asm):00522         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00523         ;looks up the word at wc-1
                      (       parser.asm):00524         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1149                  (       parser.asm):00525         lookup_word 
1149 BD1159           (       parser.asm):00526                 jsr a_times_32          ;get word offset
114C 8E275B           (       parser.asm):00527                 ldx #word1
114F 3086             (       parser.asm):00528                 leax a,x
1151 108E1D77         (       parser.asm):00529                 ldy #dictionary         ;need to get i.o., too   
1155 BD0F55           (       parser.asm):00530                 jsr get_word_index      ;check dictionary and leave it on the user stack
1158 39               (       parser.asm):00531                 rts
                      (       parser.asm):00532                 
1159                  (       parser.asm):00533         a_times_32
1159 48               (       parser.asm):00534                 lsla                            ;x32 to get the offset of the word
115A 48               (       parser.asm):00535                 lsla                            ;x32 to get the offset of the word
115B 48               (       parser.asm):00536                 lsla                            ;x32 to get the offset of the word
115C 48               (       parser.asm):00537                 lsla                            ;x32 to get the offset of the word
115D 48               (       parser.asm):00538                 lsla                            ;x32 to get the offset of the word
115E 39               (       parser.asm):00539                 rts
                      (       parser.asm):00540         
                      (       parser.asm):00541         
                      (       parser.asm):00542         
                      (       parser.asm):00543         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00544         ;create_property_mask
                      (       parser.asm):00545         ;assumes prop# is on user stack
                      (       parser.asm):00546         ;value is returned on the user stack
                      (       parser.asm):00547         ;for properties # greater than 16, the msb is
                      (       parser.asm):00548         ; created.
                      (       parser.asm):00549         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
115F                  (       parser.asm):00550         create_property_mask
115F 3406             (       parser.asm):00551                 pshs a,b
1161 3702             (       parser.asm):00552                 pulu a  ; get prop #
1163 8109             (       parser.asm):00553                 cmpa #9 ; is mask >= 9
1165 2504             (       parser.asm):00554                 blo @lp
1167 8008             (       parser.asm):00555                 suba #8 ; -8 to make val <= 8
1169 C601             (       parser.asm):00556                 ldb #1  ; load mask with a '1' to shift left
116B 8101             (       parser.asm):00557         @lp     cmpa #1 ;done?
116D 2004             (       parser.asm):00558                 bra @x  ;done looping
116F 4A               (       parser.asm):00559                 deca    ;dec loop counter
1170 58               (       parser.asm):00560                 aslb            ;shift left
1171 20F8             (       parser.asm):00561                 bra @lp
1173 3604             (       parser.asm):00562         @x  pshu b      ; push return code
1175 3506             (       parser.asm):00563                 puls b,a
1177 39               (       parser.asm):00564                 rts
                      (       parser.asm):00565         
                      (       parser.asm):00566         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00567         ; returns the propert for the object on the 
                      (       parser.asm):00568         ; user stack. the value will be either 1 or 0
                      (       parser.asm):00569         ; 1-object id
                      (       parser.asm):00570         ; 2-property number
                      (       parser.asm):00571         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1178                  (       parser.asm):00572         get_object_property
1178 3436             (       parser.asm):00573                 pshs d,x,y
117A A641             (       parser.asm):00574                 lda 1,u ; id
117C E640             (       parser.asm):00575                 ldb 0,u ; property mask
117E 8E1DA1           (       parser.asm):00576                 ldx #obj_table
1181 8100             (       parser.asm):00577         @lp     cmpa #0                 ;loop to correct offset
1183 2706             (       parser.asm):00578                 beq @d
1185 308813           (       parser.asm):00579                 leax OBJ_ENTRY_SIZE,x
1188 4A               (       parser.asm):00580                 deca
1189 20F6             (       parser.asm):00581                 bra @lp
118B E48811           (       parser.asm):00582         @d      andb (OBJ_ENTRY_SIZE-2),x               ;skip over to property bytes
118E C109             (       parser.asm):00583                 cmpb #9 ; props >=9 are stored 
1190 2504             (       parser.asm):00584                 blo @lo
1192 E484             (       parser.asm):00585                 andb ,x                 ;load the byte
1194 2003             (       parser.asm):00586                 bra @x
1196 12               (       parser.asm):00587         @lo     nop     ; AND higher byte
1197 3001             (       parser.asm):00588                 leax 1,x                ;shift to       
1199 E484             (       parser.asm):00589         @x      andb ,x                 ;load the byte
119B 3702             (       parser.asm):00590                 pulu a                  ;clear 
119D 3702             (       parser.asm):00591                 pulu a                  ;clear 
119F C100             (       parser.asm):00592                 cmpb #0 
11A1 2702             (       parser.asm):00593                 beq @z
11A3 C601             (       parser.asm):00594                 ldb  #1
11A5 3604             (       parser.asm):00595         @z      pshu b                  ;put return val on stack
11A7 3536             (       parser.asm):00596                 puls y,x,d
11A9 39               (       parser.asm):00597                 rts
                      (       parser.asm):00598                 
                      (       parser.asm):00599         
                      (       parser.asm):00600         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       parser.asm):00601         ;jumps to the subroutine for the verb the
                      (       parser.asm):00602         ;player typed in.
                      (       parser.asm):00603         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   
11AA                  (       parser.asm):00604         run_sentence
11AA 12               (       parser.asm):00605                 nop     ;       try the custom actions
11AB 12               (       parser.asm):00606                 nop     ;       try the default actions
11AC 8E2031           (       parser.asm):00607                 ldx #sentence_table
11AF A684             (       parser.asm):00608         @lp     lda ,x
11B1 81FF             (       parser.asm):00609                 cmpa #$ff       ;hit end of table
11B3 270E             (       parser.asm):00610                 beq @x
11B5 B111C7           (       parser.asm):00611                 cmpa sentence
11B8 2605             (       parser.asm):00612                 bne @sk
11BA AD9801           (       parser.asm):00613                 jsr [1,x]
11BD 2004             (       parser.asm):00614                 bra @x
11BF 3003             (       parser.asm):00615         @sk     leax 3,x        ; skip to next handler
11C1 26EC             (       parser.asm):00616                 bne @lp
11C3 39               (       parser.asm):00617         @x      rts
                      (       parser.asm):00618         
                      (       parser.asm):00619                 
                      (       parser.asm):00620         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
11C4 00               (       parser.asm):00621         prep_index .db 0        
11C5 00               (       parser.asm):00622         prep_id .db 0
11C6 00               (       parser.asm):00623         sentence_type .db 0     
11C7 FFFFFFFF         (       parser.asm):00624         sentence .db 255,255,255,255
                      (         main.asm):00042                 include random.asm
                      (       random.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       random.asm):00002         ;NEXT_RAND
                      (       random.asm):00003         ;THIS SUBROUTINE USES A LINEAR SHIFT
                      (       random.asm):00004         ;TO IMPLEMENT RANDOM NUMBER GENERATION
                      (       random.asm):00005         ;THE TAPS ARE BITS 0 AND 3
                      (       random.asm):00006         ;
                      (       random.asm):00007         ;THE SEED (CUR_RAND) SHOULD BE LOADED BEFORE 
                      (       random.asm):00008         ;THIS ROUTINE IS CALLED.  JUST DON'T LOAD
                      (       random.asm):00009         ;IT WITH ALL ZEROS TO START 0
                      (       random.asm):00010         ;
                      (       random.asm):00011         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       random.asm):00012         
                      (       random.asm):00013         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       random.asm):00014         ;user stack contains divisor (16 bit)
                      (       random.asm):00015         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       
11CB                  (       random.asm):00016         randmod
11CB 3436             (       random.asm):00017                 pshs d,x,y
11CD BD11D6           (       random.asm):00018                 jsr rand        ; puts number on stack  
11D0 BD1D1E           (       random.asm):00019                 jsr mod2b   ; leaves number on stack
11D3 3536             (       random.asm):00020                 puls y,x,d
11D5 39               (       random.asm):00021                 rts
                      (       random.asm):00022         
                      (       random.asm):00023         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       random.asm):00024         ;LSR RANDOM NUMBER GENERATOR
                      (       random.asm):00025         ;ALL REGISTERS ARE PRESERVED
                      (       random.asm):00026         ;number is returned on the user stack
                      (       random.asm):00027         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11D6                  (       random.asm):00028         rand
11D6 3416             (       random.asm):00029                 PSHS D,x
11D8 F6123C           (       random.asm):00030                 LDB CUR_RAND+1 ; GET RIGHT BYTE
11DB F41240           (       random.asm):00031                 ANDB LEFT_TAP_MASK ; MASK RAND TO GET LEFT TAP  
11DE F71242           (       random.asm):00032                 STB LEFT_TAP                    ;SAVE IT
11E1 F6123C           (       random.asm):00033                 LDB CUR_RAND+1          ;RELOAD
11E4 F41241           (       random.asm):00034                 ANDB RIGHT_TAP_MASK     ; MASK RAND TO GET RIGHT TAP
                      (       random.asm):00035                 ;RIGHT TAP IS THE LSB (SO WE DON'T NEED TO SHIFT)
11E7 F71243           (       random.asm):00036                 STB RIGHT_TAP
11EA 781243           (       random.asm):00037                 LSL RIGHT_TAP   ;LEFT JUSTIFY THE RIGHT TAP 
11ED 781243           (       random.asm):00038                 LSL RIGHT_TAP   ;SO THE TWO TAPS CAN BE 
11F0 781243           (       random.asm):00039                 LSL RIGHT_TAP   ;XOR'D AND EASILY
11F3 781243           (       random.asm):00040                 LSL RIGHT_TAP   ;MASKED BACK ONTO THE LEFT
11F6 781243           (       random.asm):00041                 LSL RIGHT_TAP   ;BYTE OF THE RANDOM NUMBER
11F9 781243           (       random.asm):00042                 LSL RIGHT_TAP
11FC 781243           (       random.asm):00043                 LSL RIGHT_TAP
                      (       random.asm):00044                 ;NOW WE HAVE BOTH TAPS, XOR THEM
11FF B61242           (       random.asm):00045                 LDA LEFT_TAP
1202 B81243           (       random.asm):00046                 EORA RIGHT_TAP  
1205 B71244           (       random.asm):00047                 STA XOR_RSLT
                      (       random.asm):00048                 ;NOW SHIFT
1208 FC123B           (       random.asm):00049                 LDD CUR_RAND    ;LOAD LEFT BYTE
120B 44               (       random.asm):00050                 LSRA ; PUTS BIT 0 INTO CARRY BIT 
120C B7123B           (       random.asm):00051                 STA CUR_RAND ; STORE NEW MSB
120F 2409             (       random.asm):00052                 BCC @nc
1211 F6123C           (       random.asm):00053                 LDB     CUR_RAND+1      ;THERE WAS A CARRY
1214 54               (       random.asm):00054                 LSRB
1215 FA123F           (       random.asm):00055                 ORB ONE_IN_MSB ;  MASK A 1 ONTO THE LEFT MOST BIT
1218 2004             (       random.asm):00056                 BRA @ds  ;  DONE SHIFTING
121A                  (       random.asm):00057         @nc     
121A F6123C           (       random.asm):00058                 LDB     CUR_RAND+1 ; JUST SHIFT, NO 1 ON LEFT
121D 54               (       random.asm):00059                 LSRB
121E F7123C           (       random.asm):00060         @ds STB CUR_RAND+1      ; STORE RIGHT HALF OF NEW RAND
                      (       random.asm):00061                 ;NOW MASK THE XOR_RSLT ONTO THE MSB
1221 B6123B           (       random.asm):00062                 LDA CUR_RAND
1224 BA1244           (       random.asm):00063                 ORA XOR_RSLT    ; MASK A '1' ONTO THE MSB
1227 B7123B           (       random.asm):00064                 STA CUR_RAND
                      (       random.asm):00065                 ;SUBTRACT 1 SINCE THE WORKING RAND CAN'T CONTAIN 0
122A FC123B           (       random.asm):00066                 LDD CUR_RAND    ; RELOAD 2 BYTE VALUE
122D 830001           (       random.asm):00067                 SUBD #1         ; DEC
1230 FD123D           (       random.asm):00068                 STD RAND                        
1233 BE123B           (       random.asm):00069                 ldx CUR_RAND 
1236 3610             (       random.asm):00070                 pshu x
1238 3516             (       random.asm):00071                 PULS x,D
123A 39               (       random.asm):00072                 RTS     
                      (       random.asm):00073         
                      (       random.asm):00074         ;DATA FOR RANDOM NUMBER GENERATION
123B 0F0F             (       random.asm):00075         CUR_RAND                        .DW 0x0F0F
123D 0000             (       random.asm):00076         RAND                            .DW 0x0000
123F 80               (       random.asm):00077         ONE_IN_MSB              .DB 0x80
1240 80               (       random.asm):00078         LEFT_TAP_MASK   .DB 0x80 ; 1000 0000
1241 01               (       random.asm):00079         RIGHT_TAP_MASK  .DB 0x01 ; 0000 0001
1242 00               (       random.asm):00080         LEFT_TAP                .DB 0x00
1243 00               (       random.asm):00081         RIGHT_TAP               .DB 0x00
1244 00               (       random.asm):00082         XOR_RSLT                        .BYTE 0x00
1245                  (       random.asm):00083         OUTPUT
1245 0000             (       random.asm):00084                 .DW 0X0000
1247 0000             (       random.asm):00085                 .DW 0X0000
1249 0000             (       random.asm):00086                 .DW 0X0000
                      (         main.asm):00043                 include routines.asm
                      (     routines.asm):00001         
                      (     routines.asm):00002         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00003         ;look_at_sub
                      (     routines.asm):00004         ;prints the description and any nested contents
                      (     routines.asm):00005         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
124B                  (     routines.asm):00006         look_at_sub
124B 3436             (     routines.asm):00007                 pshs d,x,y
124D 12               (     routines.asm):00008                 nop ; check for light
124E B611C8           (     routines.asm):00009         @s      lda sentence+1
1251 C613             (     routines.asm):00010                 ldb #OBJ_ENTRY_SIZE
1253 3D               (     routines.asm):00011                 mul
1254 1F01             (     routines.asm):00012                 tfr d,x
1256 30891DA1         (     routines.asm):00013                 leax obj_table,x
125A 3610             (     routines.asm):00014                 pshu x
125C A603             (     routines.asm):00015                 lda DESC_ID,x
125E 3602             (     routines.asm):00016                 pshu a
1260 8E1E00           (     routines.asm):00017                 ldx #description_table
1263 BD19FF           (     routines.asm):00018                 jsr print_table_entry
1266 1F21             (     routines.asm):00019                 tfr y,x
1268 B611C8           (     routines.asm):00020                 lda sentence+1
126B 3602             (     routines.asm):00021                 pshu a
126D BD183A           (     routines.asm):00022                 jsr count_visible_items
1270 3702             (     routines.asm):00023                 pulu a
1272 3710             (     routines.asm):00024                 pulu x
1274 8100             (     routines.asm):00025                 cmpa #0
1276 2703             (     routines.asm):00026                 beq @x
1278 BD1A20           (     routines.asm):00027                 jsr print_nested_contents
127B BDB958           (     routines.asm):00028         @x      jsr PRINTCR
127E 3536             (     routines.asm):00029                 puls y,x,d
1280 39               (     routines.asm):00030                 rts
                      (     routines.asm):00031                 
                      (     routines.asm):00032         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00033         ;       called by jump table
                      (     routines.asm):00034         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1281                  (     routines.asm):00035         move_player
1281 3432             (     routines.asm):00036                 pshs a,x,y
1283 BD12ED           (     routines.asm):00037                 jsr get_move_direction ; convert verb to get move direction
1286 3704             (     routines.asm):00038                 pulu b
1288 12               (     routines.asm):00039                 nop     ; now get player's current room
1289 BD1BAC           (     routines.asm):00040                 jsr get_player_room ;get player's current room
128C 3702             (     routines.asm):00041                 pulu a          ; get player's current room
128E 12               (     routines.asm):00042                 nop ; now get that room's direction attribute
128F 3602             (     routines.asm):00043                 pshu a          ; put object id back on stack (yes, this is redundant)
1291 3604             (     routines.asm):00044                 pshu b          ; put the direction on the stack        
1293 BD138A           (     routines.asm):00045                 jsr get_object_attribute 
1296 3702             (     routines.asm):00046                 pulu a          ; get new room
1298 B713C2           (     routines.asm):00047                 sta new_room
129B 817F             (     routines.asm):00048                 cmpa #127       ; is it a room or a nogo message?
129D 223D             (     routines.asm):00049                 bhi @ng
129F 12               (     routines.asm):00050                 nop ; is it a door?
12A0 C613             (     routines.asm):00051                 ldb #OBJ_ENTRY_SIZE
12A2 3D               (     routines.asm):00052                 mul
12A3 1F01             (     routines.asm):00053                 tfr d,x
12A5 30891DA1         (     routines.asm):00054                 leax obj_table,x
12A9 E68812           (     routines.asm):00055                 ldb PROPERTY_BYTE_2,x
12AC C440             (     routines.asm):00056                 andb #DOOR_MASK
12AE C140             (     routines.asm):00057                 cmpb #DOOR_MASK
12B0 2619             (     routines.asm):00058                 bne @g          ;not a door-jump
12B2 E68811           (     routines.asm):00059                 ldb PROPERTY_BYTE_1,x
12B5 C420             (     routines.asm):00060                 andb #OPEN_MASK
12B7 C120             (     routines.asm):00061                 cmpb #OPEN_MASK
12B9 2706             (     routines.asm):00062                 beq @d          ;open - go through door
12BB BD1538           (     routines.asm):00063                 jsr print_object_closed
12BE 202A             (     routines.asm):00064                 bra @x  ;
12C0 12               (     routines.asm):00065                 nop             ; door is open, get room it leads to
12C1 BD12ED           (     routines.asm):00066         @d      jsr get_move_direction ; convert verb to get move direction
12C4 3704             (     routines.asm):00067                 pulu b
12C6 E685             (     routines.asm):00068                 ldb b,x
12C8 F713C2           (     routines.asm):00069                 stb new_room
12CB C601             (     routines.asm):00070         @g      ldb #PLAYER
12CD 3604             (     routines.asm):00071                 pshu b          ;push player id 
12CF B613C2           (     routines.asm):00072                 lda new_room
12D2 3602             (     routines.asm):00073                 pshu a          ;push new room  
12D4 BD130E           (     routines.asm):00074                 jsr move_object
12D7 BD1746           (     routines.asm):00075                 jsr look_sub    
12DA 200E             (     routines.asm):00076                 bra @x
12DC 12               (     routines.asm):00077         @ng nop         ;convert a to a positive #
12DD 43               (     routines.asm):00078                 coma    ;take two's complement of a
12DE 4C               (     routines.asm):00079                 inca
12DF 3602             (     routines.asm):00080                 pshu a
12E1 8E2010           (     routines.asm):00081                 ldx #nogo_table 
12E4 BD19FF           (     routines.asm):00082                 jsr print_table_entry
12E7 BDB958           (     routines.asm):00083                 jsr PRINTCR
12EA 3532             (     routines.asm):00084         @x      puls y,x,a
12EC 39               (     routines.asm):00085                 rts
                      (     routines.asm):00086         
                      (     routines.asm):00087         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00088         ;converts the verb in $sentence to the attribute
                      (     routines.asm):00089         ;number for that direction.
                      (     routines.asm):00090         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
12ED                  (     routines.asm):00091         get_move_direction
12ED 3436             (     routines.asm):00092                 pshs d,x,y
12EF 86FF             (     routines.asm):00093                 lda #$ff
12F1 3602             (     routines.asm):00094                 pshu a                  ;push return value
12F3 8E135E           (     routines.asm):00095                 ldx #direction_map
12F6 A684             (     routines.asm):00096         @lp lda ,x
12F8 81FF             (     routines.asm):00097                 cmpa #$ff
12FA 270F             (     routines.asm):00098                 beq @x
12FC B111C7           (     routines.asm):00099                 cmpa sentence   
12FF 2606             (     routines.asm):00100                 bne @s
1301 A601             (     routines.asm):00101                 lda 1,x ; skip id byte to get value
1303 A7C4             (     routines.asm):00102                 sta ,u  ;store return value
1305 2004             (     routines.asm):00103                 bra @x
1307 3002             (     routines.asm):00104         @s      leax 2,x        ;go to next table entry
1309 20EB             (     routines.asm):00105                 bra @lp
130B 3536             (     routines.asm):00106         @x      puls y,x,d
130D 39               (     routines.asm):00107                 rts
                      (     routines.asm):00108                 
                      (     routines.asm):00109         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00110         ;move_object
                      (     routines.asm):00111         ;param 1 (top of u) is the object/room to move it to 
                      (     routines.asm):00112         ;param 2 is the object to move
                      (     routines.asm):00113         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
130E                  (     routines.asm):00114         move_object
130E 3436             (     routines.asm):00115                 pshs d,x,y
1310 3704             (     routines.asm):00116                 pulu b  ;new room
1312 3702             (     routines.asm):00117                 pulu a  ;get object id
1314 3602             (     routines.asm):00118                 pshu a  ;put object on stack (yes this is silly)
1316 8601             (     routines.asm):00119                 lda #HOLDER_ID
1318 3602             (     routines.asm):00120                 pshu a  ;put attr # on stack
131A 3604             (     routines.asm):00121                 pshu b  ;put new val on stack
131C BD13A8           (     routines.asm):00122                 jsr set_object_attribute        ;
131F 3536             (     routines.asm):00123                 puls y,x,d
1321 39               (     routines.asm):00124                 rts
                      (     routines.asm):00125         
1322                  (     routines.asm):00126         get_sub
1322 3436             (     routines.asm):00127                 pshs d,x,y
1324 12               (     routines.asm):00128                 nop     ; can the player see it
1325 12               (     routines.asm):00129                 nop     ; is the object portable
1326 B611C8           (     routines.asm):00130                 lda sentence+1
1329 C613             (     routines.asm):00131                 ldb #OBJ_ENTRY_SIZE
132B 3D               (     routines.asm):00132                 mul
132C 1F01             (     routines.asm):00133                 tfr d,x
132E 30891DA1         (     routines.asm):00134                 leax obj_table,x 
1332 A68812           (     routines.asm):00135                 lda PROPERTY_BYTE_2,x
1335 8401             (     routines.asm):00136                 anda #PORTABLE_MASK
1337 8101             (     routines.asm):00137                 cmpa #PORTABLE_MASK
1339 10260119         (     routines.asm):00138                 lbne print_ret_not_portable
133D 12               (     routines.asm):00139                 nop ; check that the player can see it
133E B611C8           (     routines.asm):00140                 lda sentence+1
1341 3602             (     routines.asm):00141                 pshu a
1343 8601             (     routines.asm):00142                 lda #PLAYER
1345 3602             (     routines.asm):00143                 pshu a
1347 BD130E           (     routines.asm):00144                 jsr move_object
134A 8E13C3           (     routines.asm):00145                 ldx #taken
134D BD1914           (     routines.asm):00146                 jsr PRINT
1350 BDB958           (     routines.asm):00147                 jsr PRINTCR
1353 B611C8           (     routines.asm):00148                 lda sentence+1
1356 3602             (     routines.asm):00149                 pshu a
1358 BD1375           (     routines.asm):00150                 jsr unset_initial_description
135B 3536             (     routines.asm):00151         @x      puls y,x,d
135D 39               (     routines.asm):00152                 rts
                      (     routines.asm):00153         
                      (     routines.asm):00154                 
                      (     routines.asm):00155         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00156         ;maps verb ids to direction codes
                      (     routines.asm):00157         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
135E                  (     routines.asm):00158         direction_map
135E 0004             (     routines.asm):00159                 .db n_verb_id,NORTH
1360 0105             (     routines.asm):00160                 .db s_verb_id,SOUTH
1362 0206             (     routines.asm):00161                 .db e_verb_id,EAST
1364 0307             (     routines.asm):00162                 .db w_verb_id,WEST
1366 0408             (     routines.asm):00163                 .db ne_verb_id,NORTHEAST
1368 0509             (     routines.asm):00164                 .db se_verb_id,SOUTHEAST
136A 060A             (     routines.asm):00165                 .db sw_verb_id,SOUTHWEST
136C 070B             (     routines.asm):00166                 .db nw_verb_id,NORTHWEST
136E 080C             (     routines.asm):00167                 .db up_verb_id,UP
1370 090D             (     routines.asm):00168                 .db down_verb_id,DOWN
1372 0B0F             (     routines.asm):00169                 .db out_verb_id,OUT
1374 FF               (     routines.asm):00170                 .db 255 
                      (     routines.asm):00171                 
                      (     routines.asm):00172         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00173         ;if the player is a parent of the object,
                      (     routines.asm):00174         ;set its initial desc to 255 (none)
                      (     routines.asm):00175         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1375                  (     routines.asm):00176         unset_initial_description
1375 3436             (     routines.asm):00177                 pshs d,x,y
1377 3702             (     routines.asm):00178                 pulu a 
1379 8E1DA1           (     routines.asm):00179                 ldx #obj_table
137C C613             (     routines.asm):00180                 ldb #OBJ_ENTRY_SIZE
137E 3D               (     routines.asm):00181                 mul
137F 308B             (     routines.asm):00182                 leax d,x
1381 3002             (     routines.asm):00183                 leax INITIAL_DESC_ID,x
1383 86FF             (     routines.asm):00184                 lda #255
1385 A784             (     routines.asm):00185                 sta ,x
1387 3536             (     routines.asm):00186                 puls y,x,d
1389 39               (     routines.asm):00187                 rts
                      (     routines.asm):00188         
                      (     routines.asm):00189         
                      (     routines.asm):00190         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00191         ;get_object_attribute
                      (     routines.asm):00192         ;params are on user stack
                      (     routines.asm):00193         ;top  param is attr to get 
                      (     routines.asm):00194         ;next param is obj id
                      (     routines.asm):00195         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
138A                  (     routines.asm):00196         get_object_attribute
138A 3436             (     routines.asm):00197                 pshs d,x,y
138C A641             (     routines.asm):00198                 lda 1,u ; id
138E C613             (     routines.asm):00199                 ldb #OBJ_ENTRY_SIZE
1390 3D               (     routines.asm):00200                 mul
1391 1F01             (     routines.asm):00201                 tfr d,x
1393 30891DA1         (     routines.asm):00202                 leax obj_table,x
1397 8600             (     routines.asm):00203                 lda #0                  
1399 E640             (     routines.asm):00204                 ldb 0,u ; prop id
139B 1F02             (     routines.asm):00205                 tfr d,y 
139D 3085             (     routines.asm):00206                 leax b,x                        ;add attr offset to x
139F A684             (     routines.asm):00207                 lda ,x                  ;get the value
13A1 3704             (     routines.asm):00208                 pulu b                  ; delete param (leave 2nd on stack for return val)
13A3 A7C4             (     routines.asm):00209                 sta ,u
13A5 3536             (     routines.asm):00210                 puls y,x,d
13A7 39               (     routines.asm):00211                 rts     
                      (     routines.asm):00212         
                      (     routines.asm):00213         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (     routines.asm):00214         ;set_object_attribute
                      (     routines.asm):00215         ;params are on user stack
                      (     routines.asm):00216         ;top param is new value
                      (     routines.asm):00217         ;next param is attr to set 
                      (     routines.asm):00218         ;next is object
                      (     routines.asm):00219         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13A8                  (     routines.asm):00220         set_object_attribute
13A8 3436             (     routines.asm):00221                 pshs d,x,y
13AA A642             (     routines.asm):00222                 lda 2,u ;id     
13AC C613             (     routines.asm):00223                 ldb #OBJ_ENTRY_SIZE
13AE 3D               (     routines.asm):00224                 mul
13AF 1F01             (     routines.asm):00225                 tfr d,x
13B1 30891DA1         (     routines.asm):00226                 leax obj_table,x
13B5 E641             (     routines.asm):00227                 ldb 1,u ; get attr #
13B7 3085             (     routines.asm):00228                 leax b,x ; get offset
13B9 E6C4             (     routines.asm):00229                 ldb ,u
13BB E784             (     routines.asm):00230                 stb ,x  ; write new value
13BD 3343             (     routines.asm):00231                 leau 3,u ; pop all 3 params
13BF 3536             (     routines.asm):00232                 puls y,x,d
                      (     routines.asm):00233                 
13C1 39               (     routines.asm):00234                 rts
                      (     routines.asm):00235                 
13C2 FF               (     routines.asm):00236         new_room .db  255
                      (     routines.asm):00237                 
13C3 54414B454E2E00   (     routines.asm):00238         taken .strz "TAKEN."
13CA 495420434F4E5441 (     routines.asm):00239         itcontains .strz "IT CONTAINS..."
     494E532E2E2E00
13D9 4F4E204954204953 (     routines.asm):00240         onitis .strz "ON IT IS..."
     2E2E2E00
                      (         main.asm):00044                 include preactions.asm
                      (   preactions.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (   preactions.asm):00002         ; run_actions.asm
                      (   preactions.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (   preactions.asm):00004         
                      (   preactions.asm):00005         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (   preactions.asm):00006         ; x contains address of table
                      (   preactions.asm):00007         ; with actions.
                      (   preactions.asm):00008         ;
                      (   preactions.asm):00009         ; registers are clobbered
                      (   preactions.asm):00010         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13E5                  (   preactions.asm):00011         run_actions
13E5 3436             (   preactions.asm):00012                 pshs d,x,y
13E7 8600             (   preactions.asm):00013                 lda #0  ; push a 0 onto the stack
13E9 3602             (   preactions.asm):00014                 pshu a  
13EB A684             (   preactions.asm):00015         @lp     lda ,x
13ED 81FF             (   preactions.asm):00016                 cmpa #$ff  ; hit end?
13EF 2725             (   preactions.asm):00017                 beq @x
13F1 C600             (   preactions.asm):00018                 ldb #0
13F3 A685             (   preactions.asm):00019         @l2     lda b,x  ;get a byte from table
13F5 81FE             (   preactions.asm):00020                 cmpa #ANY_OBJECT ; skip "*"
13F7 270A             (   preactions.asm):00021                 beq @sk 
13F9 108E11C7         (   preactions.asm):00022                 ldy #sentence
13FD 31A5             (   preactions.asm):00023                 leay b,y
13FF A120             (   preactions.asm):00024                 cmpa 0,y ;compare it to sentence
1401 260F             (   preactions.asm):00025                 bne @c   ;if no match, continue
1403 5C               (   preactions.asm):00026         @sk     incb
1404 C104             (   preactions.asm):00027                 cmpb #4  ;done?
1406 26EB             (   preactions.asm):00028                 bne @l2  ;loop
1408 12               (   preactions.asm):00029                 nop ; if got here sentence matches
1409 AD9804           (   preactions.asm):00030                 jsr [4,x]
140C 8601             (   preactions.asm):00031                 lda #1          ;put a 1 on return stack
140E A7C4             (   preactions.asm):00032                 sta ,u
1410 2004             (   preactions.asm):00033                 bra @x
1412 3006             (   preactions.asm):00034         @c  leax 6,x    ; entries are 6 bytes
1414 20D5             (   preactions.asm):00035                 bra @lp
1416 3536             (   preactions.asm):00036         @x      puls y,x,d
1418 39               (   preactions.asm):00037                 rts
                      (         main.asm):00045                 include printrets.asm
                      (    printrets.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    printrets.asm):00002         ;print-returns
                      (    printrets.asm):00003         ;these are NOT subroutines.  calling subroutines should
                      (    printrets.asm):00004         ;long branch to these addresses.
                      (    printrets.asm):00005         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1419                  (    printrets.asm):00006         print_ret_no_have
1419 8E15EF           (    printrets.asm):00007                 ldx #nohave
141C BD1914           (    printrets.asm):00008                 jsr PRINT                ;close the sentence
141F BDB958           (    printrets.asm):00009                 jsr PRINTCR             ;newline
1422 3536             (    printrets.asm):00010                 puls y,x,d
1424 39               (    printrets.asm):00011                 rts
                      (    printrets.asm):00012         
                      (    printrets.asm):00013         
1425                  (    printrets.asm):00014         print_ret_bad_noun
1425 3410             (    printrets.asm):00015                 pshs x
1427 8E15BF           (    printrets.asm):00016                 ldx #bad_noun
142A BD1914           (    printrets.asm):00017                 jsr PRINT               ;print 1st part
142D 3510             (    printrets.asm):00018                 puls x                  ;load word
142F BD1914           (    printrets.asm):00019                 jsr PRINT               ;print the word
1432 8E15D8           (    printrets.asm):00020                 ldx #close_quote
1435 BD1914           (    printrets.asm):00021                 jsr PRINT                ;close the sentence
1438 BDB958           (    printrets.asm):00022                 jsr PRINTCR             ;newline
143B 3536             (    printrets.asm):00023                 puls y,x,d
143D 39               (    printrets.asm):00024                 rts
                      (    printrets.asm):00025         
143E                  (    printrets.asm):00026         print_ret_bad_verb
143E 8E1573           (    printrets.asm):00027                 ldx #badverb
1441 BD1914           (    printrets.asm):00028                 jsr PRINT
1444 8E275B           (    printrets.asm):00029                 ldx #word1
1447 BD1914           (    printrets.asm):00030                 jsr PRINT
144A 8E15D8           (    printrets.asm):00031                 ldx #close_quote
144D BD1914           (    printrets.asm):00032                 jsr PRINT
1450 BDB958           (    printrets.asm):00033                 jsr PRINTCR
1453 3536             (    printrets.asm):00034                 puls y,x,d
1455 39               (    printrets.asm):00035                 rts
                      (    printrets.asm):00036                 
1456                  (    printrets.asm):00037         print_ret_not_portable
1456 8E1627           (    printrets.asm):00038                 ldx #notportable
1459 BD1914           (    printrets.asm):00039                 jsr PRINT
145C BDB958           (    printrets.asm):00040                 jsr PRINTCR
145F 3536             (    printrets.asm):00041                 puls y,x,d
1461 39               (    printrets.asm):00042                 rts
                      (    printrets.asm):00043                 
                      (    printrets.asm):00044          
1462                  (    printrets.asm):00045         print_ret_already_open
1462 8E16F7           (    printrets.asm):00046                 ldx #alreadyopen
1465 BD1914           (    printrets.asm):00047                 jsr PRINT
1468 BDB958           (    printrets.asm):00048                 jsr PRINTCR
146B 3536             (    printrets.asm):00049                 puls y,x,d
146D 39               (    printrets.asm):00050                 rts     
                      (    printrets.asm):00051         
146E                  (    printrets.asm):00052         print_ret_not_closeable
146E 8E16B5           (    printrets.asm):00053                 ldx #notcloseable
1471 BD1914           (    printrets.asm):00054                 jsr PRINT
1474 BDB958           (    printrets.asm):00055                 jsr PRINTCR
1477 3536             (    printrets.asm):00056                 puls y,x,d
1479 39               (    printrets.asm):00057                 rts     
                      (    printrets.asm):00058                 
147A                  (    printrets.asm):00059         print_ret_already_closed
147A 8E16E2           (    printrets.asm):00060                 ldx #alreadyclosed
147D BD1914           (    printrets.asm):00061                 jsr PRINT
1480 BDB958           (    printrets.asm):00062                 jsr PRINTCR
1483 3536             (    printrets.asm):00063                 puls y,x,d
1485 39               (    printrets.asm):00064                 rts     
                      (    printrets.asm):00065         
1486                  (    printrets.asm):00066         print_ret_not_supporter
1486 8E165A           (    printrets.asm):00067                 ldx #notsupporter
1489 BD1914           (    printrets.asm):00068                 jsr PRINT
148C BDB958           (    printrets.asm):00069                 jsr PRINTCR
148F 3536             (    printrets.asm):00070                 puls y,x,d
1491 39               (    printrets.asm):00071                 rts     
                      (    printrets.asm):00072                 
1492                  (    printrets.asm):00073         print_ret_not_container
1492 8E163C           (    printrets.asm):00074                 ldx #notcontainer
1495 BD1914           (    printrets.asm):00075                 jsr PRINT
1498 BDB958           (    printrets.asm):00076                 jsr PRINTCR
149B 3536             (    printrets.asm):00077                 puls y,x,d
149D 39               (    printrets.asm):00078                 rts     
                      (    printrets.asm):00079         
                      (    printrets.asm):00080         
149E                  (    printrets.asm):00081         print_ret_dont_understand
149E 8E1678           (    printrets.asm):00082                 ldx #dontunderstand
14A1 BD1914           (    printrets.asm):00083                 jsr PRINT
14A4 BDB958           (    printrets.asm):00084                 jsr PRINTCR
14A7 3536             (    printrets.asm):00085                 puls y,x,d
14A9 39               (    printrets.asm):00086                 rts     
                      (    printrets.asm):00087         
14AA                  (    printrets.asm):00088         print_ret_bad_put_command
14AA 8E1678           (    printrets.asm):00089                 ldx #dontunderstand
14AD BD1914           (    printrets.asm):00090                 jsr PRINT
14B0 BDB958           (    printrets.asm):00091                 jsr PRINTCR
14B3 8E168C           (    printrets.asm):00092                 ldx #badputcommand
14B6 BD1914           (    printrets.asm):00093                 jsr PRINT
14B9 BDB958           (    printrets.asm):00094                 jsr PRINTCR
14BC 3536             (    printrets.asm):00095                 puls y,x,d
14BE 39               (    printrets.asm):00096                 rts     
                      (    printrets.asm):00097         
14BF                  (    printrets.asm):00098         print_ret_bad_open
14BF 8E1678           (    printrets.asm):00099                 ldx #dontunderstand
14C2 BD1914           (    printrets.asm):00100                 jsr PRINT
14C5 BDB958           (    printrets.asm):00101                 jsr PRINTCR
14C8 8E15A6           (    printrets.asm):00102                 ldx #badopen
14CB BD1914           (    printrets.asm):00103                 jsr PRINT
14CE BDB958           (    printrets.asm):00104                 jsr PRINTCR
14D1 3536             (    printrets.asm):00105                 puls y,x,d
14D3 39               (    printrets.asm):00106                 rts
                      (    printrets.asm):00107         
14D4                  (    printrets.asm):00108         print_ret_not_openable
14D4 8E16CC           (    printrets.asm):00109                 ldx #notopenable
14D7 BD1914           (    printrets.asm):00110                 jsr PRINT
14DA BDB958           (    printrets.asm):00111                 jsr PRINTCR
14DD 3536             (    printrets.asm):00112                 puls y,x,d
14DF 39               (    printrets.asm):00113                 rts
                      (    printrets.asm):00114         
14E0                  (    printrets.asm):00115         print_ret_pardon
14E0 8E173E           (    printrets.asm):00116                 ldx #pardon
14E3 BD1914           (    printrets.asm):00117                 jsr PRINT
14E6 BDB958           (    printrets.asm):00118                 jsr PRINTCR
14E9 3536             (    printrets.asm):00119                 puls y,x,d
14EB 39               (    printrets.asm):00120                 rts
                      (    printrets.asm):00121         
                      (    printrets.asm):00122                 
14EC                  (    printrets.asm):00123         print_ret_io_closed
14EC 8E171B           (    printrets.asm):00124                 ldx #the
14EF BD1914           (    printrets.asm):00125                 jsr PRINT
14F2 B611CA           (    printrets.asm):00126                 lda sentence+3
14F5 3602             (    printrets.asm):00127                 pshu a
14F7 BD191E           (    printrets.asm):00128                 jsr print_obj_name
14FA 8E1720           (    printrets.asm):00129                 ldx #isclosed
14FD BD1914           (    printrets.asm):00130                 jsr PRINT
1500 BDB958           (    printrets.asm):00131                 jsr PRINTCR
1503 3536             (    printrets.asm):00132                 puls y,x,d
1505 39               (    printrets.asm):00133                 rts
                      (    printrets.asm):00134         
                      (    printrets.asm):00135                 
                      (    printrets.asm):00136                 
1506                  (    printrets.asm):00137         print_ret_bad_examine
1506 8E158C           (    printrets.asm):00138                 ldx #badexamine
1509 BD1914           (    printrets.asm):00139                 jsr PRINT
150C BDB958           (    printrets.asm):00140                 jsr PRINTCR
150F 3536             (    printrets.asm):00141                 puls y,x,d
1511 39               (    printrets.asm):00142                 rts
                      (    printrets.asm):00143         
1512                  (    printrets.asm):00144         print_ret_no_light
1512 8E172C           (    printrets.asm):00145                 ldx #itispitchdark
1515 BD1914           (    printrets.asm):00146                 jsr PRINT
1518 BDB958           (    printrets.asm):00147                 jsr PRINTCR
151B 3536             (    printrets.asm):00148                 puls y,x,d
151D 39               (    printrets.asm):00149                 rts
                      (    printrets.asm):00150         
151E                  (    printrets.asm):00151         print_ret_locked
151E 8E171B           (    printrets.asm):00152                 ldx #the
1521 BD1914           (    printrets.asm):00153                 jsr PRINT
1524 B611C8           (    printrets.asm):00154                 lda sentence+1
1527 3602             (    printrets.asm):00155                 pshu a
1529 BD191E           (    printrets.asm):00156                 jsr print_obj_name
152C 8E170A           (    printrets.asm):00157                 ldx #islocked
152F BD1914           (    printrets.asm):00158                 jsr PRINT
1532 BDB958           (    printrets.asm):00159                 jsr PRINTCR
1535 3536             (    printrets.asm):00160                 puls y,x,d
1537 39               (    printrets.asm):00161                 rts
                      (    printrets.asm):00162         
                      (    printrets.asm):00163         ;this actually is a subroutine
                      (    printrets.asm):00164         ;it checks the object in the direction
                      (    printrets.asm):00165         ;the player is trying to move
                      (    printrets.asm):00166         ;the move direction is on the user stack
1538                  (    printrets.asm):00167         print_object_closed
1538 3436             (    printrets.asm):00168                 pshs d,x,y
153A 8E171B           (    printrets.asm):00169                 ldx #the
153D BD1914           (    printrets.asm):00170                 jsr PRINT
1540 12               (    printrets.asm):00171                 nop ; get current room
1541 BD1BAC           (    printrets.asm):00172                 jsr get_player_room
1544 3702             (    printrets.asm):00173                 pulu a
1546 C613             (    printrets.asm):00174                 ldb #OBJ_ENTRY_SIZE
1548 3D               (    printrets.asm):00175                 mul
1549 1F01             (    printrets.asm):00176                 tfr d,x 
154B 30891DA1         (    printrets.asm):00177                 leax obj_table,x
154F BD12ED           (    printrets.asm):00178                 jsr get_move_direction ; convert verb to get move direction
1552 3704             (    printrets.asm):00179                 pulu b
1554 A685             (    printrets.asm):00180                 lda b,x ; now has room player is moving into (the door)
1556 C613             (    printrets.asm):00181                 ldb #OBJ_ENTRY_SIZE
1558 3D               (    printrets.asm):00182                 mul
1559 1F01             (    printrets.asm):00183                 tfr d,x
155B 30891DA1         (    printrets.asm):00184                 leax obj_table,x
155F 12               (    printrets.asm):00185                 nop ; get that object's name attribute
1560 A684             (    printrets.asm):00186                 lda OBJ_ID,x
1562 3602             (    printrets.asm):00187                 pshu a
1564 BD191E           (    printrets.asm):00188                 jsr print_obj_name
1567 8E1720           (    printrets.asm):00189                 ldx #isclosed
156A BD1914           (    printrets.asm):00190                 jsr PRINT 
156D BDB958           (    printrets.asm):00191                 jsr PRINTCR
1570 3536             (    printrets.asm):00192                 puls y,x,d
1572 39               (    printrets.asm):00193                 rts
                      (    printrets.asm):00194                 
                      (    printrets.asm):00195                 
1573 4920444F4E275420 (    printrets.asm):00196         badverb .strz "I DON'T KNOW THE VERB, '"
     4B4E4F5720544845
     20564552422C2027
     00
158C 5452593A20455841 (    printrets.asm):00197         badexamine .strz "TRY: EXAMINE (SOMETHING)."
     4D494E452028534F
     4D455448494E4729
     2E00
15A6 5452593A204F5045 (    printrets.asm):00198         badopen .strz "TRY: OPEN (SOMETHING)."
     4E2028534F4D4554
     48494E47292E00
15BD 2E00             (    printrets.asm):00199         period .strz "."
15BF 4920444F4E275420 (    printrets.asm):00200         bad_noun .strz "I DON'T KNOW THE WORD, '"
     4B4E4F5720544845
     20574F52442C2027
     00
15D8 272E00           (    printrets.asm):00201         close_quote .strz "'."
15DB 594F5520444F4E27 (    printrets.asm):00202         badobj .strz "YOU DON'T SEE THAT."      
     5420534545205448
     41542E00
15EF 594F5520444F4E27 (    printrets.asm):00203         nohave .strz "YOU DON'T HAVE THAT."     
     5420484156452054
     4841542E00
1604 5448415420495320 (    printrets.asm):00204         noeat .strz  "THAT IS NOT SOMETHING YOU CAN EAT."
     4E4F5420534F4D45
     5448494E4720594F
     552043414E204541
     542E00
1627 594F552043414E27 (    printrets.asm):00205         notportable .strz       "YOU CAN'T TAKE THAT."
     542054414B452054
     4841542E00
163C 594F552043414E27 (    printrets.asm):00206         notcontainer .strz      "YOU CAN'T PUT THINGS IN THAT."
     5420505554205448
     494E475320494E20
     544841542E00
165A 594F552046494E44 (    printrets.asm):00207         notsupporter .strz      "YOU FIND NO SUITABLE SURFACE."
     204E4F2053554954
     41424C4520535552
     464143452E00
1678 4920444F4E275420 (    printrets.asm):00208         dontunderstand .strz "I DON'T UNDERSTAND."
     554E444552535441
     4E442E00
168C 5452592050555420 (    printrets.asm):00209         badputcommand .strz "TRY PUT (SOMETHING) IN (SOMETHING ELSE)."
     28534F4D45544849
     4E472920494E2028
     534F4D455448494E
     4720454C5345292E
     00
16B5 5448415420495320 (    printrets.asm):00210         notcloseable .strz "THAT IS NOT CLOSEABLE."
     4E4F5420434C4F53
     4541424C452E00
16CC 5448415420495320 (    printrets.asm):00211         notopenable .strz "THAT IS NOT OPENABLE."
     4E4F54204F50454E
     41424C452E00
16E2 4954275320414C52 (    printrets.asm):00212         alreadyclosed .strz "IT'S ALREADY CLOSED."
     4541445920434C4F
     5345442E00
16F7 4954275320414C52 (    printrets.asm):00213         alreadyopen .strz "IT'S ALREADY OPEN."
     45414459204F5045
     4E2E00
170A 204953204C4F434B (    printrets.asm):00214         islocked .strz " IS LOCKED."
     45442E00
1716 5055542000       (    printrets.asm):00215         putconfused .strz "PUT " 
171B 5448452000       (    printrets.asm):00216         the .strz "THE "
1720 20495320434C4F53 (    printrets.asm):00217         isclosed .strz " IS CLOSED."
     45442E00
172C 4954204953205049 (    printrets.asm):00218         itispitchdark .strz "IT IS PITCH DARK."
     544348204441524B
     2E00
173E 504152444F4E3F00 (    printrets.asm):00219         pardon .strz "PARDON?"
                      (         main.asm):00046                 include look.asm
                      (         look.asm):00001         
                      (         look.asm):00002         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         look.asm):00003         ;routines
                      (         look.asm):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1746                  (         look.asm):00005         look_sub
1746 3436             (         look.asm):00006                 pshs d,x,y
                      (         look.asm):00007                 ;check for light
1748 BD1BAC           (         look.asm):00008                 jsr get_player_room
174B BD1BC0           (         look.asm):00009                 jsr ambient_light
174E 3702             (         look.asm):00010                 pulu a
1750 8100             (         look.asm):00011                 cmpa #0
1752 1027FDBC         (         look.asm):00012                 lbeq print_ret_no_light
                      (         look.asm):00013                 ;print room name
                      (         look.asm):00014                 ;load the 'holder' of object 1 player
1756 BD1BAC           (         look.asm):00015                 jsr get_player_room
1759 3702             (         look.asm):00016                 pulu a 
175B 12               (         look.asm):00017                 nop     ; now get the holder's description attr
175C 3602             (         look.asm):00018                 pshu a  ; push holder id
175E 8603             (         look.asm):00019                 lda #DESC_ID    ; holder attr #
1760 3602             (         look.asm):00020                 pshu a  ;
1762 BD138A           (         look.asm):00021                 jsr get_object_attribute
1765 3702             (         look.asm):00022                 pulu a  ; get description id#2  
1767 12               (         look.asm):00023                 nop             ; now print that id
1768 8E1E00           (         look.asm):00024                 ldx #description_table
176B 3602             (         look.asm):00025                 pshu a 
176D BD19FF           (         look.asm):00026                 jsr print_table_entry   ; print the description for the room
1770 BDB958           (         look.asm):00027                 jsr PRINTCR
                      (         look.asm):00028                 ;jsr list_room_items    
1773 BD1BAC           (         look.asm):00029                 jsr get_player_room             ; get and leave player room on stack
1776 BD177C           (         look.asm):00030                 jsr start_look_sub
1779 3536             (         look.asm):00031                 puls x,y,d
177B 39               (         look.asm):00032                 rts
                      (         look.asm):00033                 
                      (         look.asm):00034         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         look.asm):00035         ;holder is on the user stack
                      (         look.asm):00036         ;used by look_sub
                      (         look.asm):00037         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
177C                  (         look.asm):00038         start_look_sub
177C 3436             (         look.asm):00039                 pshs d,x,y
177E 8600             (         look.asm):00040                 lda #0
1780 8E1DA1           (         look.asm):00041                 ldx #obj_table
1783 A684             (         look.asm):00042         @lp lda OBJ_ID,x  
1785 81FF             (         look.asm):00043                 cmpa #$ff       ; hit end of table
1787 2754             (         look.asm):00044                 beq @x
1789 8101             (         look.asm):00045                 cmpa #PLAYER
178B 274B             (         look.asm):00046                 beq @c
178D A68811           (         look.asm):00047                 lda PROPERTY_BYTE_1,x  ;check for a skip scenery items
1790 8401             (         look.asm):00048                 anda #SCENERY_MASK
1792 8101             (         look.asm):00049                 cmpa #SCENERY_MASK
1794 2742             (         look.asm):00050                 beq @c
1796 A601             (         look.asm):00051                 lda HOLDER_ID,x
1798 A1C4             (         look.asm):00052                 cmpa ,u         ; is the player's room the holder of this object
179A 263C             (         look.asm):00053                 bne @c
179C 12               (         look.asm):00054                 nop ; now print the object (then handle nesting)
179D 12               (         look.asm):00055                 nop ; does is have an initial description?
179E A602             (         look.asm):00056                 lda INITIAL_DESC_ID,x
17A0 81FF             (         look.asm):00057                 cmpa #255
17A2 2711             (         look.asm):00058                 beq @n  ; no initial description
17A4 3602             (         look.asm):00059                 pshu a  ; push description param
17A6 3410             (         look.asm):00060                 pshs x
17A8 8E1E00           (         look.asm):00061                 ldx #description_table ; put table in x
17AB BD19FF           (         look.asm):00062                 jsr print_table_entry
17AE BDB958           (         look.asm):00063                 jsr PRINTCR
17B1 3510             (         look.asm):00064                 puls x
17B3 2020             (         look.asm):00065                 bra @f
17B5 12               (         look.asm):00066         @n      nop ; no  - print "THERE IS A [OBJECT] HERE."
17B6 3410             (         look.asm):00067                 pshs x
17B8 8E17E2           (         look.asm):00068                 ldx #thereis
17BB BD1914           (         look.asm):00069                 jsr PRINT
17BE 3510             (         look.asm):00070                 puls x
17C0 A684             (         look.asm):00071                 lda OBJ_ID,x
17C2 3602             (         look.asm):00072                 pshu a
17C4 BD191E           (         look.asm):00073                 jsr print_obj_name
17C7 3410             (         look.asm):00074                 pshs x
17C9 8E17EE           (         look.asm):00075                 ldx #here
17CC BD1914           (         look.asm):00076                 jsr PRINT
17CF BDB958           (         look.asm):00077                 jsr PRINTCR
17D2 3510             (         look.asm):00078                 puls x
17D4 12               (         look.asm):00079                 nop ; now check for contains/supporters
17D5 BD1A20           (         look.asm):00080         @f      jsr print_nested_contents
17D8 308813           (         look.asm):00081         @c      leax OBJ_ENTRY_SIZE,x   ; loop to next object
17DB 20A6             (         look.asm):00082                 bra @lp
17DD 3702             (         look.asm):00083         @x      pulu a  ; pop stack
17DF 3536             (         look.asm):00084                 puls y,x,d
17E1 39               (         look.asm):00085                 rts     
                      (         look.asm):00086                 
17E2 5448455245204953 (         look.asm):00087         thereis .strz "THERE IS A "
     20412000
17EE 20484552452E00   (         look.asm):00088         here    .strz " HERE."          
                      (         main.asm):00047                 include inventory.asm
                      (    inventory.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00002         ;inventory.asm
                      (    inventory.asm):00003         ;routines having to do with the inventory
                      (    inventory.asm):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00005         
                      (    inventory.asm):00006         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00007         ;drop sub
                      (    inventory.asm):00008         ;moves an object to the player's room
                      (    inventory.asm):00009         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17F5                  (    inventory.asm):00010         drop_sub
17F5 3436             (    inventory.asm):00011                 pshs d,x,y
17F7 B611C8           (    inventory.asm):00012                 lda sentence+1
17FA C613             (    inventory.asm):00013                 ldb #OBJ_ENTRY_SIZE
17FC 3D               (    inventory.asm):00014                 mul
17FD 1F01             (    inventory.asm):00015                 tfr d,x
17FF 30891DA1         (    inventory.asm):00016                 leax obj_table,x
1803 3001             (    inventory.asm):00017                 leax HOLDER_ID,x
1805 BD1BAC           (    inventory.asm):00018                 jsr get_player_room
1808 3702             (    inventory.asm):00019                 pulu a
180A A784             (    inventory.asm):00020                 sta ,x
180C 8E190B           (    inventory.asm):00021                 ldx #dropped
180F BD1914           (    inventory.asm):00022                 jsr PRINT
1812 BDB958           (    inventory.asm):00023                 jsr PRINTCR
1815 2000             (    inventory.asm):00024                 bra @x
1817 3536             (    inventory.asm):00025         @x      puls y,x,d
1819 39               (    inventory.asm):00026                 rts
                      (    inventory.asm):00027                 
                      (    inventory.asm):00028         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00029         ;param on top is object to consider
                      (    inventory.asm):00030         ;param under top is parent to check for
                      (    inventory.asm):00031         ;0 or non zero is return on the stack
                      (    inventory.asm):00032         ;
                      (    inventory.asm):00033         ;loop over each 
                      (    inventory.asm):00034         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
181A                  (    inventory.asm):00035         is_visible_child_of
181A 3436             (    inventory.asm):00036                 pshs d,x,y
181C 3702             (    inventory.asm):00037                 pulu a  ;get child (the object)
181E C613             (    inventory.asm):00038         @lp ldb #OBJ_ENTRY_SIZE
1820 3D               (    inventory.asm):00039                 mul     
1821 1F01             (    inventory.asm):00040                 tfr d,x
1823 30891DA1         (    inventory.asm):00041                 leax obj_table,x 
1827 A601             (    inventory.asm):00042                 lda HOLDER_ID,x
1829 A1C4             (    inventory.asm):00043                 cmpa ,u         ;is the parent a match
182B 2706             (    inventory.asm):00044                 beq @y
182D 8100             (    inventory.asm):00045                 cmpa #0         ;offscreen
182F 2704             (    inventory.asm):00046                 beq @x
1831 20EB             (    inventory.asm):00047                 bra @lp
1833 8601             (    inventory.asm):00048         @y  lda #1      ;if not found, a will be 0
1835 A7C4             (    inventory.asm):00049         @x      sta ,u          ;if a is 0, the answer was no
1837 3536             (    inventory.asm):00050                 puls y,d,x
1839 39               (    inventory.asm):00051                 rts
                      (    inventory.asm):00052         
                      (    inventory.asm):00053         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00054         ;count visible contents
                      (    inventory.asm):00055         ;counts the number of non-scenery
                      (    inventory.asm):00056         ;objects in the object on the user 
                      (    inventory.asm):00057         ;stack
                      (    inventory.asm):00058         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
183A                  (    inventory.asm):00059         count_visible_items
183A 3436             (    inventory.asm):00060                 pshs d,x,y
183C 8600             (    inventory.asm):00061                 lda #0
183E 3602             (    inventory.asm):00062                 pshu a  ;push return value
1840 8E1DA1           (    inventory.asm):00063                 ldx #obj_table
1843 A684             (    inventory.asm):00064         @lp lda ,x
1845 81FF             (    inventory.asm):00065                 cmpa #$ff
1847 271C             (    inventory.asm):00066                 beq @x
1849 8101             (    inventory.asm):00067                 cmpa #1 ; don't count the player
184B 2713             (    inventory.asm):00068                 beq @c
184D E601             (    inventory.asm):00069                 ldb HOLDER_ID,x
184F E141             (    inventory.asm):00070                 cmpb 1,u        ;is the holder the parameter?
1851 260D             (    inventory.asm):00071                 bne @c
1853 A68811           (    inventory.asm):00072                 lda PROPERTY_BYTE_1,x           ;get the byte with the scenery bit
1856 8401             (    inventory.asm):00073                 anda #SCENERY_MASK
1858 8100             (    inventory.asm):00074                 cmpa #0
185A 2604             (    inventory.asm):00075                 bne @c
185C 6C40             (    inventory.asm):00076                 inc 0,u                 ;found an object
185E 2005             (    inventory.asm):00077                 bra @x                  ;we only need to find 1
1860 308813           (    inventory.asm):00078         @c  leax OBJ_ENTRY_SIZE,x        ; skip to next object
1863 20DE             (    inventory.asm):00079                 bra @lp
1865 A6C4             (    inventory.asm):00080         @x      lda ,u  ;copy return val
1867 A741             (    inventory.asm):00081                 sta 1,u ;one byte into stack 
1869 3702             (    inventory.asm):00082                 pulu a ;pop local var
186B 3536             (    inventory.asm):00083                 puls y,x,d
186D 39               (    inventory.asm):00084                 rts
                      (    inventory.asm):00085         
                      (    inventory.asm):00086         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00087         ;returns true if paramter 1
                      (    inventory.asm):00088         ;is an adjacent door to the param 2 
                      (    inventory.asm):00089         ;
                      (    inventory.asm):00090         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
186E                  (    inventory.asm):00091         is_adjacent_door
186E 3436             (    inventory.asm):00092                 pshs d,x,y
1870 BD1BAC           (    inventory.asm):00093                 jsr get_player_room
1873 3702             (    inventory.asm):00094                 pulu a
1875 3602             (    inventory.asm):00095                 pshu a
1877 C613             (    inventory.asm):00096                 ldb #OBJ_ENTRY_SIZE
1879 3D               (    inventory.asm):00097                 mul
187A 1F01             (    inventory.asm):00098                 tfr d,x
187C 30891DA1         (    inventory.asm):00099                 leax obj_table,x
1880 3004             (    inventory.asm):00100                 leax NORTH,x ; skip to direction bytes
1882 8600             (    inventory.asm):00101                 lda #0  ;l
1884 E686             (    inventory.asm):00102         @lp ldb a,x
1886 F111C8           (    inventory.asm):00103                 cmpb sentence+1  ;  is the param, any of the adjacent rooms?
1889 2608             (    inventory.asm):00104                 bne @s
188B 12               (    inventory.asm):00105                 nop     ;  it's adjacent, is it a door
188C 12               (    inventory.asm):00106                 nop     ; not doing door check right now
188D 8601             (    inventory.asm):00107                 lda #1  ; return a 1    
188F A7C4             (    inventory.asm):00108                 sta ,u
1891 2009             (    inventory.asm):00109                 bra @x
1893 4C               (    inventory.asm):00110         @s      inca     
1894 810A             (    inventory.asm):00111                 cmpa #10 ; 10 directions
1896 26EC             (    inventory.asm):00112                 bne @lp
1898 8600             (    inventory.asm):00113                 lda #0   ; if got here, not adjacent
189A A7C4             (    inventory.asm):00114                 sta ,u  ;return a 0
189C 3536             (    inventory.asm):00115         @x      puls y,x,d
189E 39               (    inventory.asm):00116                 rts
                      (    inventory.asm):00117                 
                      (    inventory.asm):00118         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    inventory.asm):00119         ;inventory
                      (    inventory.asm):00120         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
189F                  (    inventory.asm):00121         inventory_sub
189F 3436             (    inventory.asm):00122                 pshs d,x,y
18A1 8601             (    inventory.asm):00123                 lda #PLAYER 
18A3 3602             (    inventory.asm):00124                 pshu a
18A5 BD183A           (    inventory.asm):00125                 jsr count_visible_items
18A8 3702             (    inventory.asm):00126                 pulu a
18AA 8100             (    inventory.asm):00127                 cmpa #0
18AC 260B             (    inventory.asm):00128                 bne @si         ;show items
18AE 8E18E1           (    inventory.asm):00129                 ldx #noitems
18B1 BD1914           (    inventory.asm):00130                 jsr PRINT
18B4 BDB958           (    inventory.asm):00131                 jsr PRINTCR
18B7 2011             (    inventory.asm):00132                 bra @x
18B9 12               (    inventory.asm):00133         @si     nop             ;list items`
18BA 8E18CD           (    inventory.asm):00134                 ldx #carrying
18BD BD1914           (    inventory.asm):00135                 jsr PRINT
18C0 BDB958           (    inventory.asm):00136                 jsr PRINTCR
18C3 8601             (    inventory.asm):00137                 lda #PLAYER
18C5 3602             (    inventory.asm):00138                 pshu a
18C7 BD1975           (    inventory.asm):00139                 jsr print_obj_contents
18CA 3536             (    inventory.asm):00140         @x      puls y,x,d
18CC 39               (    inventory.asm):00141                 rts
                      (    inventory.asm):00142         
                      (    inventory.asm):00143         
                      (    inventory.asm):00144         
18CD 594F552041524520 (    inventory.asm):00145         carrying .strz "YOU ARE CARRYING..."
     4341525259494E47
     2E2E2E00
18E1 594F552041524520 (    inventory.asm):00146         noitems .strz "YOU ARE EMPTY HANDED."
     454D505459204841
     4E4445442E00
18F7 594F5520444F4E27 (    inventory.asm):00147         nosee .strz "YOU DON'T SEE THAT."
     5420534545205448
     41542E00
190B 44524F505045442E (    inventory.asm):00148         dropped .strz "DROPPED."
     00
                      (    inventory.asm):00149         
                      (         main.asm):00048                 include print.asm
1914                  (        print.asm):00001         PRINT 
1914 3476             (        print.asm):00002                 pshs d,u,x,y
1916 301F             (        print.asm):00003                 leax -1,x
1918 BDB99C           (        print.asm):00004                 jsr SYSPRINT
191B 3576             (        print.asm):00005                 puls y,x,u,d
191D 39               (        print.asm):00006                         rts
                      (        print.asm):00007         
                      (        print.asm):00008         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        print.asm):00009         ;prints the words in the obj_word_table for
                      (        print.asm):00010         ;and object
                      (        print.asm):00011         ;the id of the object in on the user stack
                      (        print.asm):00012         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
191E                  (        print.asm):00013         print_obj_name
191E 3436             (        print.asm):00014                 pshs d,x,y
1920 12               (        print.asm):00015                 nop ; param on stack is passed to subroutine
1921 BD195B           (        print.asm):00016                 jsr find_obj_word_entry ;put x at start of words 
1924 A680             (        print.asm):00017                 lda ,x+
1926 1F12             (        print.asm):00018                 tfr x,y
1928 8E1D77           (        print.asm):00019                 ldx #dictionary
192B 3602             (        print.asm):00020                 pshu a ; index to print
192D BD19FF           (        print.asm):00021                 jsr print_table_entry
1930 A6A0             (        print.asm):00022                 lda ,y+
1932 81FF             (        print.asm):00023                 cmpa #$ff ;last word?
1934 2722             (        print.asm):00024                 beq @x
1936 8E1A8C           (        print.asm):00025                 ldx #space 
1939 BD1914           (        print.asm):00026                 jsr PRINT 
193C 8E1D77           (        print.asm):00027                 ldx #dictionary
193F 3602             (        print.asm):00028                 pshu a
1941 BD19FF           (        print.asm):00029                 jsr print_table_entry ; print second word
1944 A6A0             (        print.asm):00030                 lda ,y+
1946 81FF             (        print.asm):00031                 cmpa #$ff
1948 270E             (        print.asm):00032                 beq @x
194A 8E1A8C           (        print.asm):00033                 ldx #space
194D BD1914           (        print.asm):00034                 jsr PRINT
1950 8E1D77           (        print.asm):00035                 ldx #dictionary
1953 3602             (        print.asm):00036                 pshu a
1955 BD19FF           (        print.asm):00037                 jsr print_table_entry   
1958 3536             (        print.asm):00038         @x      puls y,x,d
195A 39               (        print.asm):00039                 rts
                      (        print.asm):00040         
                      (        print.asm):00041         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        print.asm):00042         ;user stack contains id of obj to print
                      (        print.asm):00043         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
195B                  (        print.asm):00044         find_obj_word_entry
195B 3426             (        print.asm):00045                 pshs d,y
195D 3702             (        print.asm):00046                 pulu a  ;get obj id
195F 8E1DEE           (        print.asm):00047                 ldx #obj_word_table
1962 E684             (        print.asm):00048         @lp     ldb ,x  ;get id
1964 C1FF             (        print.asm):00049                 cmpb #$ff       ;end of table?
1966 2708             (        print.asm):00050                 beq @x
1968 A184             (        print.asm):00051                 cmpa ,x  ;get id
196A 2704             (        print.asm):00052                 beq @x  ;found entry
196C 3004             (        print.asm):00053                 leax 4,x ; OBJ_WORD_ENTRY SIZE
196E 20F2             (        print.asm):00054                 bra @lp
1970 3001             (        print.asm):00055         @x      leax 1,x ; skip id byte
1972 3526             (        print.asm):00056                 puls y,d
1974 39               (        print.asm):00057                 rts
                      (        print.asm):00058         
                      (        print.asm):00059         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        print.asm):00060         ;prints out non scenery items in the 
                      (        print.asm):00061         ;param pushed on u
                      (        print.asm):00062         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1975                  (        print.asm):00063         print_obj_contents
1975 3436             (        print.asm):00064                 pshs d,x,y
1977 12               (        print.asm):00065                 nop ; now list all the objects
1978 7C1A8B           (        print.asm):00066                 inc indent_level        ;
197B 8E1DA1           (        print.asm):00067                 ldx #obj_table
197E A684             (        print.asm):00068         @lp lda ,x
1980 81FF             (        print.asm):00069                 cmpa #$ff       ; end of table?
1982 2754             (        print.asm):00070                 beq @x
1984 8101             (        print.asm):00071                 cmpa #PLAYER ; skip over player
1986 274B             (        print.asm):00072                 beq @c
1988 A601             (        print.asm):00073                 lda HOLDER_ID,x ;get holder byte
198A A1C4             (        print.asm):00074                 cmpa ,u                 ;compare to parameter
198C 2645             (        print.asm):00075                 bne @c                  ; skip it
198E A68811           (        print.asm):00076                 lda PROPERTY_BYTE_1,x           ;get the byte with the scenery bit
1991 8401             (        print.asm):00077                 anda #SCENERY_MASK
1993 8101             (        print.asm):00078                 cmpa #SCENERY_MASK
1995 273C             (        print.asm):00079                 beq @c  ; this items is 'invisible' - don't show it
1997 A684             (        print.asm):00080                 lda OBJ_ID,x    ; reload and push object id
1999 12               (        print.asm):00081                 nop             ; does the object have an initial description?
199A C613             (        print.asm):00082                 ldb #OBJ_ENTRY_SIZE
199C 3D               (        print.asm):00083                 mul
199D 3410             (        print.asm):00084             pshs x
199F 1F01             (        print.asm):00085                 tfr d,x
19A1 30891DA1         (        print.asm):00086                 leax obj_table,x
19A5 E602             (        print.asm):00087                 ldb INITIAL_DESC_ID,x
19A7 3510             (        print.asm):00088                 puls x
19A9 C1FF             (        print.asm):00089                 cmpb #$ff
19AB 2714             (        print.asm):00090                 beq @p
19AD 3410             (        print.asm):00091                 pshs x
19AF 8E1E00           (        print.asm):00092                 ldx #description_table
19B2 3604             (        print.asm):00093                 pshu b
19B4 BD1A76           (        print.asm):00094                 jsr indent
19B7 BD19FF           (        print.asm):00095                 jsr print_table_entry  ; print initial description
19BA BDB958           (        print.asm):00096                 jsr PRINTCR
19BD 3510             (        print.asm):00097                 puls x
19BF 200F             (        print.asm):00098                 bra @r 
19C1 A684             (        print.asm):00099         @p      lda OBJ_ID,x
19C3 3602             (        print.asm):00100                 pshu a
19C5 BD1A76           (        print.asm):00101                 jsr indent
19C8 BD191E           (        print.asm):00102                 jsr print_obj_name      ; just print the object's name
19CB BDB958           (        print.asm):00103                 jsr PRINTCR
19CE 12               (        print.asm):00104                 nop ;   if that is an open container or transprent
19CF 12               (        print.asm):00105                 nop ;   print its name
19D0 BD1A20           (        print.asm):00106         @r      jsr print_nested_contents
19D3 308813           (        print.asm):00107         @c  leax OBJ_ENTRY_SIZE,x        ; skip to next object
19D6 20A6             (        print.asm):00108                 bra @lp 
19D8 3702             (        print.asm):00109         @x      pulu a ; pop parameter
19DA 7A1A8B           (        print.asm):00110                 dec indent_level
19DD 3536             (        print.asm):00111                 puls y,x,d
19DF 39               (        print.asm):00112                 rts     
                      (        print.asm):00113         
                      (        print.asm):00114         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        print.asm):00115         ;handles 'look'
                      (        print.asm):00116         ;no params
                      (        print.asm):00117         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
19E0                  (        print.asm):00118         list_room_items
19E0 3436             (        print.asm):00119                 pshs d,x,y
19E2 BD1BAC           (        print.asm):00120                 jsr get_player_room
19E5 3702             (        print.asm):00121                 pulu a ;get result
19E7 1F89             (        print.asm):00122                 tfr a,b ; save copy of room
19E9 3602             (        print.asm):00123                 pshu a  ;pass room # to sub
19EB BD183A           (        print.asm):00124                 jsr count_visible_items
19EE 3702             (        print.asm):00125                 pulu a
19F0 8100             (        print.asm):00126                 cmpa #0
19F2 2708             (        print.asm):00127                 beq     @x      ; quit if no visible objects
                      (        print.asm):00128         ;       ldx #visible_items
                      (        print.asm):00129         ;       jsr PRINT
                      (        print.asm):00130         ;       jsr PRINTCR
19F4 3604             (        print.asm):00131                 pshu b  ;push room #
19F6 BD1A76           (        print.asm):00132                 jsr indent
19F9 BD1975           (        print.asm):00133                 jsr print_obj_contents
19FC 3536             (        print.asm):00134         @x      puls y,x,d
19FE 39               (        print.asm):00135                 rts
                      (        print.asm):00136         
                      (        print.asm):00137         ;print_table_entry
                      (        print.asm):00138         ;
                      (        print.asm):00139         ;prints the text for a word in a table 
                      (        print.asm):00140         ; x contains address of table
                      (        print.asm):00141         ; u contains index to print
                      (        print.asm):00142         ;[length (minus null)][null terminated text]
                      (        print.asm):00143         ;
                      (        print.asm):00144         ;this function cleans up the stack
                      (        print.asm):00145         ;this routine is called by print_object_name
                      (        print.asm):00146         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19FF                  (        print.asm):00147         print_table_entry
19FF 3436             (        print.asm):00148                 pshs d,x,y
1A01 3704             (        print.asm):00149                 pulu b     ;get index to print
1A03 C100             (        print.asm):00150         @lp     cmpb #0         ;done looping?
1A05 2711             (        print.asm):00151                 beq @d
1A07 1F02             (        print.asm):00152                 tfr d,y         ;save a,b
1A09 1F10             (        print.asm):00153                 tfr x,d
1A0B EB84             (        print.asm):00154                 addb ,x         ;get length byte
1A0D 8900             (        print.asm):00155                 adca #0                 ;add any carry to hi byte 
1A0F 1F01             (        print.asm):00156                 tfr d,x
1A11 3002             (        print.asm):00157                 leax 2,x        ;skip null and length byte
1A13 1F20             (        print.asm):00158                 tfr y,d         ;restore a,b
1A15 5A               (        print.asm):00159                 decb
1A16 20EB             (        print.asm):00160                 bra @lp
1A18 3001             (        print.asm):00161         @d  leax 1,x    ;skip length byte
1A1A BD1914           (        print.asm):00162                 jsr PRINT   ; x should now be 1 byte behind str 
1A1D 3536             (        print.asm):00163                 puls y,x,d
1A1F 39               (        print.asm):00164                 rts
                      (        print.asm):00165         
                      (        print.asm):00166         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        print.asm):00167         ;this subroutine prints the nested contents
                      (        print.asm):00168         ;of an object ()if it has any.
                      (        print.asm):00169         ;x contains address of object to examine
                      (        print.asm):00170         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
1A20                  (        print.asm):00171         print_nested_contents
1A20 3436             (        print.asm):00172                 pshs d,x,y
1A22 12               (        print.asm):00173                 nop ; check if it has contents
                      (        print.asm):00174         ;       inc indent_level
1A23 A684             (        print.asm):00175                 lda OBJ_ID,x
1A25 3602             (        print.asm):00176                 pshu a
1A27 BD183A           (        print.asm):00177                 jsr count_visible_items
1A2A 3702             (        print.asm):00178                 pulu a
1A2C 8100             (        print.asm):00179                 cmpa #0
1A2E 2743             (        print.asm):00180                 beq @d
1A30 A68811           (        print.asm):00181                 lda PROPERTY_BYTE_1,x
1A33 8404             (        print.asm):00182                 anda #CONTAINER_MASK
1A35 8104             (        print.asm):00183                 cmpa #CONTAINER_MASK
1A37 2617             (        print.asm):00184                 bne @s
1A39 BD1A76           (        print.asm):00185                 jsr indent
1A3C 3410             (        print.asm):00186                 pshs x
1A3E 8E13CA           (        print.asm):00187                 ldx #itcontains
1A41 BD1914           (        print.asm):00188                 jsr PRINT
1A44 BDB958           (        print.asm):00189                 jsr PRINTCR
1A47 3510             (        print.asm):00190                 puls x
1A49 A684             (        print.asm):00191                 lda OBJ_ID,x
1A4B 3602             (        print.asm):00192                 pshu a
1A4D BD1975           (        print.asm):00193                 jsr print_obj_contents
1A50 A68811           (        print.asm):00194         @s      lda PROPERTY_BYTE_1,x ; is it a supporter
1A53 8402             (        print.asm):00195                 anda #SUPPORTER_MASK
1A55 8102             (        print.asm):00196                 cmpa #SUPPORTER_MASK    
1A57 261A             (        print.asm):00197                 bne @d
1A59 BDB958           (        print.asm):00198                 jsr PRINTCR
1A5C 3410             (        print.asm):00199                 pshs x
1A5E BD1A76           (        print.asm):00200                 jsr indent
1A61 8E13D9           (        print.asm):00201                 ldx #onitis
1A64 BD1914           (        print.asm):00202                 jsr PRINT
1A67 BDB958           (        print.asm):00203                 jsr PRINTCR
1A6A 3510             (        print.asm):00204                 puls x
1A6C A684             (        print.asm):00205                 lda OBJ_ID,x
1A6E 3602             (        print.asm):00206                 pshu a
1A70 BD1975           (        print.asm):00207                 jsr print_obj_contents
1A73 3536             (        print.asm):00208         @d      puls y,x,d
                      (        print.asm):00209         ;       dec indent_level
1A75 39               (        print.asm):00210                 rts
                      (        print.asm):00211         
1A76                  (        print.asm):00212         indent
1A76 3436             (        print.asm):00213                 pshs d,x,y
1A78 B61A8B           (        print.asm):00214                 lda indent_level
1A7B 8100             (        print.asm):00215         @lp     cmpa #0
1A7D 2709             (        print.asm):00216                 beq @x
1A7F 8E1A8C           (        print.asm):00217             ldx #space
1A82 BD1914           (        print.asm):00218                 jsr PRINT
1A85 4A               (        print.asm):00219                 deca
1A86 20F3             (        print.asm):00220                 bra @lp
1A88 3536             (        print.asm):00221         @x      puls y,x,d
1A8A 39               (        print.asm):00222                 rts
                      (        print.asm):00223                 
1A8B 00               (        print.asm):00224         indent_level .db 0
                      (        print.asm):00225                 
1A8C 2000             (        print.asm):00226         space .strz " "
                      (         main.asm):00049                 include put.asm
                      (          put.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (          put.asm):00002         ;put_routines
                      (          put.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1A8E                  (          put.asm):00004         put_sub
1A8E 3436             (          put.asm):00005                 pshs d,x,y
1A90 B611C8           (          put.asm):00006                 lda sentence+1
1A93 81FF             (          put.asm):00007                 cmpa #$ff
1A95 1027FA11         (          put.asm):00008                 lbeq print_ret_bad_put_command
1A99 B611CA           (          put.asm):00009                 lda sentence+3
1A9C 81FF             (          put.asm):00010                 cmpa #$ff
1A9E 1027FA08         (          put.asm):00011                 lbeq print_ret_bad_put_command
1AA2 12               (          put.asm):00012                 nop     ; check if the player has the d.o.
1AA3 12               (          put.asm):00013                 nop     ; check if the player sees the i.o      
1AA4 12               (          put.asm):00014                 nop     ; is this in or on? 
1AA5 B611C9           (          put.asm):00015                 lda sentence+2
1AA8 8100             (          put.asm):00016                 cmpa #0 ; id of "IN"
1AAA 2605             (          put.asm):00017                 bne @s1
1AAC BD1AC1           (          put.asm):00018                 jsr put_in_sub
1AAF 200D             (          put.asm):00019                 bra @x
1AB1 8106             (          put.asm):00020         @s1     cmpa #6 ; id of "ON"
1AB3 2605             (          put.asm):00021                 bne @s2
1AB5 BD1AF5           (          put.asm):00022                 jsr put_on_sub
1AB8 2004             (          put.asm):00023                 bra @x
1ABA 1027F9E0         (          put.asm):00024         @s2     lbeq print_ret_dont_understand
1ABE 3536             (          put.asm):00025         @x      puls y,x,d
1AC0 39               (          put.asm):00026                 rts
                      (          put.asm):00027         
1AC1                  (          put.asm):00028         put_in_sub      
1AC1 3436             (          put.asm):00029                 pshs d,x,y
1AC3 12               (          put.asm):00030                 nop     ; verify the i.o is a container
1AC4 B611CA           (          put.asm):00031                 lda sentence+3
1AC7 C613             (          put.asm):00032                 ldb #OBJ_ENTRY_SIZE
1AC9 3D               (          put.asm):00033                 mul
1ACA 1F01             (          put.asm):00034                 tfr d,x
1ACC 30891DA1         (          put.asm):00035                 leax obj_table,x
1AD0 A68811           (          put.asm):00036                 lda PROPERTY_BYTE_1,x
1AD3 8404             (          put.asm):00037                 anda #CONTAINER_MASK
1AD5 8100             (          put.asm):00038                 cmpa #0
1AD7 1027F9B7         (          put.asm):00039                 lbeq  print_ret_not_container
1ADB 12               (          put.asm):00040                 nop ;verify it isn't closed
1ADC B611C8           (          put.asm):00041                 lda sentence+1  ; move object
1ADF 3602             (          put.asm):00042                 pshu a
1AE1 B611CA           (          put.asm):00043                 lda sentence+3  ; to object
1AE4 3602             (          put.asm):00044                 pshu a
1AE6 BD130E           (          put.asm):00045                 jsr move_object
1AE9 8E1B28           (          put.asm):00046                 ldx #done
1AEC BD1914           (          put.asm):00047                 jsr PRINT
1AEF BDB958           (          put.asm):00048                 jsr PRINTCR
1AF2 3536             (          put.asm):00049                 puls y,x,d
1AF4 39               (          put.asm):00050                 rts
                      (          put.asm):00051         
1AF5                  (          put.asm):00052         put_on_sub
1AF5 3436             (          put.asm):00053                 pshs d,x,y
1AF7 B611CA           (          put.asm):00054                 lda sentence+3
1AFA C613             (          put.asm):00055                 ldb #OBJ_ENTRY_SIZE
1AFC 3D               (          put.asm):00056                 mul
1AFD 1F01             (          put.asm):00057                 tfr d,x
1AFF 30891DA1         (          put.asm):00058                 leax obj_table,x
1B03 A68811           (          put.asm):00059                 lda PROPERTY_BYTE_1,x
1B06 8402             (          put.asm):00060                 anda #SUPPORTER_MASK
1B08 8100             (          put.asm):00061                 cmpa #0
1B0A 1027F978         (          put.asm):00062                 lbeq  print_ret_not_supporter
1B0E 12               (          put.asm):00063                 nop     ; move the object
1B0F B611C8           (          put.asm):00064                 lda sentence+1 ; move the object
1B12 3602             (          put.asm):00065                 pshu a
1B14 B611CA           (          put.asm):00066                 lda sentence+3
1B17 3602             (          put.asm):00067                 pshu a
1B19 BD130E           (          put.asm):00068                 jsr move_object
1B1C 8E1B28           (          put.asm):00069                 ldx #done
1B1F BD1914           (          put.asm):00070                 jsr PRINT
1B22 BDB958           (          put.asm):00071                 jsr PRINTCR
1B25 3536             (          put.asm):00072                 puls y,x,d
1B27 39               (          put.asm):00073                 rts
                      (          put.asm):00074                 
1B28 444F4E452E00     (          put.asm):00075         done .strz "DONE."      
                      (         main.asm):00050                 include open.asm
                      (         open.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         open.asm):00002         ;open and closing subroutines
                      (         open.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         open.asm):00004         
1B2E                  (         open.asm):00005         open_sub
1B2E 3436             (         open.asm):00006                 pshs d,x,y
1B30 B611C8           (         open.asm):00007                 lda sentence+1
1B33 C613             (         open.asm):00008                 ldb #OBJ_ENTRY_SIZE    
1B35 3D               (         open.asm):00009                 mul
1B36 1F01             (         open.asm):00010                 tfr d,x
1B38 30891DA1         (         open.asm):00011                 leax obj_table,x
1B3C A68811           (         open.asm):00012                 lda PROPERTY_BYTE_1,x  ; openable?
1B3F 8410             (         open.asm):00013                 anda #OPENABLE_MASK
1B41 8110             (         open.asm):00014                 cmpa #OPENABLE_MASK
1B43 1026F98D         (         open.asm):00015                 lbne print_ret_not_openable
1B47 A68811           (         open.asm):00016                 lda PROPERTY_BYTE_1,x  ; already open?
1B4A 8420             (         open.asm):00017                 anda #OPEN_MASK
1B4C 8120             (         open.asm):00018                 cmpa #OPEN_MASK
1B4E 1027F910         (         open.asm):00019                 lbeq print_ret_already_open
1B52 A68811           (         open.asm):00020                 lda PROPERTY_BYTE_1,x  ; locked?
1B55 8480             (         open.asm):00021                 anda #LOCKED_MASK
1B57 8180             (         open.asm):00022                 cmpa #LOCKED_MASK
1B59 1027F9C1         (         open.asm):00023                 lbeq print_ret_locked
1B5D A68811           (         open.asm):00024                 lda PROPERTY_BYTE_1,x
1B60 8A20             (         open.asm):00025                 ora #OPEN_MASK
1B62 A78811           (         open.asm):00026                 sta PROPERTY_BYTE_1,x
1B65 8E1B28           (         open.asm):00027                 ldx #done
1B68 BD1914           (         open.asm):00028                 jsr PRINT
1B6B BDB958           (         open.asm):00029                 jsr PRINTCR
1B6E 3536             (         open.asm):00030                 puls y,x,d
1B70 39               (         open.asm):00031                 rts
                      (         open.asm):00032                 
1B71                  (         open.asm):00033         close_sub
1B71 3436             (         open.asm):00034                 pshs d,x,y
1B73 B611C8           (         open.asm):00035                 lda sentence+1
1B76 C613             (         open.asm):00036                 ldb #OBJ_ENTRY_SIZE
1B78 3D               (         open.asm):00037                 mul
1B79 1F01             (         open.asm):00038                 tfr d,x
1B7B 30891DA1         (         open.asm):00039                 leax obj_table,x
1B7F 12               (         open.asm):00040                 nop     ; is it openable?
1B80 A68811           (         open.asm):00041                 lda PROPERTY_BYTE_1,x
1B83 8410             (         open.asm):00042                 anda #OPENABLE_MASK     
1B85 8110             (         open.asm):00043                 cmpa #OPENABLE_MASK
1B87 1026F8E3         (         open.asm):00044                 lbne print_ret_not_closeable
1B8B 12               (         open.asm):00045                 nop ; is it already closed?
1B8C A68811           (         open.asm):00046                 lda PROPERTY_BYTE_1,x
1B8F 8420             (         open.asm):00047                 anda #OPEN_MASK 
1B91 8100             (         open.asm):00048                 cmpa #0 ; 0 means its closed
1B93 1027F8E3         (         open.asm):00049                 lbeq print_ret_already_closed   ;       
1B97 12               (         open.asm):00050                 nop ; close it
1B98 8620             (         open.asm):00051                 lda #OPEN_MASK
1B9A A88811           (         open.asm):00052                 eora PROPERTY_BYTE_1,x
1B9D A78811           (         open.asm):00053                 sta PROPERTY_BYTE_1,x
1BA0 8E1B28           (         open.asm):00054                 ldx #done
1BA3 BD1914           (         open.asm):00055                 jsr PRINT
1BA6 BDB958           (         open.asm):00056                 jsr PRINTCR
1BA9 3536             (         open.asm):00057                 puls y,x,d
1BAB 39               (         open.asm):00058                 rts
                      (         open.asm):00059         
                      (         open.asm):00060                 
1BAC                  (         open.asm):00061         get_player_room
1BAC 3436             (         open.asm):00062                 pshs d,x,y
1BAE 8601             (         open.asm):00063                 lda #PLAYER
1BB0 C613             (         open.asm):00064                 ldb #OBJ_ENTRY_SIZE
1BB2 3D               (         open.asm):00065                 mul
1BB3 1F01             (         open.asm):00066                 tfr d,x
1BB5 30891DA1         (         open.asm):00067                 leax obj_table,x
1BB9 A601             (         open.asm):00068                 lda HOLDER_ID,x
1BBB 3602             (         open.asm):00069                 pshu a
1BBD 3536             (         open.asm):00070                 puls y,x,d
1BBF 39               (         open.asm):00071                 rts     
                      (         open.asm):00072                 
                      (         open.asm):00073                 
                      (         main.asm):00051                 include light.asm
                      (        light.asm):00001          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        light.asm):00002          ;routines having to do with light
                      (        light.asm):00003          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        light.asm):00004          
                      (        light.asm):00005          
                      (        light.asm):00006          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        light.asm):00007          ;returns 1 if there is light in the player's
                      (        light.asm):00008          ;room or the something in that room has
                      (        light.asm):00009          ;a child that is emitting light and is in
                      (        light.asm):00010          ;a supporter or (an open or transparent container)
                      (        light.asm):00011          ;
                      (        light.asm):00012          ;player's room is on user stack
                      (        light.asm):00013          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1BC0                  (        light.asm):00014         ambient_light
1BC0 3436             (        light.asm):00015                 pshs d,x,y
1BC2 3702             (        light.asm):00016                 pulu a  ;get object from stack
1BC4 C613             (        light.asm):00017                 ldb #OBJ_ENTRY_SIZE
1BC6 3D               (        light.asm):00018                 mul
1BC7 1F01             (        light.asm):00019                 tfr d,x ; save offset
1BC9 1F02             (        light.asm):00020                 tfr d,y ; save offset
1BCB 30891DA1         (        light.asm):00021                 leax obj_table,x
1BCF A68812           (        light.asm):00022                 lda PROPERTY_BYTE_2,x
1BD2 8420             (        light.asm):00023                 anda #LIT_MASK
1BD4 8120             (        light.asm):00024                 cmpa #LIT_MASK  
1BD6 2606             (        light.asm):00025                 bne @s ; not emitting light, check children
1BD8 8601             (        light.asm):00026         @y      lda #1 ; emitting light, push 1 and return
1BDA 3602             (        light.asm):00027                 pshu a
1BDC 2042             (        light.asm):00028                 bra @x
1BDE 12               (        light.asm):00029         @s      nop     ; see if any children are emitting light
1BDF E684             (        light.asm):00030                 ldb OBJ_ID,x    ;reload id of parent
1BE1 8E1DA1           (        light.asm):00031                 ldx #obj_table  
1BE4 A684             (        light.asm):00032         @lp lda OBJ_ID,x    ;get obj id
1BE6 81FF             (        light.asm):00033                 cmpa #$ff       ;hit end of table?
1BE8 2732             (        light.asm):00034                 beq @n
1BEA E184             (        light.asm):00035                 cmpb OBJ_ID,x   ;is it this object?
1BEC 2729             (        light.asm):00036                 beq @c
1BEE E101             (        light.asm):00037                 cmpb HOLDER_ID,x ;is it a child of this object?
1BF0 2625             (        light.asm):00038                 bne @c
1BF2 A68812           (        light.asm):00039                 lda PROPERTY_BYTE_2,x   ;is the object a light source
1BF5 8420             (        light.asm):00040                 anda #LIT_MASK
1BF7 8120             (        light.asm):00041                 cmpa #LIT_MASK
1BF9 27DD             (        light.asm):00042                 beq @y
1BFB A684             (        light.asm):00043                 lda OBJ_ID,x            ;if we're the player check children
1BFD 8101             (        light.asm):00044                 cmpa #PLAYER
1BFF 270B             (        light.asm):00045                 beq @p
1C01 A68811           (        light.asm):00046                 lda PROPERTY_BYTE_1,x   ;is the object a closed container
1C04 8424             (        light.asm):00047                 anda #OPEN_CONTAINER_MASK       ;
1C06 8104             (        light.asm):00048                 cmpa #CONTAINER_MASK    ;               
1C08 260D             (        light.asm):00049                 bne @c
1C0A A684             (        light.asm):00050                 lda OBJ_ID,x     ;reload obj id
1C0C 3602             (        light.asm):00051         @p      pshu a                   ;put child id on stack 
1C0E BD1BC0           (        light.asm):00052                 jsr ambient_light ;is it emitting light
1C11 3702             (        light.asm):00053                 pulu a
1C13 8101             (        light.asm):00054                 cmpa #1
1C15 27C1             (        light.asm):00055                 beq @y                          
1C17 308813           (        light.asm):00056         @c  leax OBJ_ENTRY_SIZE,x ; go to next entry
1C1A 20C8             (        light.asm):00057                 bra @lp 
1C1C 8600             (        light.asm):00058         @n  lda #0
1C1E 3602             (        light.asm):00059                 pshu a  
1C20 3536             (        light.asm):00060         @x      puls y,x,d
1C22 39               (        light.asm):00061                 rts
                      (        light.asm):00062                 
                      (        light.asm):00063                 
                      (         main.asm):00052                 include locks.asm
                      (        locks.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        locks.asm):00002         ; containers.asm
                      (        locks.asm):00003         ; subroutines for manipulating
                      (        locks.asm):00004         ; containers 
                      (        locks.asm):00005         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (        locks.asm):00006                 
1C23                  (        locks.asm):00007         lock_sub
1C23 39               (        locks.asm):00008                 rts
                      (        locks.asm):00009         
1C24                  (        locks.asm):00010         unlock_sub
1C24 39               (        locks.asm):00011                 rts
                      (         main.asm):00053                 ; include smell.asm ; now generated by tool
                      (         main.asm):00054                 ; include listen.asm ; now generated by tool
                      (         main.asm):00055                 include enter_sub.asm
                      (    enter_sub.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (    enter_sub.asm):00002         ; enter_sub
                      (    enter_sub.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1C25                  (    enter_sub.asm):00004         enter_sub
1C25 3436             (    enter_sub.asm):00005                 pshs d,x,y
1C27 B611C8           (    enter_sub.asm):00006                 lda sentence+1
1C2A C613             (    enter_sub.asm):00007                 ldb #OBJ_ENTRY_SIZE
1C2C 3D               (    enter_sub.asm):00008                 mul
1C2D 1F01             (    enter_sub.asm):00009                 tfr d,x
1C2F 30891DA1         (    enter_sub.asm):00010                 leax obj_table,x
1C33 300E             (    enter_sub.asm):00011                 leax ENTER,x
1C35 A684             (    enter_sub.asm):00012                 lda ,x
1C37 81FF             (    enter_sub.asm):00013                 cmpa #$ff
1C39 260B             (    enter_sub.asm):00014                 bne @s
1C3B 8E1C56           (    enter_sub.asm):00015                 ldx #notenterable
1C3E BD1914           (    enter_sub.asm):00016                 jsr PRINT
1C41 BD1914           (    enter_sub.asm):00017                 jsr PRINT cr
1C44 200D             (    enter_sub.asm):00018                 bra @x
1C46 8E1DA1           (    enter_sub.asm):00019         @s  ldx #obj_table
1C49 308813           (    enter_sub.asm):00020                 leax OBJ_ENTRY_SIZE,x
1C4C 3001             (    enter_sub.asm):00021                 leax HOLDER_ID,x
1C4E A784             (    enter_sub.asm):00022                 sta ,x                  ;set player's new room
1C50 BD1746           (    enter_sub.asm):00023             jsr look_sub
1C53 3536             (    enter_sub.asm):00024         @x      puls y,x,d      
1C55 39               (    enter_sub.asm):00025                 rts
                      (    enter_sub.asm):00026                 
                      (    enter_sub.asm):00027                 
1C56 594F552043414E27 (    enter_sub.asm):00028         notenterable    .strz "YOU CAN'T ENTER THAT."
     5420454E54455220
     544841542E00
                      (         main.asm):00056                 include title_bar.asm
                      (    title_bar.asm):00001         ;title_bar.asm
                      (    title_bar.asm):00002         
     041B             (    title_bar.asm):00003         SCOREPOS equ 1051
                      (    title_bar.asm):00004         
1C6C                  (    title_bar.asm):00005         draw_bar
1C6C 3436             (    title_bar.asm):00006                 pshs d,x,y
1C6E 8600             (    title_bar.asm):00007                 lda #0
1C70 C620             (    title_bar.asm):00008                 ldb #32 ; blank
1C72 8E0400           (    title_bar.asm):00009                 ldx #1024
1C75 E786             (    title_bar.asm):00010         @lp stb a,x
1C77 4C               (    title_bar.asm):00011                 inca
1C78 8120             (    title_bar.asm):00012                 cmpa #32 ; end of line
1C7A 2702             (    title_bar.asm):00013                 beq @d  ;break
1C7C 20F7             (    title_bar.asm):00014                 bra @lp ; loop
1C7E 12               (    title_bar.asm):00015         @d  nop
1C7F BD1C88           (    title_bar.asm):00016                 jsr print_room_name
1C82 BD1CC0           (    title_bar.asm):00017                 jsr print_score
1C85 3536             (    title_bar.asm):00018                 puls y,x,d
1C87 39               (    title_bar.asm):00019                 rts
                      (    title_bar.asm):00020                 
1C88                  (    title_bar.asm):00021         print_room_name
1C88 3436             (    title_bar.asm):00022                 pshs d,x,y
1C8A 109E88           (    title_bar.asm):00023                 ldy 136 ; COCO cursor
1C8D 3420             (    title_bar.asm):00024                 pshs y  ; save cursor pos
1C8F 8E0400           (    title_bar.asm):00025                 ldx #1024
1C92 9F88             (    title_bar.asm):00026                 stx 136 ; top left
1C94 BD1BAC           (    title_bar.asm):00027                 jsr get_player_room ;get obj and leave it on stack
1C97 BD191E           (    title_bar.asm):00028                 jsr print_obj_name
1C9A BD1CA5           (    title_bar.asm):00029                 jsr invert_room
1C9D 3520             (    title_bar.asm):00030                 puls y          ; restore cursor pos
1C9F 109F88           (    title_bar.asm):00031                 sty 136
1CA2 3536             (    title_bar.asm):00032                 puls y,x,d
1CA4 39               (    title_bar.asm):00033                 rts
                      (    title_bar.asm):00034         
1CA5                  (    title_bar.asm):00035         invert_room
1CA5 3436             (    title_bar.asm):00036                 pshs d,x,y
1CA7 8E0400           (    title_bar.asm):00037                 ldx #1024
1CAA 8600             (    title_bar.asm):00038                 lda #0
1CAC 8118             (    title_bar.asm):00039         @lp cmpa #24
1CAE 270D             (    title_bar.asm):00040                 beq @x
1CB0 E686             (    title_bar.asm):00041                 ldb a,x
1CB2 C120             (    title_bar.asm):00042                 cmpb #32 ; don't invert blank
1CB4 2704             (    title_bar.asm):00043                 beq @s
1CB6 C040             (    title_bar.asm):00044                 subb #64 ;invert char
1CB8 E786             (    title_bar.asm):00045                 stb a,x ;store it back to mem
1CBA 4C               (    title_bar.asm):00046         @s  inca        
1CBB 20EF             (    title_bar.asm):00047                 bra @lp
1CBD 3536             (    title_bar.asm):00048         @x      puls y,x,d
1CBF 39               (    title_bar.asm):00049                 rts
                      (    title_bar.asm):00050         
                      (    title_bar.asm):00051         ;write "/100"
                      (    title_bar.asm):00052         ;then print the score next to it        
1CC0                  (    title_bar.asm):00053         print_score
1CC0 3436             (    title_bar.asm):00054                 pshs d,x,y
1CC2 862F             (    title_bar.asm):00055                 lda #47  ; inverse "/"
1CC4 B7041C           (    title_bar.asm):00056                 sta 1024+28
1CC7 8631             (    title_bar.asm):00057                 lda #49   ; inverse "1"
1CC9 B7041D           (    title_bar.asm):00058                 sta 1024+29
1CCC 8630             (    title_bar.asm):00059                 lda #48  ; inverse "0"
1CCE B7041E           (    title_bar.asm):00060                 sta 1024+30
1CD1 B7041F           (    title_bar.asm):00061                 sta 1024+31
1CD4 12               (    title_bar.asm):00062                 nop ; now print the score (right justified)
1CD5 B61D0C           (    title_bar.asm):00063                 lda score
1CD8 3602             (    title_bar.asm):00064                 pshu a ; save it
1CDA C60A             (    title_bar.asm):00065                 ldb #10
1CDC 8E041B           (    title_bar.asm):00066                 ldx #SCOREPOS
1CDF BD1D0D           (    title_bar.asm):00067                 jsr mod8        ; get rightmost digit
1CE2 8B30             (    title_bar.asm):00068                 adda #48        ; convert digit to inverse char 
1CE4 A784             (    title_bar.asm):00069             sta ,x              ; always draw 1 char
1CE6 301F             (    title_bar.asm):00070                 leax -1,x
1CE8 3702             (    title_bar.asm):00071                 pulu a
1CEA C60A             (    title_bar.asm):00072                 ldb #10         ;divide score by 10 (shift it right)
1CEC BD1D32           (    title_bar.asm):00073                 jsr div8
1CEF 8100             (    title_bar.asm):00074         @lp     cmpa #0         ; score > 0
1CF1 2716             (    title_bar.asm):00075                 beq @x
1CF3 3602             (    title_bar.asm):00076                 pshu a          ;save score
1CF5 C60A             (    title_bar.asm):00077                 ldb #10
1CF7 BD1D0D           (    title_bar.asm):00078                 jsr mod8        ; get rightmost digit
1CFA 8B30             (    title_bar.asm):00079                 adda #48        ; convert digit to inverse char 
1CFC A784             (    title_bar.asm):00080             sta ,x      ; draw char
1CFE 301F             (    title_bar.asm):00081                 leax -1,x
1D00 3702             (    title_bar.asm):00082                 pulu a          ; restore score
1D02 C60A             (    title_bar.asm):00083                 ldb #10         ;divide score by 10 (shift it right)
1D04 BD1D32           (    title_bar.asm):00084                 jsr div8
1D07 20E6             (    title_bar.asm):00085                 bra @lp
1D09 3536             (    title_bar.asm):00086         @x      puls y,x,d
1D0B 39               (    title_bar.asm):00087                 rts
                      (    title_bar.asm):00088         
                      (    title_bar.asm):00089                 
1D0C 00               (    title_bar.asm):00090         score .db 0
                      (         main.asm):00057                 include math.asm
                      (         math.asm):00001         ;mod10
                      (         math.asm):00002         
                      (         math.asm):00003         ;a contains value
                      (         math.asm):00004         ;b contains mod
1D0D                  (         math.asm):00005         mod8
1D0D 3430             (         math.asm):00006                 pshs x,y
1D0F 3604             (         math.asm):00007                 pshu b
1D11 A1C4             (         math.asm):00008         @lp     cmpa ,u
1D13 2B04             (         math.asm):00009                 bmi @x
1D15 A0C4             (         math.asm):00010                 suba ,u ; subtract value
1D17 20F8             (         math.asm):00011                 bra @lp
1D19 3341             (         math.asm):00012         @x  leau 1,u ; remove val we pushed
1D1B 3530             (         math.asm):00013                 puls y,x
1D1D 39               (         math.asm):00014                 rts
                      (         math.asm):00015         
                      (         math.asm):00016         ;16 bit mod
                      (         math.asm):00017         ;top of stack is number
                      (         math.asm):00018         ;under it is divisor
                      (         math.asm):00019         ;the result is returned on the stack
1D1E                  (         math.asm):00020         mod2b
1D1E 3436             (         math.asm):00021                 pshs d,x,y
1D20 3706             (         math.asm):00022                 pulu d ; get number
1D22 10A3C4           (         math.asm):00023         @lp cmpd ,u
1D25 2D04             (         math.asm):00024                 blt @x
1D27 A3C4             (         math.asm):00025                 subd ,u
1D29 20F7             (         math.asm):00026                 bra @lp
1D2B 3710             (         math.asm):00027         @x      pulu x  ; pop divisor
1D2D 3606             (         math.asm):00028                 pshu d ; put result on stack
1D2F 3536             (         math.asm):00029                 puls y,x,d
1D31 39               (         math.asm):00030                 rts
                      (         math.asm):00031                         
                      (         math.asm):00032         ;divide a by b
                      (         math.asm):00033         ;result in a
1D32                  (         math.asm):00034         div8
1D32 3430             (         math.asm):00035                 pshs x,y
1D34 3604             (         math.asm):00036                 pshu b  ; push divisor
1D36 C600             (         math.asm):00037                 ldb #0  ; pushs result
1D38 3604             (         math.asm):00038                 pshu b  ; 
1D3A A141             (         math.asm):00039         @lp cmpa 1,u
1D3C 2B06             (         math.asm):00040             bmi @x
1D3E A041             (         math.asm):00041                 suba 1,u
1D40 6CC4             (         math.asm):00042                 inc  ,u ; 
1D42 20F6             (         math.asm):00043                 bra @lp
1D44 A6C4             (         math.asm):00044         @x  lda ,u  ; put result in reg a
1D46 3342             (         math.asm):00045                 leau 2,u ; pop 2 params leaving result on stack
1D48 3530             (         math.asm):00046                 puls y,x
1D4A 39               (         math.asm):00047                 rts
                      (         math.asm):00048         
                      (         main.asm):00058                 include cls.asm
                      (          cls.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (          cls.asm):00002         ;CLS
                      (          cls.asm):00003         ;CLEARS SCREEN
                      (          cls.asm):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1D4B                  (          cls.asm):00005         cls
1D4B 3436             (          cls.asm):00006                 pshs d,x,y  ; save registers
1D4D 108E0000         (          cls.asm):00007                 ldy #0
1D51 8660             (          cls.asm):00008                 lda #96 blank space     
1D53 8E0400           (          cls.asm):00009                 ldx #1024
1D56 A780             (          cls.asm):00010         @a      sta ,x+
1D58 3121             (          cls.asm):00011                 leay 1,y        ; inc loop counter
1D5A 108C0200         (          cls.asm):00012                 cmpy #512  ; bottom of screen mem
1D5E 26F6             (          cls.asm):00013                 bne @a
1D60 3536             (          cls.asm):00014                 puls y,x,d  ; restore registers
1D62 39               (          cls.asm):00015                 rts
                      (         main.asm):00059                 include quit.asm
                      (         quit.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         quit.asm):00002         ;handles quitting
                      (         quit.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1D63                  (         quit.asm):00004         quit_sub
1D63 12               (         quit.asm):00005                 nop ; confirm?
1D64 8E1D72           (         quit.asm):00006                 ldx #bye
1D67 BD1914           (         quit.asm):00007                 jsr PRINT
1D6A BDB958           (         quit.asm):00008                 jsr PRINTCR
1D6D 12               (         quit.asm):00009                 nop ; need to execute a 'new'
1D6E 16F0D0           (         quit.asm):00010                 lbra quit ; reset stacks and exit
1D71 39               (         quit.asm):00011                 rts
                      (         quit.asm):00012                 
1D72 4259452E00       (         quit.asm):00013         bye .strz "BYE."        
                      (         main.asm):00060                 include Dictionary6809.asm
                      (Dictionary6809.as):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (Dictionary6809.as):00002         ; Dictionary6809.asm
                      (Dictionary6809.as):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (Dictionary6809.as):00004         
1D77                  (Dictionary6809.as):00005         dictionary
1D77 09               (Dictionary6809.as):00006                 .db 9
1D78 4F46465343524545 (Dictionary6809.as):00007                 .strz "OFFSCREEN" ; 0
     4E00
1D82 06               (Dictionary6809.as):00008                 .db 6
1D83 504C4159455200   (Dictionary6809.as):00009                 .strz "PLAYER" ; 1
1D8A 04               (Dictionary6809.as):00010                 .db 4
1D8B 4449525400       (Dictionary6809.as):00011                 .strz "DIRT" ; 2
1D90 04               (Dictionary6809.as):00012                 .db 4
1D91 5041544800       (Dictionary6809.as):00013                 .strz "PATH" ; 3
1D96 08               (Dictionary6809.as):00014                 .db 8
1D97 434C454152494E47 (Dictionary6809.as):00015                 .strz "CLEARING" ; 4
     00
1DA0 00               (Dictionary6809.as):00016                 .db 0
                      (         main.asm):00061                 include ObjectTable6809.asm
                      (ObjectTable6809.a):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (ObjectTable6809.a):00002         ; OBJECT_TABLE
                      (ObjectTable6809.a):00003         ; FORMAT: ID,HOLDER,INITIAL DESC,DESC,N,S,E,W,NE,SE,SW,NW,UP,DOWN,OUT,MASS
                      (ObjectTable6809.a):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (ObjectTable6809.a):00005         
1DA1                  (ObjectTable6809.a):00006         obj_table
1DA1 0000FF01FFFFFFFF (ObjectTable6809.a):00007                 .db 0,0,255,1,255,255,255,255,255,255,255,255,255,255,0,255,0   ; OFFSCREEN
     FFFFFFFFFFFF00FF
     00
1DB2 00               (ObjectTable6809.a):00008                 .db 0    ;  flags 1 - 8
1DB3 00               (ObjectTable6809.a):00009                 .db 0    ;  flags 9 - 16
1DB4 0102FF02FFFFFFFF (ObjectTable6809.a):00010                 .db 1,2,255,2,255,255,255,255,255,255,255,255,255,255,255,255,0   ; PLAYER
     FFFFFFFFFFFFFFFF
     00
1DC5 00               (ObjectTable6809.a):00011                 .db 0    ;  flags 1 - 8
1DC6 00               (ObjectTable6809.a):00012                 .db 0    ;  flags 9 - 16
1DC7 0200FF0303FFFFFF (ObjectTable6809.a):00013                 .db 2,0,255,3,3,255,255,255,255,255,255,255,255,255,255,255,0   ; DIRT PATH
     FFFFFFFFFFFFFFFF
     00
1DD8 00               (ObjectTable6809.a):00014                 .db 0    ;  flags 1 - 8
1DD9 00               (ObjectTable6809.a):00015                 .db 0    ;  flags 9 - 16
1DDA 0300FF04FF02FFFF (ObjectTable6809.a):00016                 .db 3,0,255,4,255,2,255,255,255,255,255,255,255,255,255,255,0   ; CLEARING
     FFFFFFFFFFFFFFFF
     00
1DEB 00               (ObjectTable6809.a):00017                 .db 0    ;  flags 1 - 8
1DEC 00               (ObjectTable6809.a):00018                 .db 0    ;  flags 9 - 16
1DED FF               (ObjectTable6809.a):00019                 .db 255
                      (         main.asm):00062                 include ObjectWordTable6809.asm
                      (ObjectWordTable68):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (ObjectWordTable68):00002         ; OBJECT WORD TABLE
                      (ObjectWordTable68):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (ObjectWordTable68):00004         
1DEE                  (ObjectWordTable68):00005         obj_word_table
1DEE 0000FFFF         (ObjectWordTable68):00006                 .db 0,0,255,255   ;   OFFSCREEN
1DF2 0101FFFF         (ObjectWordTable68):00007                 .db 1,1,255,255   ;   PLAYER
1DF6 020203FF         (ObjectWordTable68):00008                 .db 2,2,3,255   ;   DIRT PATH
1DFA 0304FFFF         (ObjectWordTable68):00009                 .db 3,4,255,255   ;   CLEARING
1DFE FF               (ObjectWordTable68):00010                 .db 255
1DFF 04               (ObjectWordTable68):00011         obj_table_size  .db 4
                      (         main.asm):00063                 include DescriptionTable6809.asm
                      (DescriptionTable6):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (DescriptionTable6):00002         ; DescriptionTable6809.asm
                      (DescriptionTable6):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (DescriptionTable6):00004         
1E00                  (DescriptionTable6):00005         description_table
1E00 1E               (DescriptionTable6):00006                 .db 30
1E01 594F55204E4F5449 (DescriptionTable6):00007                 .strz "YOU NOTICE NOTHING UNEXPECTED." ; 0
     4345204E4F544849
     4E4720554E455850
     45435445442E00
1E20 3B               (DescriptionTable6):00008                 .db 59
1E21 4F46465354414745 (DescriptionTable6):00009                 .strz "OFFSTAGE.  MOVE OBJECTS HERE TO REMOVE THEM FROM THE WORLD." ; 1
     2E20204D4F564520
     4F424A4543545320
     4845524520544F20
     52454D4F56452054
     48454D2046524F4D
     2054484520574F52
     4C442E00
1E5D 41               (DescriptionTable6):00010                 .db 65
1E5E 594F552752452041 (DescriptionTable6):00011                 .strz "YOU'RE A WONDERFUL PERSON. YOU SHOULDN'T CARE WHAT YOU LOOK LIKE." ; 2
     20574F4E44455246
     554C20504552534F
     4E2E20594F552053
     484F554C444E2754
     2043415245205748
     415420594F55204C
     4F4F4B204C494B45
     2E00
1EA0 5B               (DescriptionTable6):00012                 .db 91
1EA1 5448495320495320 (DescriptionTable6):00013                 .strz "THIS IS THE END OF A DIRT PATH, WHICH LEADS NORTH. FOREST SURROUNDS YOU ON ALL OTHER SIDES." ; 3
     54484520454E4420
     4F46204120444952
     5420504154482C20
     5748494348204C45
     414453204E4F5254
     482E20464F524553
     5420535552524F55
     4E445320594F5520
     4F4E20414C4C204F
     5448455220534944
     45532E00
1EFD 35               (DescriptionTable6):00014                 .db 53
1EFE 5448495320495320 (DescriptionTable6):00015                 .strz "THIS IS A SMALL CLEARING.  A DIRT PATH EXTENDS SOUTH." ; 4
     4120534D414C4C20
     434C454152494E47
     2E20204120444952
     5420504154482045
     5854454E44532053
     4F5554482E00
1F34 49               (DescriptionTable6):00016                 .db 73
1F35 594F552041524520 (DescriptionTable6):00017                 .strz "YOU ARE EXPERIENCING SUICIDAL THOUGHTS, YOU SHOULD SEEK PSYCHIATRIC HELP." ; 5
     455850455249454E
     43494E4720535549
     434944414C205448
     4F55474854532C20
     594F552053484F55
     4C44205345454B20
     5053594348494154
     5249432048454C50
     2E00
1F7F 3B               (DescriptionTable6):00018                 .db 59
1F80 54414C4B494E4720 (DescriptionTable6):00019                 .strz "TALKING TO YOURSELF IS A SIGN OF IMPENDING MENTAL COLLAPSE." ; 6
     544F20594F555253
     454C462049532041
     205349474E204F46
     20494D50454E4449
     4E47204D454E5441
     4C20434F4C4C4150
     53452E00
1FBC 1D               (DescriptionTable6):00020                 .db 29
1FBD 594F5520534D454C (DescriptionTable6):00021                 .strz "YOU SMELL NOTHING UNEXPECTED." ; 7
     4C204E4F5448494E
     4720554E45585045
     435445442E00
1FDB 1C               (DescriptionTable6):00022                 .db 28
1FDC 594F552048454152 (DescriptionTable6):00023                 .strz "YOU HEAR NOTHING UNEXPECTED." ; 8
     204E4F5448494E47
     20554E4558504543
     5445442E00
1FF9 14               (DescriptionTable6):00024                 .db 20
1FFA 2A2A2A594F552048 (DescriptionTable6):00025                 .strz "***YOU HAVE DIED***." ; 9
     4156452044494544
     2A2A2A2E00
200F 00               (DescriptionTable6):00026                 .db 0
                      (         main.asm):00064                 include NogoTable6809.asm
                      (NogoTable6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (NogoTable6809.asm):00002         ; NogoTable6809.asm
                      (NogoTable6809.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (NogoTable6809.asm):00004         
2010                  (NogoTable6809.asm):00005         nogo_table
2010 05               (NogoTable6809.asm):00006                 .db 5
2011 424C414E4B00     (NogoTable6809.asm):00007                 .strz "BLANK" ; 0
2017 16               (NogoTable6809.asm):00008                 .db 22
2018 594F552043414E27 (NogoTable6809.asm):00009                 .strz "YOU CAN'T GO THAT WAY." ; 1
     5420474F20544841
     54205741592E00
202F 00               (NogoTable6809.asm):00010                 .db 0
                      (         main.asm):00065                 include BackDropTable6809.asm
                      (BackDropTable6809):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (BackDropTable6809):00002         ; Machine Generated Backdrop Table 
                      (BackDropTable6809):00003         ; Format: id, followed by 5 rooms where that object is visible (or 255)
                      (BackDropTable6809):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (BackDropTable6809):00005         
2030                  (BackDropTable6809):00006         backdrop_table
2030 FF               (BackDropTable6809):00007                 .db 255
                      (         main.asm):00066                 include sentence_table.asm
                      (sentence_table.as):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (sentence_table.as):00002         ;sentence jump table
                      (sentence_table.as):00003         ;verb, d.o., prep, i.o 
                      (sentence_table.as):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2031                  (sentence_table.as):00005         sentence_table 
2031 11               (sentence_table.as):00006                 .db look_verb_id
2032 1746             (sentence_table.as):00007                 .dw look_sub
2034 0D               (sentence_table.as):00008                 .db inventory_verb_id
2035 189F             (sentence_table.as):00009                 .dw inventory_sub
2037 00               (sentence_table.as):00010                 .db n_verb_id
2038 1281             (sentence_table.as):00011                 .dw move_player
203A 04               (sentence_table.as):00012                 .db ne_verb_id
203B 1281             (sentence_table.as):00013                 .dw move_player
203D 07               (sentence_table.as):00014                 .db nw_verb_id
203E 1281             (sentence_table.as):00015                 .dw move_player 
2040 01               (sentence_table.as):00016                 .db s_verb_id
2041 1281             (sentence_table.as):00017                 .dw move_player
2043 02               (sentence_table.as):00018                 .db e_verb_id
2044 1281             (sentence_table.as):00019                 .dw move_player
2046 03               (sentence_table.as):00020                 .db w_verb_id
2047 1281             (sentence_table.as):00021                 .dw move_player
2049 05               (sentence_table.as):00022                 .db se_verb_id
204A 1281             (sentence_table.as):00023                 .dw move_player 
204C 06               (sentence_table.as):00024                 .db sw_verb_id
204D 1281             (sentence_table.as):00025                 .dw move_player 
204F 08               (sentence_table.as):00026                 .db up_verb_id
2050 1281             (sentence_table.as):00027                 .dw move_player 
2052 09               (sentence_table.as):00028                 .db down_verb_id
2053 1281             (sentence_table.as):00029                 .dw move_player 
2055 0C               (sentence_table.as):00030                 .db get_verb_id
2056 1322             (sentence_table.as):00031                 .dw get_sub
2058 0B               (sentence_table.as):00032                 .db out_verb_id
2059 1281             (sentence_table.as):00033                 .dw move_player 
205B 0A               (sentence_table.as):00034                 .db enter_verb_id
205C 1C25             (sentence_table.as):00035                 .dw enter_sub
205E 0F               (sentence_table.as):00036                 .db drop_verb_id
205F 17F5             (sentence_table.as):00037                 .dw drop_sub
2061 12               (sentence_table.as):00038                 .db examine_verb_id
2062 124B             (sentence_table.as):00039                 .dw look_at_sub
2064 1A               (sentence_table.as):00040                 .db put_verb_id
2065 1A8E             (sentence_table.as):00041                 .dw put_sub
2067 14               (sentence_table.as):00042                 .db open_verb_id
2068 1B2E             (sentence_table.as):00043                 .dw open_sub
206A 17               (sentence_table.as):00044                 .db close_verb_id
206B 1B71             (sentence_table.as):00045                 .dw close_sub   
206D 14               (sentence_table.as):00046                 .db open_verb_id
206E 1B2E             (sentence_table.as):00047                 .dw open_sub 
2070 17               (sentence_table.as):00048                 .db close_verb_id
2071 1B71             (sentence_table.as):00049                 .dw close_sub
2073 1C               (sentence_table.as):00050                 .db smell_verb_id
2074 266C             (sentence_table.as):00051                 .dw smell_sub
2076 1D               (sentence_table.as):00052                 .db listen_verb_id
2077 267C             (sentence_table.as):00053                 .dw listen_sub
2079 0A               (sentence_table.as):00054                 .db enter_verb_id
207A 1C25             (sentence_table.as):00055                 .dw enter_sub
207C 1B               (sentence_table.as):00056                 .db quit_verb_id
207D 1D63             (sentence_table.as):00057                 .dw quit_sub
207F FF               (sentence_table.as):00058                 .db 255
                      (         main.asm):00067                 include verbTable6809.asm
                      (verbTable6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (verbTable6809.asm):00002         ; VerbTable6809.asm 
                      (verbTable6809.asm):00003         ; Machine Generated Verb Table
                      (verbTable6809.asm):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (verbTable6809.asm):00005         
     0000             (verbTable6809.asm):00006         n_verb_id equ 0
     0001             (verbTable6809.asm):00007         s_verb_id equ 1
     0002             (verbTable6809.asm):00008         e_verb_id equ 2
     0003             (verbTable6809.asm):00009         w_verb_id equ 3
     0004             (verbTable6809.asm):00010         ne_verb_id equ 4
     0005             (verbTable6809.asm):00011         se_verb_id equ 5
     0006             (verbTable6809.asm):00012         sw_verb_id equ 6
     0007             (verbTable6809.asm):00013         nw_verb_id equ 7
     0008             (verbTable6809.asm):00014         up_verb_id equ 8
     0009             (verbTable6809.asm):00015         down_verb_id equ 9
     000A             (verbTable6809.asm):00016         enter_verb_id equ 10
     000B             (verbTable6809.asm):00017         out_verb_id equ 11
     000C             (verbTable6809.asm):00018         get_verb_id equ 12
     000D             (verbTable6809.asm):00019         inventory_verb_id equ 13
     000E             (verbTable6809.asm):00020         kill_verb_id equ 14
     000F             (verbTable6809.asm):00021         drop_verb_id equ 15
     0010             (verbTable6809.asm):00022         light_verb_id equ 16
     0011             (verbTable6809.asm):00023         look_verb_id equ 17
     0012             (verbTable6809.asm):00024         examine_verb_id equ 18
     0013             (verbTable6809.asm):00025         look_in_verb_id equ 19
     0014             (verbTable6809.asm):00026         open_verb_id equ 20
     0015             (verbTable6809.asm):00027         lock_verb_id equ 21
     0016             (verbTable6809.asm):00028         unlock_verb_id equ 22
     0017             (verbTable6809.asm):00029         close_verb_id equ 23
     0018             (verbTable6809.asm):00030         eat_verb_id equ 24
     0019             (verbTable6809.asm):00031         drink_verb_id equ 25
     001A             (verbTable6809.asm):00032         put_verb_id equ 26
     001B             (verbTable6809.asm):00033         quit_verb_id equ 27
     001C             (verbTable6809.asm):00034         smell_verb_id equ 28
     001D             (verbTable6809.asm):00035         listen_verb_id equ 29
     001E             (verbTable6809.asm):00036         wait_verb_id equ 30
     001F             (verbTable6809.asm):00037         climb_verb_id equ 31
                      (verbTable6809.asm):00038         
                      (verbTable6809.asm):00039         
2080                  (verbTable6809.asm):00040         verb_table
2080 00               (verbTable6809.asm):00041                 .db 0
2081 01               (verbTable6809.asm):00042                 .db 1
2082 4E00             (verbTable6809.asm):00043                 .strz "N"
2084 00               (verbTable6809.asm):00044                 .db 0
2085 08               (verbTable6809.asm):00045                 .db 8
2086 474F204E4F525448 (verbTable6809.asm):00046                 .strz "GO NORTH"
     00
208F 00               (verbTable6809.asm):00047                 .db 0
2090 05               (verbTable6809.asm):00048                 .db 5
2091 4E4F52544800     (verbTable6809.asm):00049                 .strz "NORTH"
2097 01               (verbTable6809.asm):00050                 .db 1
2098 01               (verbTable6809.asm):00051                 .db 1
2099 5300             (verbTable6809.asm):00052                 .strz "S"
209B 01               (verbTable6809.asm):00053                 .db 1
209C 08               (verbTable6809.asm):00054                 .db 8
209D 474F20534F555448 (verbTable6809.asm):00055                 .strz "GO SOUTH"
     00
20A6 01               (verbTable6809.asm):00056                 .db 1
20A7 05               (verbTable6809.asm):00057                 .db 5
20A8 534F55544800     (verbTable6809.asm):00058                 .strz "SOUTH"
20AE 02               (verbTable6809.asm):00059                 .db 2
20AF 01               (verbTable6809.asm):00060                 .db 1
20B0 4500             (verbTable6809.asm):00061                 .strz "E"
20B2 02               (verbTable6809.asm):00062                 .db 2
20B3 07               (verbTable6809.asm):00063                 .db 7
20B4 474F204541535400 (verbTable6809.asm):00064                 .strz "GO EAST"
20BC 02               (verbTable6809.asm):00065                 .db 2
20BD 04               (verbTable6809.asm):00066                 .db 4
20BE 4541535400       (verbTable6809.asm):00067                 .strz "EAST"
20C3 03               (verbTable6809.asm):00068                 .db 3
20C4 01               (verbTable6809.asm):00069                 .db 1
20C5 5700             (verbTable6809.asm):00070                 .strz "W"
20C7 03               (verbTable6809.asm):00071                 .db 3
20C8 07               (verbTable6809.asm):00072                 .db 7
20C9 474F205745535400 (verbTable6809.asm):00073                 .strz "GO WEST"
20D1 03               (verbTable6809.asm):00074                 .db 3
20D2 04               (verbTable6809.asm):00075                 .db 4
20D3 5745535400       (verbTable6809.asm):00076                 .strz "WEST"
20D8 04               (verbTable6809.asm):00077                 .db 4
20D9 02               (verbTable6809.asm):00078                 .db 2
20DA 4E4500           (verbTable6809.asm):00079                 .strz "NE"
20DD 04               (verbTable6809.asm):00080                 .db 4
20DE 0C               (verbTable6809.asm):00081                 .db 12
20DF 474F204E4F525448 (verbTable6809.asm):00082                 .strz "GO NORTHEAST"
     4541535400
20EC 04               (verbTable6809.asm):00083                 .db 4
20ED 09               (verbTable6809.asm):00084                 .db 9
20EE 4E4F525448454153 (verbTable6809.asm):00085                 .strz "NORTHEAST"
     5400
20F8 05               (verbTable6809.asm):00086                 .db 5
20F9 02               (verbTable6809.asm):00087                 .db 2
20FA 534500           (verbTable6809.asm):00088                 .strz "SE"
20FD 05               (verbTable6809.asm):00089                 .db 5
20FE 0C               (verbTable6809.asm):00090                 .db 12
20FF 474F20534F555448 (verbTable6809.asm):00091                 .strz "GO SOUTHEAST"
     4541535400
210C 05               (verbTable6809.asm):00092                 .db 5
210D 09               (verbTable6809.asm):00093                 .db 9
210E 534F555448454153 (verbTable6809.asm):00094                 .strz "SOUTHEAST"
     5400
2118 06               (verbTable6809.asm):00095                 .db 6
2119 02               (verbTable6809.asm):00096                 .db 2
211A 535700           (verbTable6809.asm):00097                 .strz "SW"
211D 06               (verbTable6809.asm):00098                 .db 6
211E 0C               (verbTable6809.asm):00099                 .db 12
211F 474F20534F555448 (verbTable6809.asm):00100                 .strz "GO SOUTHWEST"
     5745535400
212C 06               (verbTable6809.asm):00101                 .db 6
212D 09               (verbTable6809.asm):00102                 .db 9
212E 534F555448574553 (verbTable6809.asm):00103                 .strz "SOUTHWEST"
     5400
2138 07               (verbTable6809.asm):00104                 .db 7
2139 02               (verbTable6809.asm):00105                 .db 2
213A 4E5700           (verbTable6809.asm):00106                 .strz "NW"
213D 07               (verbTable6809.asm):00107                 .db 7
213E 0C               (verbTable6809.asm):00108                 .db 12
213F 474F204E4F525448 (verbTable6809.asm):00109                 .strz "GO NORTHWEST"
     5745535400
214C 07               (verbTable6809.asm):00110                 .db 7
214D 09               (verbTable6809.asm):00111                 .db 9
214E 4E4F525448574553 (verbTable6809.asm):00112                 .strz "NORTHWEST"
     5400
2158 08               (verbTable6809.asm):00113                 .db 8
2159 02               (verbTable6809.asm):00114                 .db 2
215A 555000           (verbTable6809.asm):00115                 .strz "UP"
215D 08               (verbTable6809.asm):00116                 .db 8
215E 05               (verbTable6809.asm):00117                 .db 5
215F 474F20555000     (verbTable6809.asm):00118                 .strz "GO UP"
2165 08               (verbTable6809.asm):00119                 .db 8
2166 01               (verbTable6809.asm):00120                 .db 1
2167 5500             (verbTable6809.asm):00121                 .strz "U"
2169 09               (verbTable6809.asm):00122                 .db 9
216A 04               (verbTable6809.asm):00123                 .db 4
216B 444F574E00       (verbTable6809.asm):00124                 .strz "DOWN"
2170 09               (verbTable6809.asm):00125                 .db 9
2171 07               (verbTable6809.asm):00126                 .db 7
2172 474F20444F574E00 (verbTable6809.asm):00127                 .strz "GO DOWN"
217A 09               (verbTable6809.asm):00128                 .db 9
217B 01               (verbTable6809.asm):00129                 .db 1
217C 4400             (verbTable6809.asm):00130                 .strz "D"
217E 0A               (verbTable6809.asm):00131                 .db 10
217F 05               (verbTable6809.asm):00132                 .db 5
2180 454E54455200     (verbTable6809.asm):00133                 .strz "ENTER"
2186 0A               (verbTable6809.asm):00134                 .db 10
2187 05               (verbTable6809.asm):00135                 .db 5
2188 474F20494E00     (verbTable6809.asm):00136                 .strz "GO IN"
218E 0A               (verbTable6809.asm):00137                 .db 10
218F 07               (verbTable6809.asm):00138                 .db 7
2190 474F20494E544F00 (verbTable6809.asm):00139                 .strz "GO INTO"
2198 0A               (verbTable6809.asm):00140                 .db 10
2199 09               (verbTable6809.asm):00141                 .db 9
219A 474F20494E534944 (verbTable6809.asm):00142                 .strz "GO INSIDE"
     4500
21A4 0B               (verbTable6809.asm):00143                 .db 11
21A5 03               (verbTable6809.asm):00144                 .db 3
21A6 4F555400         (verbTable6809.asm):00145                 .strz "OUT"
21AA 0C               (verbTable6809.asm):00146                 .db 12
21AB 03               (verbTable6809.asm):00147                 .db 3
21AC 47455400         (verbTable6809.asm):00148                 .strz "GET"
21B0 0C               (verbTable6809.asm):00149                 .db 12
21B1 04               (verbTable6809.asm):00150                 .db 4
21B2 54414B4500       (verbTable6809.asm):00151                 .strz "TAKE"
21B7 0C               (verbTable6809.asm):00152                 .db 12
21B8 04               (verbTable6809.asm):00153                 .db 4
21B9 4752414200       (verbTable6809.asm):00154                 .strz "GRAB"
21BE 0C               (verbTable6809.asm):00155                 .db 12
21BF 07               (verbTable6809.asm):00156                 .db 7
21C0 5049434B20555000 (verbTable6809.asm):00157                 .strz "PICK UP"
21C8 0D               (verbTable6809.asm):00158                 .db 13
21C9 09               (verbTable6809.asm):00159                 .db 9
21CA 494E56454E544F52 (verbTable6809.asm):00160                 .strz "INVENTORY"
     5900
21D4 0D               (verbTable6809.asm):00161                 .db 13
21D5 01               (verbTable6809.asm):00162                 .db 1
21D6 4900             (verbTable6809.asm):00163                 .strz "I"
21D8 0E               (verbTable6809.asm):00164                 .db 14
21D9 04               (verbTable6809.asm):00165                 .db 4
21DA 4B494C4C00       (verbTable6809.asm):00166                 .strz "KILL"
21DF 0F               (verbTable6809.asm):00167                 .db 15
21E0 04               (verbTable6809.asm):00168                 .db 4
21E1 44524F5000       (verbTable6809.asm):00169                 .strz "DROP"
21E6 10               (verbTable6809.asm):00170                 .db 16
21E7 05               (verbTable6809.asm):00171                 .db 5
21E8 4C4947485400     (verbTable6809.asm):00172                 .strz "LIGHT"
21EE 11               (verbTable6809.asm):00173                 .db 17
21EF 04               (verbTable6809.asm):00174                 .db 4
21F0 4C4F4F4B00       (verbTable6809.asm):00175                 .strz "LOOK"
21F5 11               (verbTable6809.asm):00176                 .db 17
21F6 01               (verbTable6809.asm):00177                 .db 1
21F7 4C00             (verbTable6809.asm):00178                 .strz "L"
21F9 12               (verbTable6809.asm):00179                 .db 18
21FA 07               (verbTable6809.asm):00180                 .db 7
21FB 4558414D494E4500 (verbTable6809.asm):00181                 .strz "EXAMINE"
2203 12               (verbTable6809.asm):00182                 .db 18
2204 01               (verbTable6809.asm):00183                 .db 1
2205 5800             (verbTable6809.asm):00184                 .strz "X"
2207 12               (verbTable6809.asm):00185                 .db 18
2208 07               (verbTable6809.asm):00186                 .db 7
2209 4C4F4F4B20415400 (verbTable6809.asm):00187                 .strz "LOOK AT"
2211 13               (verbTable6809.asm):00188                 .db 19
2212 07               (verbTable6809.asm):00189                 .db 7
2213 4C4F4F4B20494E00 (verbTable6809.asm):00190                 .strz "LOOK IN"
221B 13               (verbTable6809.asm):00191                 .db 19
221C 07               (verbTable6809.asm):00192                 .db 7
221D 494E535045435400 (verbTable6809.asm):00193                 .strz "INSPECT"
2225 13               (verbTable6809.asm):00194                 .db 19
2226 06               (verbTable6809.asm):00195                 .db 6
2227 53454152434800   (verbTable6809.asm):00196                 .strz "SEARCH"
222E 14               (verbTable6809.asm):00197                 .db 20
222F 04               (verbTable6809.asm):00198                 .db 4
2230 4F50454E00       (verbTable6809.asm):00199                 .strz "OPEN"
2235 15               (verbTable6809.asm):00200                 .db 21
2236 04               (verbTable6809.asm):00201                 .db 4
2237 4C4F434B00       (verbTable6809.asm):00202                 .strz "LOCK"
223C 16               (verbTable6809.asm):00203                 .db 22
223D 06               (verbTable6809.asm):00204                 .db 6
223E 554E4C4F434B00   (verbTable6809.asm):00205                 .strz "UNLOCK"
2245 17               (verbTable6809.asm):00206                 .db 23
2246 05               (verbTable6809.asm):00207                 .db 5
2247 434C4F534500     (verbTable6809.asm):00208                 .strz "CLOSE"
224D 17               (verbTable6809.asm):00209                 .db 23
224E 04               (verbTable6809.asm):00210                 .db 4
224F 5348555400       (verbTable6809.asm):00211                 .strz "SHUT"
2254 18               (verbTable6809.asm):00212                 .db 24
2255 03               (verbTable6809.asm):00213                 .db 3
2256 45415400         (verbTable6809.asm):00214                 .strz "EAT"
225A 19               (verbTable6809.asm):00215                 .db 25
225B 05               (verbTable6809.asm):00216                 .db 5
225C 4452494E4B00     (verbTable6809.asm):00217                 .strz "DRINK"
2262 1A               (verbTable6809.asm):00218                 .db 26
2263 03               (verbTable6809.asm):00219                 .db 3
2264 50555400         (verbTable6809.asm):00220                 .strz "PUT"
2268 1A               (verbTable6809.asm):00221                 .db 26
2269 05               (verbTable6809.asm):00222                 .db 5
226A 504C41434500     (verbTable6809.asm):00223                 .strz "PLACE"
2270 1B               (verbTable6809.asm):00224                 .db 27
2271 04               (verbTable6809.asm):00225                 .db 4
2272 5155495400       (verbTable6809.asm):00226                 .strz "QUIT"
2277 1C               (verbTable6809.asm):00227                 .db 28
2278 05               (verbTable6809.asm):00228                 .db 5
2279 534D454C4C00     (verbTable6809.asm):00229                 .strz "SMELL"
227F 1C               (verbTable6809.asm):00230                 .db 28
2280 05               (verbTable6809.asm):00231                 .db 5
2281 534E49464600     (verbTable6809.asm):00232                 .strz "SNIFF"
2287 1D               (verbTable6809.asm):00233                 .db 29
2288 06               (verbTable6809.asm):00234                 .db 6
2289 4C495354454E00   (verbTable6809.asm):00235                 .strz "LISTEN"
2290 1E               (verbTable6809.asm):00236                 .db 30
2291 04               (verbTable6809.asm):00237                 .db 4
2292 5741495400       (verbTable6809.asm):00238                 .strz "WAIT"
2297 1F               (verbTable6809.asm):00239                 .db 31
2298 05               (verbTable6809.asm):00240                 .db 5
2299 434C494D4200     (verbTable6809.asm):00241                 .strz "CLIMB"
229F 0000             (verbTable6809.asm):00242                 .db 0,0
                      (         main.asm):00068                 include PrepTable6809.asm
                      (PrepTable6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (PrepTable6809.asm):00002         ; PrepTable6809.asm
                      (PrepTable6809.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (PrepTable6809.asm):00004         
22A1                  (PrepTable6809.asm):00005         prep_table
22A1 02               (PrepTable6809.asm):00006                 .db 2
22A2 494E00           (PrepTable6809.asm):00007                 .strz "IN" ; 0
22A5 02               (PrepTable6809.asm):00008                 .db 2
22A6 415400           (PrepTable6809.asm):00009                 .strz "AT" ; 1
22A9 02               (PrepTable6809.asm):00010                 .db 2
22AA 544F00           (PrepTable6809.asm):00011                 .strz "TO" ; 2
22AD 06               (PrepTable6809.asm):00012                 .db 6
22AE 494E5349444500   (PrepTable6809.asm):00013                 .strz "INSIDE" ; 3
22B5 03               (PrepTable6809.asm):00014                 .db 3
22B6 4F555400         (PrepTable6809.asm):00015                 .strz "OUT" ; 4
22BA 05               (PrepTable6809.asm):00016                 .db 5
22BB 554E44455200     (PrepTable6809.asm):00017                 .strz "UNDER" ; 5
22C1 02               (PrepTable6809.asm):00018                 .db 2
22C2 4F4E00           (PrepTable6809.asm):00019                 .strz "ON" ; 6
22C5 03               (PrepTable6809.asm):00020                 .db 3
22C6 4F464600         (PrepTable6809.asm):00021                 .strz "OFF" ; 7
22CA 04               (PrepTable6809.asm):00022                 .db 4
22CB 494E544F00       (PrepTable6809.asm):00023                 .strz "INTO" ; 8
22D0 02               (PrepTable6809.asm):00024                 .db 2
22D1 555000           (PrepTable6809.asm):00025                 .strz "UP" ; 9
22D4 04               (PrepTable6809.asm):00026                 .db 4
22D5 5749544800       (PrepTable6809.asm):00027                 .strz "WITH" ; 10
22DA 00               (PrepTable6809.asm):00028                 .db 0
                      (         main.asm):00069                 include checks.asm
                      (       checks.asm):00001         
                      (       checks.asm):00002         ;checks
     0006             (       checks.asm):00003         MAX_BACKDROP_ROOMS equ 6 ; (5 actually)
                      (       checks.asm):00004         
                      (       checks.asm):00005         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       checks.asm):00006         ;loop over table
                      (       checks.asm):00007         ;if verb matches, run the check
                      (       checks.asm):00008         ;if the check returns 0, pop the stack (unwind it one level)
                      (       checks.asm):00009         ;then rts to complete bail from 
                      (       checks.asm):00010         ;sentence processing
                      (       checks.asm):00011         ;returns 1 or 0 on user stack
                      (       checks.asm):00012         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       checks.asm):00013         
22DB                  (       checks.asm):00014         check_see_dobj
22DB 3436             (       checks.asm):00015                 pshs d,x,y
22DD 8601             (       checks.asm):00016                 lda #1  ; push return val
22DF 3602             (       checks.asm):00017                 pshu a
22E1 12               (       checks.asm):00018                 nop #is it a backdrop?
22E2 B611C8           (       checks.asm):00019                 lda sentence+1  
22E5 C613             (       checks.asm):00020                 ldb #OBJ_ENTRY_SIZE
22E7 3D               (       checks.asm):00021                 mul
22E8 1F01             (       checks.asm):00022                 tfr d,x
22EA 30891DA1         (       checks.asm):00023                 leax obj_table,x
22EE 308812           (       checks.asm):00024                 leax PROPERTY_BYTE_2,x
22F1 A684             (       checks.asm):00025                 lda ,x
22F3 8402             (       checks.asm):00026                 anda #BACKDROP_MASK
22F5 8102             (       checks.asm):00027                 cmpa #BACKDROP_MASK
22F7 260A             (       checks.asm):00028                 bne @n
22F9 12               (       checks.asm):00029                 nop ; it was a backdrop - is it visible in the rooms?
22FA BD2327           (       checks.asm):00030                 jsr is_visible_backdrop
22FD 3702             (       checks.asm):00031                 pulu a
22FF 8101             (       checks.asm):00032                 cmpa #1
2301 2721             (       checks.asm):00033                 beq @x
2303 12               (       checks.asm):00034         @n      nop #do normal check
2304 BD1BAC           (       checks.asm):00035                 jsr get_player_room ; leave it on stack
2307 B611C8           (       checks.asm):00036                 lda sentence+1  
230A 3602             (       checks.asm):00037                 pshu a
230C BD181A           (       checks.asm):00038                 jsr is_visible_child_of  ; leave result on stack
230F 3702             (       checks.asm):00039                 pulu a
2311 8100             (       checks.asm):00040                 cmpa #0
2313 1026000D         (       checks.asm):00041                 lbne @x
2317 8E18F7           (       checks.asm):00042                 ldx #nosee 
231A BD1914           (       checks.asm):00043                 jsr PRINT
231D BDB958           (       checks.asm):00044                 jsr PRINTCR
2320 8600             (       checks.asm):00045                 lda #0          ; change return code to 0
2322 A7C4             (       checks.asm):00046                 sta ,u
2324 3536             (       checks.asm):00047         @x      puls y,x,d
2326 39               (       checks.asm):00048                 rts
                      (       checks.asm):00049         
                      (       checks.asm):00050         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       checks.asm):00051         ;
                      (       checks.asm):00052         ;puts ret var, dobj, player room on stack
                      (       checks.asm):00053         ;then pops off top two params
                      (       checks.asm):00054         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       checks.asm):00055         
2327                  (       checks.asm):00056         is_visible_backdrop
2327 3436             (       checks.asm):00057                 pshs d,x,y
2329 8600             (       checks.asm):00058                 lda #0  ; push return var
232B 3602             (       checks.asm):00059                 pshu a 
232D B611C8           (       checks.asm):00060                 lda sentence+1
2330 3602             (       checks.asm):00061                 pshu a
2332 BD1BAC           (       checks.asm):00062                 jsr get_player_room     ; get and leave on stack
2335 8E2030           (       checks.asm):00063                 ldx #backdrop_table
2338 A684             (       checks.asm):00064         @lp     lda ,x ; load obj id
233A 81FF             (       checks.asm):00065                 cmpa #$ff ; hit end?
233C 271D             (       checks.asm):00066                 beq @x
233E A141             (       checks.asm):00067                 cmpa 1,u ; is this the object?
2340 2615             (       checks.asm):00068                 bne @c 
2342 C601             (       checks.asm):00069                 ldb #1  ; found object in table...check for room matches
2344 C106             (       checks.asm):00070         @il     cmpb #MAX_BACKDROP_ROOMS ; six entries for an object 
2346 270F             (       checks.asm):00071                 beq #@c
2348 A685             (       checks.asm):00072                 lda b,x  ; get a room it's visible in
234A A1C4             (       checks.asm):00073                 cmpa ,u  ; is it one of the rooms?
234C 2606             (       checks.asm):00074                 bne @n   ; no - continue
234E 8601             (       checks.asm):00075                 lda #1    ; put 1 in return var and return
2350 A742             (       checks.asm):00076                 sta     2,u                      
2352 2007             (       checks.asm):00077                 bra @x
2354 5C               (       checks.asm):00078         @n      incb    ; continue inner loop
2355 20ED             (       checks.asm):00079                 bra @il
2357 3006             (       checks.asm):00080         @c      leax 6,x ; skip over entry
2359 20DD             (       checks.asm):00081                 bra @lp
235B 3342             (       checks.asm):00082         @x      leau 2,u  ; pop param + local off stack (leaving return on top)
235D 3536             (       checks.asm):00083                 puls y,x,d
235F 39               (       checks.asm):00084                 rts
                      (       checks.asm):00085                 
                      (       checks.asm):00086         ;return a 1 or 0 on user stack
2360                  (       checks.asm):00087         check_dobj_supplied
2360 3436             (       checks.asm):00088                         pshs d,x,y
2362 8601             (       checks.asm):00089                         lda #1          ;put a 1 on stack
2364 3602             (       checks.asm):00090                         pshu a
2366 B611C8           (       checks.asm):00091                         lda sentence+1  ; dobj
2369 81FF             (       checks.asm):00092                         cmpa #NO_OBJECT
236B 2619             (       checks.asm):00093                         bne @x
236D 8E2389           (       checks.asm):00094                         ldx #nodobj     ; print "YOU NEED TO SAY ..."
2370 BD1914           (       checks.asm):00095                         jsr PRINT
2373 8E275B           (       checks.asm):00096                         ldx #word1
2376 BD1914           (       checks.asm):00097                         jsr PRINT
2379 8E15BD           (       checks.asm):00098                         ldx #period             ; print remainder
237C BD1914           (       checks.asm):00099                         jsr PRINT
237F BDB958           (       checks.asm):00100                         jsr PRINTCR
2382 8600             (       checks.asm):00101                         lda #0          ; return a 0
2384 A7C4             (       checks.asm):00102                         sta ,u
2386 3536             (       checks.asm):00103         @x              puls y,x,d
2388 39               (       checks.asm):00104                         rts
2389 594F55204E454544 (       checks.asm):00105         nodobj  .strz "YOU NEED TO SAY WHAT YOU WANT TO "       
     20544F2053415920
     5748415420594F55
     2057414E5420544F
     2000
                      (       checks.asm):00106         
                      (       checks.asm):00107         ;return a 1 or 0 on user stack
23AB                  (       checks.asm):00108         check_prep_supplied
23AB 3436             (       checks.asm):00109                         pshs d,x,y
23AD 8601             (       checks.asm):00110                         lda #1          ;put a 1 on stack
23AF 3602             (       checks.asm):00111                         pshu a
23B1 B611C9           (       checks.asm):00112                         lda sentence+2  ; prep
23B4 81FF             (       checks.asm):00113                         cmpa #NO_OBJECT
23B6 260D             (       checks.asm):00114                         bne @x
23B8 8E2389           (       checks.asm):00115                         ldx #nodobj     ; print "TRY FORMAT ...."
23BB BD1914           (       checks.asm):00116                         jsr PRINT
23BE BDB958           (       checks.asm):00117                         jsr PRINTCR
23C1 8600             (       checks.asm):00118                         lda #0          ; return a 0
23C3 A7C4             (       checks.asm):00119                         sta ,u
23C5 3536             (       checks.asm):00120         @x              puls y,x,d
23C7 39               (       checks.asm):00121                         rts
                      (       checks.asm):00122         
                      (       checks.asm):00123                         
23C8 5452592054484520 (       checks.asm):00124         noprep  .strz "TRY THE FORMAT: VERB NOUN PREPOSITION NOUN"
     464F524D41543A20
     56455242204E4F55
     4E20505245504F53
     4954494F4E204E4F
     554E00
                      (       checks.asm):00125         
                      (       checks.asm):00126         
23F3                  (       checks.asm):00127         check_iobj_supplied
23F3 3436             (       checks.asm):00128                         pshs d,x,y
23F5 8601             (       checks.asm):00129                         lda #1          ;put a 1 on stack
23F7 3602             (       checks.asm):00130                         pshu a
23F9 B611CA           (       checks.asm):00131                         lda sentence+3  ; iobj
23FC 81FF             (       checks.asm):00132                         cmpa #NO_OBJECT
23FE 2631             (       checks.asm):00133                         bne @x
2400 8E2389           (       checks.asm):00134                         ldx #nodobj     ; print "YOU NEED TO SAY ..."
2403 BD1914           (       checks.asm):00135                         jsr PRINT
2406 8E275B           (       checks.asm):00136                         ldx #word1 ;verb
2409 BD1914           (       checks.asm):00137                         jsr PRINT
240C 8E171B           (       checks.asm):00138                         ldx #the
240F BD1914           (       checks.asm):00139                         jsr PRINT
2412 8E277B           (       checks.asm):00140                         ldx #word2 ; "d.o."
2415 BD1914           (       checks.asm):00141                         jsr PRINT
2418 8E1A8C           (       checks.asm):00142                         ldx #space
241B BD1914           (       checks.asm):00143                         jsr PRINT
241E 8E279B           (       checks.asm):00144                         ldx #word3  ; prep
2421 BD1914           (       checks.asm):00145                         jsr PRINT
2424 8E15BD           (       checks.asm):00146                         ldx #period             
2427 BD1914           (       checks.asm):00147                         jsr PRINT
242A BDB958           (       checks.asm):00148                         jsr PRINTCR
242D 8600             (       checks.asm):00149                         lda #0          ; return a 0
242F A7C4             (       checks.asm):00150                         sta ,u
2431 3536             (       checks.asm):00151         @x              puls y,x,d
2433 39               (       checks.asm):00152                         rts
                      (       checks.asm):00153                         
2434 594F55204E454544 (       checks.asm):00154         noiobj  .strz "YOU NEED TO SAY WHAT YOU WANT TO "       
     20544F2053415920
     5748415420594F55
     2057414E5420544F
     2000
                      (       checks.asm):00155         
                      (       checks.asm):00156         ;used by 'get'
                      (       checks.asm):00157         ;makes sure the player doesn't have an object
2456                  (       checks.asm):00158         check_dont_have_dobj
2456 3436             (       checks.asm):00159                 pshs d,x,y
2458 8600             (       checks.asm):00160                 lda #0
245A 3602             (       checks.asm):00161                 pshu a ; push return code
245C B611C8           (       checks.asm):00162                 lda sentence+1
245F 3602             (       checks.asm):00163                 pshu a
2461 8601             (       checks.asm):00164                 lda #PLAYER
2463 3602             (       checks.asm):00165                 pshu a
2465 BD24B6           (       checks.asm):00166                 jsr is_child_of ; leave code on stack
2468 8601             (       checks.asm):00167                 lda #1
246A A1C4             (       checks.asm):00168                 cmpa ,u
246C 260F             (       checks.asm):00169                 bne @r   ; ne = don't have
246E 8E2484           (       checks.asm):00170                 ldx #alreadyhave ; 
2471 BD1914           (       checks.asm):00171                 jsr PRINT
2474 BDB958           (       checks.asm):00172                 jsr PRINTCR
2477 8600             (       checks.asm):00173                 lda #0          ; return  0
2479 A7C4             (       checks.asm):00174                 sta ,u  
247B 2004             (       checks.asm):00175                 bra @x
247D 8601             (       checks.asm):00176         @r      lda #1
247F A7C4             (       checks.asm):00177             sta ,u
2481 3536             (       checks.asm):00178         @x      puls y,x,d
2483 39               (       checks.asm):00179                 rts
2484 594F5520414C5245 (       checks.asm):00180         alreadyhave     .strz "YOU ALREADY HAVE IT."    
     4144592048415645
     2049542E00
                      (       checks.asm):00181         
                      (       checks.asm):00182         ;check player has obj.  used by drop
2499                  (       checks.asm):00183         check_have_dobj 
2499 3436             (       checks.asm):00184                 pshs d,x,y
249B 8600             (       checks.asm):00185                 lda #0
249D 3602             (       checks.asm):00186                 pshu a ; push return code
249F B611C8           (       checks.asm):00187                 lda sentence+1  ; push dobj
24A2 3602             (       checks.asm):00188                 pshu a
24A4 8601             (       checks.asm):00189                 lda #PLAYER ; push parent
24A6 3602             (       checks.asm):00190                 pshu a
24A8 BD24B6           (       checks.asm):00191                 jsr is_child_of ; leave code on stack for caller
24AB 8601             (       checks.asm):00192                 lda #1
24AD A1C4             (       checks.asm):00193                 cmpa ,u
24AF 1026EF66         (       checks.asm):00194                 lbne print_ret_no_have   ; and leave the 0 on stack
24B3 3536             (       checks.asm):00195         @x      puls y,x,d
24B5 39               (       checks.asm):00196                 rts
                      (       checks.asm):00197                 
                      (       checks.asm):00198         ;top of stack is player (holder)
                      (       checks.asm):00199         ;under that is object (child)
                      (       checks.asm):00200         ;under that is space for return var
24B6                  (       checks.asm):00201         is_child_of
24B6 3436             (       checks.asm):00202                 pshs d,x,y
24B8 8601             (       checks.asm):00203                 lda #1   ; set return val to 1
24BA A742             (       checks.asm):00204                 sta 2,u
24BC 12               (       checks.asm):00205         @lp     nop ; is the parent of this object equal to under the stack
24BD A641             (       checks.asm):00206                 lda 1,u  
24BF C613             (       checks.asm):00207                 ldb #OBJ_ENTRY_SIZE
24C1 3D               (       checks.asm):00208                 mul
24C2 1F01             (       checks.asm):00209                 tfr d,x
24C4 30891DA1         (       checks.asm):00210                 leax obj_table,x
24C8 3001             (       checks.asm):00211                 leax HOLDER_ID,x
24CA A684             (       checks.asm):00212                 lda ,x ; get parent
24CC A1C4             (       checks.asm):00213                 cmpa ,u  ; if holder's parent  equal to parent yes, return (leaving 1 on stack)
24CE 270E             (       checks.asm):00214                 beq @x
24D0 8100             (       checks.asm):00215                 cmpa #0 ; did we hit the top?
24D2 2606             (       checks.asm):00216                 bne @s  ; return 0
24D4 8600             (       checks.asm):00217                 lda #0  
24D6 A742             (       checks.asm):00218                 sta 2,u ; put 0 under the params
24D8 2004             (       checks.asm):00219                 bra @x
24DA A741             (       checks.asm):00220         @s      sta 1,u ; put the child's parent on the stack
24DC 20DE             (       checks.asm):00221                 bra @lp 
24DE 3704             (       checks.asm):00222         @x      pulu b ; pop params, leaving return val on stack
24E0 3704             (       checks.asm):00223                 pulu b ;
24E2 3536             (       checks.asm):00224                 puls y,x,d
24E4 39               (       checks.asm):00225                 rts
                      (       checks.asm):00226         
                      (       checks.asm):00227         ;check_self_or_child    
                      (       checks.asm):00228         ; put box in table (make sure box isn't a child of table)
                      (       checks.asm):00229         ; used for making sure you can't put an object in iteself or a child 
                      (       checks.asm):00230         ; return is #0 for true (don't proceed)
                      (       checks.asm):00231         ; return is #1 for no (ok to proceed)
24E5                  (       checks.asm):00232         check_not_self_or_child
24E5 3436             (       checks.asm):00233                 pshs d,x,y
24E7 8601             (       checks.asm):00234                 lda #1  ; set return code to 1
24E9 3602             (       checks.asm):00235                 pshu a
24EB B611C8           (       checks.asm):00236                 lda sentence+1  ; 
24EE B111CA           (       checks.asm):00237                 cmpa sentence+3 
24F1 2717             (       checks.asm):00238                 beq @n  ; objects are the same
24F3 8600             (       checks.asm):00239                 lda #0  ; push space for return var (could just subtract 1, too)
24F5 3602             (       checks.asm):00240                 pshu a 
24F7 B611CA           (       checks.asm):00241                 lda sentence+3 ; child
24FA 3602             (       checks.asm):00242                 pshu a
24FC B611C8           (       checks.asm):00243                 lda sentence+1 ; holder 
24FF 3602             (       checks.asm):00244                 pshu a  
2501 BD24B6           (       checks.asm):00245                 jsr is_child_of  ; params are already on stack
2504 3702             (       checks.asm):00246                 pulu a
2506 8100             (       checks.asm):00247                 cmpa #0  ; no means ok to proceed
2508 270D             (       checks.asm):00248                 beq     @x
250A 8600             (       checks.asm):00249         @n      lda #0
250C A7C4             (       checks.asm):00250                 sta ,u
250E 8E251A           (       checks.asm):00251                 ldx #impossible
2511 BD1914           (       checks.asm):00252                 jsr PRINT
2514 BDB958           (       checks.asm):00253                 jsr PRINTCR
2517 3536             (       checks.asm):00254         @x      puls y,x,d
2519 39               (       checks.asm):00255                 rts
                      (       checks.asm):00256                 
251A 5448415427532050 (       checks.asm):00257         impossible .strz "THAT'S PHYSICALLY IMPOSSIBLE."        
     4859534943414C4C
     5920494D504F5353
     49424C452E00
                      (         main.asm):00070                 include before_table_6809.asm
                      (before_table_6809):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (before_table_6809):00002         ; SentenceTable6809.asm 
                      (before_table_6809):00003         ; Machine Generated Sentence Table
                      (before_table_6809):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (before_table_6809):00005         
2538                  (before_table_6809):00006         preactions_table
2538 FF               (before_table_6809):00007                 .db 255
                      (before_table_6809):00008         
                      (         main.asm):00071                 include instead_table_6809.asm
                      (instead_table_680):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (instead_table_680):00002         ; SentenceTable6809.asm 
                      (instead_table_680):00003         ; Machine Generated Sentence Table
                      (instead_table_680):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (instead_table_680):00005         
2539                  (instead_table_680):00006         actions_table
2539 0E01FFFF         (instead_table_680):00007                 .db 14,1,255,255        ;kill PLAYER  
253D 264C             (instead_table_680):00008                 .dw kill_self_sub
253F FF01FFFF         (instead_table_680):00009                 .db -1,1,255,255        ;talk to PLAYER  
2543 265C             (instead_table_680):00010                 .dw talk_to_self_sub
2545 FF               (instead_table_680):00011                 .db 255
                      (instead_table_680):00012         
                      (         main.asm):00072                 include after_table_6809.asm
                      (after_table_6809.):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (after_table_6809.):00002         ; SentenceTable6809.asm 
                      (after_table_6809.):00003         ; Machine Generated Sentence Table
                      (after_table_6809.):00004         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (after_table_6809.):00005         
2546                  (after_table_6809.):00006         postactions_table
2546 FF               (after_table_6809.):00007                 .db 255
                      (after_table_6809.):00008         
                      (         main.asm):00073                 include events.asm
                      (       events.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (       events.asm):00002         ;events to run every turn
                      (       events.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2547                  (       events.asm):00004         do_events
2547 3436             (       events.asm):00005                 pshs d,x,y
                      (       events.asm):00006                 ;if player can't see, inc turns without light
2549 BD1BAC           (       events.asm):00007                 jsr get_player_room ; get room and leave it on stack
254C BD1BC0           (       events.asm):00008                 jsr ambient_light 
254F 3702             (       events.asm):00009                 pulu a
2551 8100             (       events.asm):00010                 cmpa #0
2553 2611             (       events.asm):00011                 bne @l
2555 B6274D           (       events.asm):00012                 lda turns_without_light
2558 4C               (       events.asm):00013                 inca 
2559 B7274D           (       events.asm):00014                 sta turns_without_light
255C 8105             (       events.asm):00015                 cmpa #5
255E 8105             (       events.asm):00016                 cmpa #5
2560 1027000B         (       events.asm):00017                 lbeq no_light_death  ; will return
2564 2005             (       events.asm):00018                 bra @d
2566 8600             (       events.asm):00019         @l  lda #0                                              ;set turns w/o light back to 0
2568 B7274D           (       events.asm):00020                 sta turns_without_light
256B 12               (       events.asm):00021         @d  nop ; end else      
                      (       events.asm):00022         
                      (       events.asm):00023         ;       jsr disolve_salt_sub
                      (       events.asm):00024                 include event_jumps_6809.asm
                      (event_jumps_6809.):00001         ; jump to machine generated subroutines
                      (       events.asm):00025         
256C 3536             (       events.asm):00026                 puls y,d,x
256E 39               (       events.asm):00027                 rts
                      (       events.asm):00028         
                      (       events.asm):00029                 
                      (       events.asm):00030                 
256F                  (       events.asm):00031         no_light_death
256F 8E257E           (       events.asm):00032                 ldx #nld
2572 BD1914           (       events.asm):00033                 jsr PRINT
2575 BDB958           (       events.asm):00034                 jsr PRINTCR
2578 BD268C           (       events.asm):00035                 jsr kill_player_sub
257B 3536             (       events.asm):00036                 puls y,d,x
257D 39               (       events.asm):00037                 rts
                      (       events.asm):00038                 
257E 415320594F552046 (       events.asm):00039         nld .strz "AS YOU FUMBLE AROUND IN THE DARKNESS, THE UNSTABLE CANVERN COLLAPSES, KILLING YOU INSTANTLY.  OF LITTLE SOLACE IS THE THOUGHT THAT YOUR INVENTORY MIGHT BE OF USE TO FUTURE ADVENTURES EXPLORING THE CAVERNS."       
     554D424C45204152
     4F554E4420494E20
     544845204441524B
     4E4553532C205448
     4520554E53544142
     4C452043414E5645
     524E20434F4C4C41
     505345532C204B49
     4C4C494E4720594F
     5520494E5354414E
     544C592E20204F46
     204C4954544C4520
     534F4C4143452049
     5320544845205448
     4F55474854205448
     415420594F555220
     494E56454E544F52
     59204D4947485420
     4245204F46205553
     4520544F20465554
     5552452041445645
     4E54555245532045
     58504C4F52494E47
     2054484520434156
     45524E532E00
                      (         main.asm):00074                 include events6809.asm ; machine generated
                      (   events6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (   events6809.asm):00002         ; Machine generated include file
                      (   events6809.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (   events6809.asm):00004                 include kill_self_sub_6809.asm
                      (kill_self_sub_680):00001         
                      (kill_self_sub_680):00002         ; machine generate routine from XML file
264C                  (kill_self_sub_680):00003         kill_self_sub
264C 3436             (kill_self_sub_680):00004                 pshs d,x,y
264E 12               (kill_self_sub_680):00005                 nop ; print("YOU ARE EXPERIENCING SUICIDAL THOUGHTS, YOU SHOULD SEEK PSYCHIATRIC HELP.")
264F 8E1E00           (kill_self_sub_680):00006                 ldx #description_table
2652 8605             (kill_self_sub_680):00007                 lda #5 ; YOU ARE EXPERIENCING SUICIDAL THOUGHTS, YOU SHOULD SEEK PSYCHIATRIC HELP.
2654 3602             (kill_self_sub_680):00008                 pshu a
2656 BD19FF           (kill_self_sub_680):00009                 jsr print_table_entry
2659 3536             (kill_self_sub_680):00010                 puls y,x,d
265B 39               (kill_self_sub_680):00011                 rts
                      (kill_self_sub_680):00012         
                      (   events6809.asm):00005                 include talk_to_self_sub_6809.asm
                      (talk_to_self_sub_):00001         
                      (talk_to_self_sub_):00002         ; machine generate routine from XML file
265C                  (talk_to_self_sub_):00003         talk_to_self_sub
265C 3436             (talk_to_self_sub_):00004                 pshs d,x,y
265E 12               (talk_to_self_sub_):00005                 nop ; print("TALKING TO YOURSELF IS A SIGN OF IMPENDING MENTAL COLLAPSE.")
265F 8E1E00           (talk_to_self_sub_):00006                 ldx #description_table
2662 8606             (talk_to_self_sub_):00007                 lda #6 ; TALKING TO YOURSELF IS A SIGN OF IMPENDING MENTAL COLLAPSE.
2664 3602             (talk_to_self_sub_):00008                 pshu a
2666 BD19FF           (talk_to_self_sub_):00009                 jsr print_table_entry
2669 3536             (talk_to_self_sub_):00010                 puls y,x,d
266B 39               (talk_to_self_sub_):00011                 rts
                      (talk_to_self_sub_):00012         
                      (   events6809.asm):00006                 include smell_sub_6809.asm
                      (smell_sub_6809.as):00001         
                      (smell_sub_6809.as):00002         ; machine generate routine from XML file
266C                  (smell_sub_6809.as):00003         smell_sub
266C 3436             (smell_sub_6809.as):00004                 pshs d,x,y
266E 12               (smell_sub_6809.as):00005                 nop ; print("YOU SMELL NOTHING UNEXPECTED.")
266F 8E1E00           (smell_sub_6809.as):00006                 ldx #description_table
2672 8607             (smell_sub_6809.as):00007                 lda #7 ; YOU SMELL NOTHING UNEXPECTED.
2674 3602             (smell_sub_6809.as):00008                 pshu a
2676 BD19FF           (smell_sub_6809.as):00009                 jsr print_table_entry
2679 3536             (smell_sub_6809.as):00010                 puls y,x,d
267B 39               (smell_sub_6809.as):00011                 rts
                      (smell_sub_6809.as):00012         
                      (   events6809.asm):00007                 include listen_sub_6809.asm
                      (listen_sub_6809.a):00001         
                      (listen_sub_6809.a):00002         ; machine generate routine from XML file
267C                  (listen_sub_6809.a):00003         listen_sub
267C 3436             (listen_sub_6809.a):00004                 pshs d,x,y
267E 12               (listen_sub_6809.a):00005                 nop ; print("YOU HEAR NOTHING UNEXPECTED.")
267F 8E1E00           (listen_sub_6809.a):00006                 ldx #description_table
2682 8608             (listen_sub_6809.a):00007                 lda #8 ; YOU HEAR NOTHING UNEXPECTED.
2684 3602             (listen_sub_6809.a):00008                 pshu a
2686 BD19FF           (listen_sub_6809.a):00009                 jsr print_table_entry
2689 3536             (listen_sub_6809.a):00010                 puls y,x,d
268B 39               (listen_sub_6809.a):00011                 rts
                      (listen_sub_6809.a):00012         
                      (   events6809.asm):00008                 include kill_player_sub_6809.asm
                      (kill_player_sub_6):00001         
                      (kill_player_sub_6):00002         ; machine generate routine from XML file
268C                  (kill_player_sub_6):00003         kill_player_sub
268C 3436             (kill_player_sub_6):00004                 pshs d,x,y
268E 12               (kill_player_sub_6):00005                 nop ; print("***YOU HAVE DIED***.")
268F 8E1E00           (kill_player_sub_6):00006                 ldx #description_table
2692 8609             (kill_player_sub_6):00007                 lda #9 ; ***YOU HAVE DIED***.
2694 3602             (kill_player_sub_6):00008                 pshu a
2696 BD19FF           (kill_player_sub_6):00009                 jsr print_table_entry
2699 12               (kill_player_sub_6):00010                 nop ; player.holder=1
269A 8601             (kill_player_sub_6):00011                 lda #1 ; player
269C C613             (kill_player_sub_6):00012                 ldb #OBJ_ENTRY_SIZE
269E 3D               (kill_player_sub_6):00013                 mul
269F 1F01             (kill_player_sub_6):00014                 tfr d,x
26A1 30891DA1         (kill_player_sub_6):00015                 leax obj_table,x
26A5 3001             (kill_player_sub_6):00016                 leax 1,x   ;holder
26A7 8601             (kill_player_sub_6):00017                 lda #1
26A9 A784             (kill_player_sub_6):00018                 sta ,x
26AB 3536             (kill_player_sub_6):00019                 puls y,x,d
26AD 39               (kill_player_sub_6):00020                 rts
                      (kill_player_sub_6):00021         
                      (         main.asm):00075                 include CheckRules6809.asm
                      (CheckRules6809.as):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (CheckRules6809.as):00002         ; check rules table
                      (CheckRules6809.as):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (CheckRules6809.as):00004         
26AE                  (CheckRules6809.as):00005         check_table
26AE 17               (CheckRules6809.as):00006                 .db 23 ; close
26AF 2360             (CheckRules6809.as):00007                 .dw check_dobj_supplied
26B1 17               (CheckRules6809.as):00008                 .db 23 ; close
26B2 22DB             (CheckRules6809.as):00009                 .dw check_see_dobj
26B4 19               (CheckRules6809.as):00010                 .db 25 ; drink
26B5 2360             (CheckRules6809.as):00011                 .dw check_dobj_supplied
26B7 19               (CheckRules6809.as):00012                 .db 25 ; drink
26B8 22DB             (CheckRules6809.as):00013                 .dw check_see_dobj
26BA 19               (CheckRules6809.as):00014                 .db 25 ; drink
26BB 2499             (CheckRules6809.as):00015                 .dw check_have_dobj
26BD 0F               (CheckRules6809.as):00016                 .db 15 ; drop
26BE 2360             (CheckRules6809.as):00017                 .dw check_dobj_supplied
26C0 0F               (CheckRules6809.as):00018                 .db 15 ; drop
26C1 22DB             (CheckRules6809.as):00019                 .dw check_see_dobj
26C3 0F               (CheckRules6809.as):00020                 .db 15 ; drop
26C4 2499             (CheckRules6809.as):00021                 .dw check_have_dobj
26C6 18               (CheckRules6809.as):00022                 .db 24 ; eat
26C7 2360             (CheckRules6809.as):00023                 .dw check_dobj_supplied
26C9 18               (CheckRules6809.as):00024                 .db 24 ; eat
26CA 22DB             (CheckRules6809.as):00025                 .dw check_see_dobj
26CC 0A               (CheckRules6809.as):00026                 .db 10 ; enter
26CD 2360             (CheckRules6809.as):00027                 .dw check_dobj_supplied
26CF 0A               (CheckRules6809.as):00028                 .db 10 ; enter
26D0 22DB             (CheckRules6809.as):00029                 .dw check_see_dobj
26D2 12               (CheckRules6809.as):00030                 .db 18 ; examine
26D3 2360             (CheckRules6809.as):00031                 .dw check_dobj_supplied
26D5 12               (CheckRules6809.as):00032                 .db 18 ; examine
26D6 22DB             (CheckRules6809.as):00033                 .dw check_see_dobj
26D8 0C               (CheckRules6809.as):00034                 .db 12 ; get
26D9 2360             (CheckRules6809.as):00035                 .dw check_dobj_supplied
26DB 0C               (CheckRules6809.as):00036                 .db 12 ; get
26DC 22DB             (CheckRules6809.as):00037                 .dw check_see_dobj
26DE 0C               (CheckRules6809.as):00038                 .db 12 ; get
26DF 2456             (CheckRules6809.as):00039                 .dw check_dont_have_dobj
26E1 0E               (CheckRules6809.as):00040                 .db 14 ; kill
26E2 2360             (CheckRules6809.as):00041                 .dw check_dobj_supplied
26E4 0E               (CheckRules6809.as):00042                 .db 14 ; kill
26E5 22DB             (CheckRules6809.as):00043                 .dw check_see_dobj
26E7 10               (CheckRules6809.as):00044                 .db 16 ; light
26E8 2360             (CheckRules6809.as):00045                 .dw check_dobj_supplied
26EA 10               (CheckRules6809.as):00046                 .db 16 ; light
26EB 22DB             (CheckRules6809.as):00047                 .dw check_see_dobj
26ED 10               (CheckRules6809.as):00048                 .db 16 ; light
26EE 2499             (CheckRules6809.as):00049                 .dw check_have_dobj
26F0 14               (CheckRules6809.as):00050                 .db 20 ; open
26F1 2360             (CheckRules6809.as):00051                 .dw check_dobj_supplied
26F3 14               (CheckRules6809.as):00052                 .db 20 ; open
26F4 22DB             (CheckRules6809.as):00053                 .dw check_see_dobj
26F6 1A               (CheckRules6809.as):00054                 .db 26 ; put
26F7 2360             (CheckRules6809.as):00055                 .dw check_dobj_supplied
26F9 1A               (CheckRules6809.as):00056                 .db 26 ; put
26FA 22DB             (CheckRules6809.as):00057                 .dw check_see_dobj
26FC 1A               (CheckRules6809.as):00058                 .db 26 ; put
26FD 23AB             (CheckRules6809.as):00059                 .dw check_prep_supplied
26FF 1A               (CheckRules6809.as):00060                 .db 26 ; put
2700 23F3             (CheckRules6809.as):00061                 .dw check_iobj_supplied
2702 1A               (CheckRules6809.as):00062                 .db 26 ; put
2703 24E5             (CheckRules6809.as):00063                 .dw check_not_self_or_child
2705 FF               (CheckRules6809.as):00064                 .db -1 ; turn on
2706 2360             (CheckRules6809.as):00065                 .dw check_dobj_supplied
2708 FF               (CheckRules6809.as):00066                 .db -1 ; turn on
2709 22DB             (CheckRules6809.as):00067                 .dw check_see_dobj
270B FF               (CheckRules6809.as):00068                 .db -1 ; turn on
270C 2499             (CheckRules6809.as):00069                 .dw check_have_dobj
270E 16               (CheckRules6809.as):00070                 .db 22 ; unlock
270F 2360             (CheckRules6809.as):00071                 .dw check_dobj_supplied
2711 16               (CheckRules6809.as):00072                 .db 22 ; unlock
2712 22DB             (CheckRules6809.as):00073                 .dw check_see_dobj
2714 FF               (CheckRules6809.as):00074                 .db -1 ; n,go north,north
2715 22DB             (CheckRules6809.as):00075                 .dw check_see_dobj
2717 FF               (CheckRules6809.as):00076                 .db 255
                      (         main.asm):00076                 include vars.asm
                      (         vars.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         vars.asm):00002         ;vars.asm
                      (         vars.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         vars.asm):00004         
                      (         vars.asm):00005          
                      (         vars.asm):00006         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         vars.asm):00007         ;
                      (         vars.asm):00008         ;
                      (         vars.asm):00009         ;user stack contains return var (1 byte)
                      (         vars.asm):00010         ;user stack contains addr   (2 bytes)
                      (         vars.asm):00011         ;user stack contains value  (1 byte)
                      (         vars.asm):00012         ;0 or 1 is returned on the stack
                      (         vars.asm):00013         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2718                  (         vars.asm):00014         testvar
2718 3436             (         vars.asm):00015                 pshs d,x,y
271A C600             (         vars.asm):00016                 ldb #0
271C A743             (         vars.asm):00017                 sta 3,u ; set return code
271E AE41             (         vars.asm):00018                 ldx 1,u ; load var address
2720 A684             (         vars.asm):00019                 lda ,x  ; load var value
2722 A1C4             (         vars.asm):00020                 cmpa ,u ; compare it to val on stack
2724 2702             (         vars.asm):00021                 beq @x
2726 C601             (         vars.asm):00022                 ldb #1
2728 3343             (         vars.asm):00023         @x      leau 3,u ; pop 2 params (3 bytes total)
272A E7C4             (         vars.asm):00024                 stb ,u   ; store ret val
272C 3536             (         vars.asm):00025                 puls y,x,d
272E 39               (         vars.asm):00026                 rts
                      (         vars.asm):00027         
                      (         vars.asm):00028         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
                      (         vars.asm):00029         ;set var
                      (         vars.asm):00030         ;stack contains addr of var (2 bytes)
                      (         vars.asm):00031         ;stack contains addr of val (1 byte)  on top
                      (         vars.asm):00032         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
272F                  (         vars.asm):00033         setvar
272F 3436             (         vars.asm):00034                 pshs d,x,y
2731 3702             (         vars.asm):00035                 pulu a
2733 3710             (         vars.asm):00036                 pulu x
2735 A784             (         vars.asm):00037                 sta ,x
2737 3536             (         vars.asm):00038                 puls y,x,d
2739 39               (         vars.asm):00039                 rts     
                      (         vars.asm):00040         
                      (         vars.asm):00041         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
                      (         vars.asm):00042         ;stack contains addr of var (2 bytes)
                      (         vars.asm):00043         ;stack contains addr of val (1 byte)  on top
                      (         vars.asm):00044         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
273A                  (         vars.asm):00045         addtovar
273A 3436             (         vars.asm):00046                 pshs d,x,y
273C 3702             (         vars.asm):00047                 pulu a
273E 3710             (         vars.asm):00048                 pulu x
2740 AB84             (         vars.asm):00049                 adda ,x
2742 A784             (         vars.asm):00050                 sta ,x
2744 3536             (         vars.asm):00051                 puls y,x,d
2746 39               (         vars.asm):00052                 rts     
                      (         vars.asm):00053                 
                      (         vars.asm):00054         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (         vars.asm):00055         ;built-in vars
                      (         vars.asm):00056         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2747 0000             (         vars.asm):00057         var_moves .dw 0
2749 0064             (         vars.asm):00058         var_health .dw 100
274B 0000             (         vars.asm):00059         var_prev_room .dw 0
274D 00               (         vars.asm):00060         turns_without_light .db 0 
                      (         main.asm):00077                 include UserVars6809.asm
                      ( UserVars6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      ( UserVars6809.asm):00002         ; User variables
                      ( UserVars6809.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      ( UserVars6809.asm):00004         
                      (         main.asm):00078                 
                      (         main.asm):00079         
                      (         main.asm):00080         ;;;;;;;;;;;;;;;;;;;;;;;
                      (         main.asm):00081         ;article table
                      (         main.asm):00082         ;1st byte is length number
                      (         main.asm):00083         ;;;;;;;;;;;;;;;;;;;;;;;
274E                  (         main.asm):00084         article_table
274E 03               (         main.asm):00085                 .db 3
274F 54484500         (         main.asm):00086                 .strz "THE"
2753 01               (         main.asm):00087                 .db 1
2754 4100             (         main.asm):00088                 .strz "A"
2756 02               (         main.asm):00089                 .db 2
2757 414E00           (         main.asm):00090                 .strz "AN"
275A 00               (         main.asm):00091                 .db 0
                      (         main.asm):00092         
275B                  (         main.asm):00093         word1 rmb 32
277B                  (         main.asm):00094         word2 rmb 32
279B                  (         main.asm):00095         word3 rmb 32
27BB                  (         main.asm):00096         word4 rmb 32
27DB                  (         main.asm):00097         word5 rmb 32
27FB                  (         main.asm):00098         word6 rmb 32
281B                  (         main.asm):00099         word7 rmb 32
283B                  (         main.asm):00100         word8 rmb 32
285B 00               (         main.asm):00101         hit_end .db 0
285C 00               (         main.asm):00102         word_count .db 0
285D 0000             (         main.asm):00103         word_start .dw 0x0000
285F 0000             (         main.asm):00104         word_end .dw 0x0000
2861 00               (         main.asm):00105         first_char .db 0
2862 00               (         main.asm):00106         last_char .db 0
2863 00               (         main.asm):00107         table_index .db 0
2864 0000             (         main.asm):00108         user_stack_save .dw 0x0000
2866 0000             (         main.asm):00109         sys_stack_save .dw 0x0000
                      (         main.asm):00110         
                      (         main.asm):00111                 include Welcome6809.asm
                      (  Welcome6809.asm):00001         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (  Welcome6809.asm):00002         ; welcome message include file
                      (  Welcome6809.asm):00003         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      (  Welcome6809.asm):00004         
2868 53484F5254205745 (  Welcome6809.asm):00005         welcome .strz  "SHORT WELCOME MESSAGE."
     4C434F4D45204D45
     53534147452E00
287F 594F5552204E414D (  Welcome6809.asm):00006         author .strz  "YOUR NAME"
     4500
2889 312E3000         (  Welcome6809.asm):00007         version .strz  "1.0"
                      (         main.asm):00112                 
                      (         main.asm):00113                 end start
